
(set-option :print-success false)
(set-info :smt-lib-version |2.6|)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; benchmark generated from python API
(set-info :status unknown)
(declare-sort T@U 0)
 (declare-sort T@T 0)
 (declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun regexType () T@T)
(declare-fun type (T@U) T@T)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun string_2_U (String) T@U)
(declare-fun stringType () T@T)
(declare-fun U_2_string (T@U) String)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun rmodeType () T@T)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun boolType () T@T)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun real_2_U (Real) T@U)
(declare-fun realType () T@T)
(declare-fun U_2_real (T@U) Real)
(declare-fun int_2_U (Int) T@U)
(declare-fun intType () T@T)
(declare-fun U_2_int (T@U) Int)
(declare-fun Ctor (T@T) Int)
(declare-fun $LS (T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun Lit (T@U) T@U)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun |key#0@@61| () T@U)
(declare-fun PagedBetree.ChildMap.mapp (T@U) T@U)
(declare-fun PagedBetree.BetreeNode.children (T@U) T@U)
(declare-fun this@@248 () T@U)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun PagedBetree.ChildMap.ChildMap_q (T@U) Bool)
(declare-fun PagedBetree.BetreeNode.BetreeNode_q (T@U) Bool)
(declare-fun PagedBetree.ChildMap.WF (T@U T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun Buffers.__default.AnyKey (T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun PagedBetree.BetreeNode.WF (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun BoxType () T@T)
(declare-fun |PagedBetree.ChildMap.WF#canCall| (T@U) Bool)
(declare-fun Buffers.__default.Total (T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $Heap@@50 () T@U)
(declare-fun Tclass.PagedBetree.ChildMap () T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun alloc () T@U)
(declare-fun null () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun |PagedBetree.BetreeNode.WF#canCall| (T@U) Bool)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun $_Frame@0@@0 () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun refType () T@T)
(declare-fun Tclass.PagedBetree.BetreeNode () T@U)
(declare-fun StartFuelAssert_PagedBetree.Path.ReplacedChildren () T@U)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun StartFuel_PagedBetree.Path.ReplacedChildren () T@U)
(declare-fun StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet () T@U)
(declare-fun StartFuel_MsgHistoryMod.MsgHistory.LSNSet () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapInvert () T@U)
(declare-fun StartFuel_Maps._default.IMapInvert () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType1Type () T@T)
(declare-fun |Buffers.__default.AnyKey#canCall| (T@U) Bool)
(declare-fun TISet (T@U) T@U)
(declare-fun |Buffers.__default.Total#canCall| (T@U) Bool)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun TotalKMMapMod.__default.DefaultV () T@U)
(declare-fun TotalKMMapMod.__default.TerminalValue (T@U) Bool)
(declare-fun |#PagedBetree.BetreeNode.BetreeNode| (T@U T@U) T@U)
(assert
 (let (($x168 (forall ((arg0@@10 (RegEx String)) )(! (= (type (regex_2_U arg0@@10)) regexType) :pattern ( (regex_2_U arg0@@10) ) :qid funType:regex_2_U))
 ))
 (let (($x164 (forall ((x@@4 T@U) )(! (let (($x161 (= (regex_2_U (U_2_regex x@@4)) x@@4)))
 (let ((?x63 (type x@@4)))
 (let (($x158 (= ?x63 regexType)))
 (=> $x158 $x161)))) :pattern ( (U_2_regex x@@4) ) :qid cast:U_2_regex))
 ))
 (let (($x156 (forall ((arg0@@9 (RegEx String)) )(! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :pattern ( (regex_2_U arg0@@9) ) :qid typeInv:U_2_regex))
 ))
 (let (($x149 (forall ((arg0@@8 String) )(! (= (type (string_2_U arg0@@8)) stringType) :pattern ( (string_2_U arg0@@8) ) :qid funType:string_2_U))
 ))
 (let (($x145 (forall ((x@@3 T@U) )(! (let (($x142 (= (string_2_U (U_2_string x@@3)) x@@3)))
 (let ((?x63 (type x@@3)))
 (let (($x139 (= ?x63 stringType)))
 (=> $x139 $x142)))) :pattern ( (U_2_string x@@3) ) :qid cast:U_2_string))
 ))
 (let (($x137 (forall ((arg0@@7 String) )(! (let ((?x133 (string_2_U arg0@@7)))
 (let ((?x134 (U_2_string ?x133)))
 (= ?x134 arg0@@7))) :pattern ( (string_2_U arg0@@7) ) :qid typeInv:U_2_string))
 ))
 (let (($x130 (forall ((arg0@@6 RoundingMode) )(! (= (type (rmode_2_U arg0@@6)) rmodeType) :pattern ( (rmode_2_U arg0@@6) ) :qid funType:rmode_2_U))
 ))
 (let (($x126 (forall ((x@@2 T@U) )(! (let (($x123 (= (rmode_2_U (U_2_rmode x@@2)) x@@2)))
 (let ((?x63 (type x@@2)))
 (let (($x120 (= ?x63 rmodeType)))
 (=> $x120 $x123)))) :pattern ( (U_2_rmode x@@2) ) :qid cast:U_2_rmode))
 ))
 (let (($x118 (forall ((arg0@@5 RoundingMode) )(! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :pattern ( (rmode_2_U arg0@@5) ) :qid typeInv:U_2_rmode))
 ))
 (let (($x111 (forall ((arg0@@4 Bool) )(! (= (type (bool_2_U arg0@@4)) boolType) :pattern ( (bool_2_U arg0@@4) ) :qid funType:bool_2_U))
 ))
 (let (($x107 (forall ((x@@1 T@U) )(! (let (($x104 (= (bool_2_U (U_2_bool x@@1)) x@@1)))
 (let ((?x63 (type x@@1)))
 (let (($x101 (= ?x63 boolType)))
 (=> $x101 $x104)))) :pattern ( (U_2_bool x@@1) ) :qid cast:U_2_bool))
 ))
 (let (($x99 (forall ((arg0@@3 Bool) )(! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :pattern ( (bool_2_U arg0@@3) ) :qid typeInv:U_2_bool))
 ))
 (let (($x92 (forall ((arg0@@2 Real) )(! (= (type (real_2_U arg0@@2)) realType) :pattern ( (real_2_U arg0@@2) ) :qid funType:real_2_U))
 ))
 (let (($x88 (forall ((x@@0 T@U) )(! (let (($x85 (= (real_2_U (U_2_real x@@0)) x@@0)))
 (let ((?x63 (type x@@0)))
 (let (($x82 (= ?x63 realType)))
 (=> $x82 $x85)))) :pattern ( (U_2_real x@@0) ) :qid cast:U_2_real))
 ))
 (let (($x80 (forall ((arg0@@1 Real) )(! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :pattern ( (real_2_U arg0@@1) ) :qid typeInv:U_2_real))
 ))
 (let (($x74 (forall ((arg0@@0 Int) )(! (= (type (int_2_U arg0@@0)) intType) :pattern ( (int_2_U arg0@@0) ) :qid funType:int_2_U))
 ))
 (let (($x70 (forall ((x T@U) )(! (let (($x67 (= (int_2_U (U_2_int x)) x)))
 (let ((?x63 (type x)))
 (let (($x64 (= ?x63 intType)))
 (=> $x64 $x67)))) :pattern ( (U_2_int x) ) :qid cast:U_2_int))
 ))
 (let (($x60 (forall ((arg0 Int) )(! (= (U_2_int (int_2_U arg0)) arg0) :pattern ( (int_2_U arg0) ) :qid typeInv:U_2_int))
 ))
 (let (($x53 (= (Ctor regexType) 5)))
 (let (($x48 (= (Ctor stringType) 4)))
 (let (($x43 (= (Ctor rmodeType) 3)))
 (let (($x38 (= (Ctor boolType) 2)))
 (let (($x39 (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) $x38)))
 (let (($x75 (and (and (and (and (and (and $x39 $x43) $x48) $x53) $x60) $x70) $x74)))
 (let (($x112 (and (and (and (and (and (and $x75 $x80) $x88) $x92) $x99) $x107) $x111)))
 (let (($x150 (and (and (and (and (and (and $x112 $x118) $x126) $x130) $x137) $x145) $x149)))
 (and (and (and $x150 $x156) $x164) $x168))))))))))))))))))))))))))))
(assert
 (forall ((arg0@@68 T@U) )(! (= (type ($LS arg0@@68)) LayerTypeType) :pattern ( ($LS arg0@@68) ) :qid funType:$LS))
 )
(assert
 (forall ((arg0@@29 T@U) )(! (let ((?x63 (type arg0@@29)))
 (= (type (Lit arg0@@29)) ?x63)) :pattern ( (Lit arg0@@29) ) :qid funType:Lit))
 )
(assert
 (forall ((x@@8 T@U) )(! (let ((?x4821 (Lit x@@8)))
 (= ?x4821 x@@8)) :pattern ( (Lit x@@8) ) :qid DafnyPreludebpl.89:29))
 )
(assert
 (let (($x5120 (forall ((arg0@@47 T@T) (arg1@@13 T@T) )(! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :pattern ( (IMapType arg0@@47 arg1@@13) ) :qid typeInv:IMapTypeInv1))
 ))
 (let (($x5116 (forall ((arg0@@46 T@T) (arg1@@12 T@T) )(! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :pattern ( (IMapType arg0@@46 arg1@@12) ) :qid typeInv:IMapTypeInv0))
 ))
 (let (($x5112 (forall ((arg0@@45 T@T) (arg1@@11 T@T) )(! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid ctor:IMapType))
 ))
 (and (and $x5112 $x5116) $x5120)))))
(assert
 (let (($x5482 (forall ((arg0@@57 T@U) )(! (= (type (|IMap#Domain| arg0@@57)) (MapType0Type (IMapTypeInv0 (type arg0@@57)) boolType)) :pattern ( (|IMap#Domain| arg0@@57) ) :qid funType:IMap#Domain))
 ))
 (let (($x5476 (forall ((arg0@@56 T@U) )(! (= (type (|IMap#Elements| arg0@@56)) (MapType0Type (IMapTypeInv0 (type arg0@@56)) (IMapTypeInv1 (type arg0@@56)))) :pattern ( (|IMap#Elements| arg0@@56) ) :qid funType:IMap#Elements))
 ))
 (and $x5476 $x5482))))
(assert
 (let ((?x137075 (PagedBetree.BetreeNode.children this@@248)))
 (let ((?x137083 (PagedBetree.ChildMap.mapp ?x137075)))
 (let ((?x137084 (|IMap#Domain| ?x137083)))
 (let (($x137115 (U_2_bool (MapType0Select ?x137084 ($Box |key#0@@61|)))))
 (let (($x137108 (PagedBetree.ChildMap.ChildMap_q ?x137075)))
 (let (($x137051 (PagedBetree.BetreeNode.BetreeNode_q this@@248)))
 (let (($x137117 (=> (and $x137051 (and $x137108 (= (ControlFlow 0 49070) (- 0 334575)))) $x137115)))
 (let ((?x10306 ($LS $LZ)))
 (let ((?x10439 ($LS ?x10306)))
 (let (($x137103 (PagedBetree.ChildMap.WF ?x10439 ?x137075)))
 (let (($x137119 (=> $x137103 (and (=> (= (ControlFlow 0 49070) (- 0 334565)) $x137051) $x137117))))
 (let (($x137099 (forall ((|k#0@@84| T@U) )(! (let ((?x4832 ($Box |k#0@@84|)))
 (let ((?x137075 (PagedBetree.BetreeNode.children this@@248)))
 (let ((?x137083 (PagedBetree.ChildMap.mapp ?x137075)))
 (let ((?x137093 (MapType0Select (|IMap#Elements| ?x137083) ?x4832)))
 (let ((?x137094 ($Unbox DatatypeTypeType ?x137093)))
 (let ((?x10306 ($LS $LZ)))
 (let ((?x10439 ($LS ?x10306)))
 (let (($x137095 (PagedBetree.BetreeNode.WF ?x10439 ?x137094)))
 (let (($x117427 (Buffers.__default.AnyKey |k#0@@84|)))
 (let (($x117424 ($Is |k#0@@84| Tclass.KeyType.Key)))
 (let (($x117443 (and $x117424 $x117427)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |k#0@@84|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (=> (and $x7226 $x117443) $x137095))))))))))))))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0@@84|))) ) :pattern ( (Buffers.__default.AnyKey |k#0@@84|) ) :qid PagedBetreeidfy.51:18!1208))
 ))
 (let (($x137082 (PagedBetree.ChildMap.WF ?x10306 ?x137075)))
 (let (($x137077 (|PagedBetree.ChildMap.WF#canCall| ?x137075)))
 (let (($x137102 (=> (and (= (ControlFlow 0 49070) (- 0 334465)) $x137077) (or $x137082 $x137099))))
 (let (($x137088 (=> (and (= (ControlFlow 0 49070) (- 0 334435)) $x137077) (or $x137082 (Buffers.__default.Total ?x137084)))))
 (let (($x137076 ($IsAlloc ?x137075 Tclass.PagedBetree.ChildMap $Heap@@50)))
 (let (($x137125 (and (=> (= (ControlFlow 0 49070) (- 0 334409)) $x137051) (=> (and $x137051 $x137076 (and $x137077 $x137077)) (and $x137088 (and $x137102 $x137119))))))
 (let ((?x137068 (|lambda#5| null $Heap@@50 alloc false)))
 (let (($x137069 (= $_Frame@0 ?x137068)))
 (let ((?x137058 (ControlFlow 0 49064)))
 (let (($x137067 (= ?x137058 49070)))
 (let (($x137129 (=> |b$reqreads#0@0| (and (=> (= ?x137058 49068) true) (=> (and $x137067 $x137069) $x137125)))))
 (let (($x137048 (|PagedBetree.BetreeNode.WF#canCall| this@@248)))
 (let (($x137046 (forall (($o@@141 T@U) ($f@@91 T@U) )(! (let ((?x63 (type $f@@91)))
 (let ((?x5145 (FieldTypeInv0 ?x63)))
 (let ((?x5870 (FieldType ?x5145)))
 (let (($x6005 (= ?x63 ?x5870)))
 (let ((?x176 (type $o@@141)))
 (let (($x5963 (= ?x176 refType)))
 (let (($x6006 (and $x5963 $x6005)))
 (=> (and $x6006 false) (U_2_bool (MapType6Select $_Frame@0@@0 $o@@141 $f@@91)))))))))) :qid PagedBetreeidfy.77:16))
 ))
 (let (($x137053 (and (and (= |b$reqreads#0@0| $x137046) $x137048) (and (PagedBetree.BetreeNode.WF ?x10306 this@@248) $x137051))))
 (let (($x136790 ($IsAlloc this@@248 Tclass.PagedBetree.BetreeNode $Heap@@50)))
 (let (($x137040 (= (AsFuelBottom StartFuelAssert_PagedBetree.Path.ReplacedChildren) StartFuelAssert_PagedBetree.Path.ReplacedChildren)))
 (let (($x137037 (= (AsFuelBottom StartFuel_PagedBetree.Path.ReplacedChildren) StartFuel_PagedBetree.Path.ReplacedChildren)))
 (let (($x137035 (= (AsFuelBottom StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet) StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet)))
 (let (($x137030 (= (AsFuelBottom StartFuel_MsgHistoryMod.MsgHistory.LSNSet) StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let (($x137028 (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3)))
 (let (($x137025 (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3)))
 (let (($x137023 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion)))
 (let (($x137019 (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)))
 (let (($x137017 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB)))
 (let (($x137014 (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB)))
 (let (($x137012 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA)))
 (let (($x137033 (and (and (and $x137012 $x137014) (and $x137017 $x137019)) (and (and $x137023 $x137025) (and $x137028 $x137030)))))
 (let (($x137006 (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA)))
 (let (($x137004 (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion)))
 (let (($x137001 (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion)))
 (let (($x136999 (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB)))
 (let (($x136995 (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB)))
 (let (($x136993 (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA)))
 (let (($x136990 (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA)))
 (let (($x136988 (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion)))
 (let (($x137009 (and (and (and $x136988 $x136990) (and $x136993 $x136995)) (and (and $x136999 $x137001) (and $x137004 $x137006)))))
 (let (($x136983 (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion)))
 (let (($x136981 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1)))
 (let (($x136978 (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1)))
 (let (($x136976 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove)))
 (let (($x136972 (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)))
 (let (($x136970 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapInvert) StartFuelAssert_Maps._default.IMapInvert)))
 (let (($x136967 (= (AsFuelBottom StartFuel_Maps._default.IMapInvert) StartFuel_Maps._default.IMapInvert)))
 (let (($x136965 (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong)))
 (let (($x136986 (and (and (and $x136965 $x136967) (and $x136970 $x136972)) (and (and $x136976 $x136978) (and $x136981 $x136983)))))
 (let (($x137056 (and (and $x136986 $x137009) (and $x137033 (and (and (and $x137035 $x137037) (and $x137040 $x136790)) $x137053)))))
 (let (($x136958 (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong)))
 (let (($x136956 (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong)))
 (let (($x136953 (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong)))
 (let (($x136951 (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove)))
 (let (($x136947 (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove)))
 (let (($x136945 (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1)))
 (let (($x136942 (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1)))
 (let (($x136940 (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill)))
 (let (($x136961 (and (and (and $x136940 $x136942) (and $x136945 $x136947)) (and (and $x136951 $x136953) (and $x136956 $x136958)))))
 (let (($x136935 (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)))
 (let (($x136933 (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax)))
 (let (($x136930 (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax)))
 (let (($x136928 (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten)))
 (let (($x136924 (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)))
 (let (($x136922 (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength)))
 (let (($x136919 (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)))
 (let (($x136917 (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape)))
 (let (($x136938 (and (and (and $x136917 $x136919) (and $x136922 $x136924)) (and (and $x136928 $x136930) (and $x136933 $x136935)))))
 (let (($x136911 (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)))
 (let (($x136909 (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip)))
 (let (($x136906 (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip)))
 (let (($x136904 (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip)))
 (let (($x136900 (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)))
 (let (($x136898 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate)))
 (let (($x136895 (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate)))
 (let (($x136893 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength)))
 (let (($x136914 (and (and (and $x136893 $x136895) (and $x136898 $x136900)) (and (and $x136904 $x136906) (and $x136909 $x136911)))))
 (let (($x136888 (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)))
 (let (($x136886 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex)))
 (let (($x136883 (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex)))
 (let (($x136881 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate)))
 (let (($x136877 (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)))
 (let (($x136875 (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix)))
 (let (($x136872 (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)))
 (let (($x136870 (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix)))
 (let (($x136891 (and (and (and $x136870 $x136872) (and $x136875 $x136877)) (and (and $x136881 $x136883) (and $x136886 $x136888)))))
 (let (($x137131 (=> (and (and (and $x136891 $x136914) (and $x136938 $x136961)) $x137056) (and (=> (= ?x137058 (- 0 334380)) |b$reqreads#0@0|) $x137129))))
 (let (($x136864 (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)))
 (let (($x136862 (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq)))
 (let (($x136859 (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq)))
 (let (($x136857 (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3)))
 (let (($x136853 (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)))
 (let (($x136851 (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat)))
 (let (($x136848 (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat)))
 (let (($x136846 (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1)))
 (let (($x136867 (and (and (and $x136846 $x136848) (and $x136851 $x136853)) (and (and $x136857 $x136859) (and $x136862 $x136864)))))
 (let (($x136841 (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)))
 (let (($x136839 (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2)))
 (let (($x136836 (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)))
 (let (($x136834 (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert)))
 (let (($x136830 (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)))
 (let (($x136828 (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue)))
 (let (($x136825 (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue)))
 (let (($x136823 (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove)))
 (let (($x136844 (and (and (and $x136823 $x136825) (and $x136828 $x136830)) (and (and $x136834 $x136836) (and $x136839 $x136841)))))
 (let (($x136818 (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)))
 (let (($x136816 (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque)))
 (let (($x136813 (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque)))
 (let (($x136811 (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range)))
 (let (($x136807 (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)))
 (let (($x136805 (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes)))
 (let (($x136802 (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes)))
 (let ((?x136799 (|lambda#4| null $Heap@@50 alloc false)))
 (let (($x136800 (= $_Frame@0@@0 ?x136799)))
 (let (($x136821 (and (and (and $x136800 $x136802) (and $x136805 $x136807)) (and (and $x136811 $x136813) (and $x136816 $x136818)))))
 (let (($x136796 (= (ControlFlow 0 333606) 49064)))
 (let (($x117743 (= 10 $FunctionContextHeight)))
 (let (($x136792 ($Is |key#0@@61| Tclass.KeyType.Key)))
 (let (($x136798 (and (and (and ($Is this@@248 Tclass.PagedBetree.BetreeNode) $x136790) $x136792) (and $x117743 $x136796))))
 (let (($x137135 (=> (and (and ($IsGoodHeap $Heap@@50) ($IsHeapAnchor $Heap@@50)) $x136798 $x136821 (and $x136844 $x136867) (and (and (and $x136891 $x136914) (and $x136938 $x136961)) $x137056)) (and (=> (= ?x137058 (- 0 334380)) |b$reqreads#0@0|) $x137129))))
 (let (($x136785 (= (ControlFlow 0 0) 333606)))
 (not (=> (and $x136785 (and ($IsGoodHeap $Heap@@50) ($IsHeapAnchor $Heap@@50)) $x136798 $x136821 (and $x136844 $x136867) (and (and (and $x136891 $x136914) (and $x136938 $x136961)) $x137056)) (and (=> (= ?x137058 (- 0 334380)) |b$reqreads#0@0|) $x137129)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let (($x136782 (= (type StartFuelAssert_PagedBetree.Path.ReplacedChildren) LayerTypeType)))
 (let (($x136778 (= (type StartFuel_PagedBetree.Path.ReplacedChildren) LayerTypeType)))
 (let (($x136774 (= (type StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet) LayerTypeType)))
 (let (($x136770 (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)))
 (let (($x136766 (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)))
 (let (($x136762 (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)))
 (let (($x136758 (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)))
 (let (($x136754 (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)))
 (let (($x136750 (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)))
 (let (($x136746 (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)))
 (let (($x136742 (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)))
 (let (($x136738 (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)))
 (let (($x136734 (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)))
 (let (($x136730 (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)))
 (let (($x136726 (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)))
 (let (($x136722 (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)))
 (let (($x136718 (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)))
 (let (($x136714 (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)))
 (let (($x136710 (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)))
 (let (($x136706 (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)))
 (let (($x136702 (= (type StartFuelAssert_Maps._default.IMapInvert) LayerTypeType)))
 (let (($x136698 (= (type StartFuel_Maps._default.IMapInvert) LayerTypeType)))
 (let (($x136694 (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)))
 (let (($x136690 (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)))
 (let (($x136686 (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)))
 (let (($x136682 (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)))
 (let (($x136678 (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)))
 (let (($x136674 (= (type StartFuel_Sequences._default.fill) LayerTypeType)))
 (let (($x136670 (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType)))
 (let (($x136666 (= (type StartFuel_Sequences._default.seqMax) LayerTypeType)))
 (let (($x136662 (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)))
 (let (($x136658 (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)))
 (let (($x136654 (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)))
 (let (($x136650 (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)))
 (let (($x136646 (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)))
 (let (($x136642 (= (type StartFuel_Sequences._default.Zip) LayerTypeType)))
 (let (($x136638 (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)))
 (let (($x136634 (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)))
 (let (($x136630 (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)))
 (let (($x136626 (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)))
 (let (($x136622 (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)))
 (let (($x136618 (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)))
 (let (($x136614 (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)))
 (let (($x136610 (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)))
 (let (($x136606 (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)))
 (let (($x136602 (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)))
 (let (($x136598 (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)))
 (let (($x136594 (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)))
 (let (($x136590 (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)))
 (let (($x136586 (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)))
 (let (($x136582 (= (type StartFuel_Sequences._default.concat3) LayerTypeType)))
 (let (($x136578 (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)))
 (let (($x136574 (= (type StartFuel_Sequences._default.concat) LayerTypeType)))
 (let (($x136570 (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)))
 (let (($x136566 (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)))
 (let (($x136562 (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)))
 (let (($x136558 (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)))
 (let (($x136554 (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)))
 (let (($x136550 (= (type StartFuel_Sequences._default.insert) LayerTypeType)))
 (let (($x136546 (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType)))
 (let (($x136542 (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType)))
 (let (($x136538 (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)))
 (let (($x136534 (= (type StartFuel_Sequences._default.remove) LayerTypeType)))
 (let (($x136530 (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)))
 (let (($x136526 (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)))
 (let (($x136522 (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)))
 (let ((?x136517 (type StartFuel_Sequences._default.Range)))
 (let (($x136518 (= ?x136517 LayerTypeType)))
 (let ((?x134985 (MapType6Type refType boolType)))
 (let (($x136514 (= (type $_Frame@0@@0) ?x134985)))
 (let ((?x5070 (SeqType BoxType)))
 (let (($x136512 (= (type |key#0@@61|) ?x5070)))
 (let ((?x136507 (type this@@248)))
 (let (($x136508 (= ?x136507 DatatypeTypeType)))
 (let ((?x5185 (MapType0Type refType MapType1Type)))
 (let (($x136504 (= (type $Heap@@50) ?x5185)))
 (let (($x136501 (= (type $_Frame@0) ?x134985)))
 (let (($x136523 (and (and (and (and (and (and $x136501 $x136504) $x136508) $x136512) $x136514) $x136518) $x136522)))
 (let (($x136547 (and (and (and (and (and (and $x136523 $x136526) $x136530) $x136534) $x136538) $x136542) $x136546)))
 (let (($x136571 (and (and (and (and (and (and $x136547 $x136550) $x136554) $x136558) $x136562) $x136566) $x136570)))
 (let (($x136595 (and (and (and (and (and (and $x136571 $x136574) $x136578) $x136582) $x136586) $x136590) $x136594)))
 (let (($x136619 (and (and (and (and (and (and $x136595 $x136598) $x136602) $x136606) $x136610) $x136614) $x136618)))
 (let (($x136643 (and (and (and (and (and (and $x136619 $x136622) $x136626) $x136630) $x136634) $x136638) $x136642)))
 (let (($x136667 (and (and (and (and (and (and $x136643 $x136646) $x136650) $x136654) $x136658) $x136662) $x136666)))
 (let (($x136691 (and (and (and (and (and (and $x136667 $x136670) $x136674) $x136678) $x136682) $x136686) $x136690)))
 (let (($x136715 (and (and (and (and (and (and $x136691 $x136694) $x136698) $x136702) $x136706) $x136710) $x136714)))
 (let (($x136739 (and (and (and (and (and (and $x136715 $x136718) $x136722) $x136726) $x136730) $x136734) $x136738)))
 (let (($x136763 (and (and (and (and (and (and $x136739 $x136742) $x136746) $x136750) $x136754) $x136758) $x136762)))
 (and (and (and (and (and $x136763 $x136766) $x136770) $x136774) $x136778) $x136782))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (let (($x134335 (forall ((|key#0@@51| T@U) )(! (let (($x117698 (U_2_bool (Lit (bool_2_U true)))))
 (let (($x117427 (Buffers.__default.AnyKey |key#0@@51|)))
 (let (($x134333 (= $x117427 $x117698)))
 (let (($x117424 ($Is |key#0@@51| Tclass.KeyType.Key)))
 (let (($x117426 (|Buffers.__default.AnyKey#canCall| |key#0@@51|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |key#0@@51|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let (($x134324 (and $x7226 (or $x117426 $x117424))))
 (=> $x134324 $x134333)))))))))) :pattern ( (Buffers.__default.AnyKey |key#0@@51|) ) :qid Buffersidfy.15:20!1659))
 ))
 (=> true $x134335)))
(assert
 (let (($x134367 (forall ((|keys#0@@1| T@U) )(! (let (($x134363 (forall ((|k#0@@82| T@U) )(! (let ((?x4832 ($Box |k#0@@82|)))
 (let ((?x118060 (MapType0Select |keys#0@@1| ?x4832)))
 (let (($x118061 (U_2_bool ?x118060)))
 (let (($x117427 (Buffers.__default.AnyKey |k#0@@82|)))
 (let (($x117424 ($Is |k#0@@82| Tclass.KeyType.Key)))
 (let (($x117443 (and $x117424 $x117427)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |k#0@@82|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (=> (and $x7226 $x117443) $x118061)))))))))) :pattern ( (MapType0Select |keys#0@@1| ($Box |k#0@@82|)) ) :pattern ( (Buffers.__default.AnyKey |k#0@@82|) ) :qid Buffersidfy.17:12!1673))
 ))
 (let (($x134350 (Buffers.__default.Total |keys#0@@1|)))
 (let (($x134360 (forall ((|k#0@@81| T@U) )(! (let (($x117426 (|Buffers.__default.AnyKey#canCall| |k#0@@81|)))
 (let (($x117424 ($Is |k#0@@81| Tclass.KeyType.Key)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |k#0@@81|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let (($x117425 (and $x7226 $x117424)))
 (=> $x117425 $x117426))))))) :pattern ( (Buffers.__default.AnyKey |k#0@@81|) ) :pattern ( (MapType0Select |keys#0@@1| ($Box |k#0@@81|)) ) :qid Buffersidfy.17:12))
 ))
 (let ((?x118023 (TISet Tclass.KeyType.Key)))
 (let (($x118024 ($Is |keys#0@@1| ?x118023)))
 (let ((?x5021 (MapType0Type BoxType boolType)))
 (let ((?x63 (type |keys#0@@1|)))
 (let (($x5314 (= ?x63 ?x5021)))
 (let (($x134348 (and $x5314 (or (|Buffers.__default.Total#canCall| |keys#0@@1|) $x118024))))
 (=> $x134348 (and $x134360 (= $x134350 $x134363)))))))))))) :pattern ( (Buffers.__default.Total |keys#0@@1|) ) :qid Buffersidfy.16:19!1676))
 ))
 (=> true $x134367)))
(assert
 (let (($x125132 ($Is TotalKMMapMod.__default.DefaultV Tclass.ValueMessage.Message)))
 (let ((?x125127 (Lit TotalKMMapMod.__default.DefaultV)))
 (let (($x125131 (U_2_bool (Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue ?x125127))))))
 (=> (and true true) (and $x125131 $x125132))))))
(assert
 (let (($x117708 (forall (($ly@@9 T@U) (this@@9 T@U) )(! (let ((?x117592 (PagedBetree.BetreeNode.children this@@9)))
 (let (($x117702 (PagedBetree.ChildMap.WF $ly@@9 ?x117592)))
 (let (($x117532 (PagedBetree.BetreeNode.BetreeNode_q this@@9)))
 (let ((?x9982 ($LS $ly@@9)))
 (let (($x117664 (PagedBetree.BetreeNode.WF ?x9982 this@@9)))
 (let (($x117698 (U_2_bool (Lit (bool_2_U true)))))
 (let (($x117706 (and (=> (and $x117698 $x117532) (|PagedBetree.ChildMap.WF#canCall| ?x117592)) (= $x117664 (and true (=> $x117532 $x117702))))))
 (let (($x117634 ($Is this@@9 Tclass.PagedBetree.BetreeNode)))
 (let (($x117401 (not (= 9 $FunctionContextHeight))))
 (let (($x117693 (and $x117401 $x117634)))
 (let (($x117692 (|PagedBetree.BetreeNode.WF#canCall| this@@9)))
 (let ((?x63 (type this@@9)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type $ly@@9)))
 (let (($x9979 (= ?x176 LayerTypeType)))
 (let (($x117390 (and $x9979 $x5613)))
 (=> (and $x117390 (or $x117692 $x117693)) $x117706))))))))))))))))) :pattern ( (PagedBetree.BetreeNode.WF ($LS $ly@@9) this@@9) ) :qid PagedBetreeidfy.72:15!1188))
 ))
 (let (($x117398 (<= 9 $FunctionContextHeight)))
 (=> $x117398 $x117708))))
(assert
 (forall ((|a#12#0#0| T@U) (|a#12#1#0| T@U) )(! (let ((?x117520 (|#PagedBetree.BetreeNode.BetreeNode| |a#12#0#0| |a#12#1#0|)))
 (let (($x117622 (= (PagedBetree.BetreeNode.children ?x117520) |a#12#1#0|)))
 (let ((?x63 (type |a#12#1#0|)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type |a#12#0#0|)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x9771 (and $x9722 $x5613)))
 (=> $x9771 $x117622)))))))) :pattern ( (|#PagedBetree.BetreeNode.BetreeNode| |a#12#0#0| |a#12#1#0|) ) :qid PagedBetreeidfy.69:5!1156))
 )
(assert
 (forall ((d@@43 T@U) )(! (let (($x117541 (exists ((|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) )(! (let ((?x117520 (|#PagedBetree.BetreeNode.BetreeNode| |a#6#0#0@@0| |a#6#1#0@@0|)))
 (let (($x117539 (= d@@43 ?x117520)))
 (let ((?x63 (type |a#6#1#0@@0|)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type |a#6#0#0@@0|)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x9771 (and $x9722 $x5613)))
 (and $x9771 $x117539)))))))) :qid PagedBetreeidfy.69:5!1119))
 ))
 (let (($x117532 (PagedBetree.BetreeNode.BetreeNode_q d@@43)))
 (let ((?x63 (type d@@43)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x117538 (and $x5613 $x117532)))
 (=> $x117538 $x117541)))))) :pattern ( (PagedBetree.BetreeNode.BetreeNode_q d@@43) ) :qid unknown.0:0!1121))
 )
(assert
 (let (($x117452 (forall ((this@@3 T@U) ($ly@@3 T@U) )(! (let (($x117447 (forall ((|k#0@@0| T@U) )(! (let ((?x4832 ($Box |k#0@@0|)))
 (let ((?x117431 (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ?x4832)))
 (let ((?x117432 ($Unbox DatatypeTypeType ?x117431)))
 (let (($x117444 (PagedBetree.BetreeNode.WF $ly@@3 ?x117432)))
 (let (($x117427 (Buffers.__default.AnyKey |k#0@@0|)))
 (let (($x117424 ($Is |k#0@@0| Tclass.KeyType.Key)))
 (let (($x117443 (and $x117424 $x117427)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |k#0@@0|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (=> (and $x7226 $x117443) $x117444))))))))))) :pattern ( (Buffers.__default.AnyKey |k#0@@0|) ) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box |k#0@@0|))) ) :qid PagedBetreeidfy.51:18!1084))
 ))
 (let ((?x117330 (PagedBetree.ChildMap.mapp this@@3)))
 (let ((?x117420 (|IMap#Domain| ?x117330)))
 (let (($x117423 (Buffers.__default.Total ?x117420)))
 (let ((?x5834 ($LS $ly@@3)))
 (let (($x117382 (PagedBetree.ChildMap.WF ?x5834 this@@3)))
 (let (($x117440 (forall ((|k#0| T@U) )(! (let ((?x4832 ($Box |k#0|)))
 (let ((?x117431 (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ?x4832)))
 (let ((?x117432 ($Unbox DatatypeTypeType ?x117431)))
 (let (($x117434 (and (PagedBetree.ChildMap.ChildMap_q this@@3) (|PagedBetree.BetreeNode.WF#canCall| ?x117432))))
 (let (($x117427 (Buffers.__default.AnyKey |k#0|)))
 (let (($x117426 (|Buffers.__default.AnyKey#canCall| |k#0|)))
 (let (($x117424 ($Is |k#0| Tclass.KeyType.Key)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |k#0|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let (($x117425 (and $x7226 $x117424)))
 (=> $x117425 (and $x117426 (=> $x117427 $x117434)))))))))))))) :pattern ( (Buffers.__default.AnyKey |k#0|) ) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box |k#0|))) ) :qid PagedBetreeidfy.51:18))
 ))
 (let (($x117421 (|Buffers.__default.Total#canCall| ?x117420)))
 (let (($x117325 (PagedBetree.ChildMap.ChildMap_q this@@3)))
 (let (($x117416 ($Is this@@3 Tclass.PagedBetree.ChildMap)))
 (let (($x117401 (not (= 9 $FunctionContextHeight))))
 (let (($x117415 (|PagedBetree.ChildMap.WF#canCall| this@@3)))
 (let ((?x176 (type this@@3)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let ((?x63 (type $ly@@3)))
 (let (($x5829 (= ?x63 LayerTypeType)))
 (let (($x117381 (and $x5829 $x9722)))
 (=> (and $x117381 (or $x117415 (and $x117401 $x117416))) (and (and (and $x117325 $x117421) (=> $x117423 $x117440)) (= $x117382 (and $x117423 $x117447))))))))))))))))))))) :pattern ( (PagedBetree.ChildMap.WF ($LS $ly@@3) this@@3) ) :qid PagedBetreeidfy.49:15!1085))
 ))
 (let (($x117398 (<= 9 $FunctionContextHeight)))
 (=> $x117398 $x117452))))
(assert
 (forall ((this T@U) ($ly T@U) )(! (let ((?x5834 ($LS $ly)))
 (let (($x117382 (PagedBetree.ChildMap.WF ?x5834 this)))
 (let (($x117384 (= $x117382 (PagedBetree.ChildMap.WF $ly this))))
 (let ((?x176 (type this)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let ((?x63 (type $ly)))
 (let (($x5829 (= ?x63 LayerTypeType)))
 (let (($x117381 (and $x5829 $x9722)))
 (=> $x117381 $x117384))))))))) :pattern ( (PagedBetree.ChildMap.WF ($LS $ly) this) ) :qid PagedBetreeidfy.49:15))
 )
(assert
 (let (($x9995 (= (type $LZ) LayerTypeType)))
 (let (($x117388 (forall ((arg0@@373 T@U) )(! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ( (AsFuelBottom arg0@@373) ) :qid funType:AsFuelBottom))
 ))
 (and $x117388 $x9995))))
(assert
 (forall ((arg0@@372 T@U) )(! (let ((?x5127 (IMapType BoxType BoxType)))
 (= (type (PagedBetree.ChildMap.mapp arg0@@372)) ?x5127)) :pattern ( (PagedBetree.ChildMap.mapp arg0@@372) ) :qid funType:PagedBetree.ChildMap.mapp))
 )
(check-sat)

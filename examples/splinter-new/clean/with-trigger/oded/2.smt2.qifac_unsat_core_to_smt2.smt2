
(set-option :print-success false)
(set-info :smt-lib-version |2.6|)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; benchmark generated from python API
(set-info :status unknown)
(declare-sort T@T 0)
 (declare-sort T@U 0)
 (declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun $LS (T@U) T@U)
(declare-fun StartFuel_MsgHistoryMod.MsgHistory.LSNSet () T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun TSet (T@U) T@U)
(declare-fun TInt () T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc2OSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2OSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2OSO () T@U)
(declare-fun Tagclass._System.___hFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hFunc1OS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OS () T@U)
(declare-fun Tagclass._System.___hFunc0L () T@U)
(declare-fun Tagclass._System.___hPartialFunc0L () T@U)
(declare-fun Tagclass._System.___hTotalFunc0L () T@U)
(declare-fun Tagclass._System.___hFunc2LOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LOO () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun Tagclass._System.___hFunc1OL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OL () T@U)
(declare-fun Tagclass._System.___hFunc1LO () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LO () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LO () T@U)
(declare-fun |##_System._tuple#2OLL._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2OLL () T@U)
(declare-fun class._System.Tuple2OLL () T@U)
(declare-fun Tagclass._System.___hFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hFunc2SSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2SSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2SSO () T@U)
(declare-fun Tagclass._System.___hFunc2LLO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LLO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LLO () T@U)
(declare-fun Tagclass._System.___hFunc1SS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1SS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1SS () T@U)
(declare-fun Tagclass._System.___hFunc1LL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LL () T@U)
(declare-fun class.PagedBetreeRefinement.__default () T@U)
(declare-fun Tagclass.PagedBetreeRefinement.__default () T@U)
(declare-fun Tagclass.PagedBetree.BetreeNode () T@U)
(declare-fun Tagclass.KeyType.Key () T@U)
(declare-fun Tagclass.PagedBetree.QueryReceipt () T@U)
(declare-fun Tagclass.PagedBetree.ChildMap () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun Tagclass.Buffers.BufferStack () T@U)
(declare-fun Tagclass.PagedBetree.QueryReceiptLine () T@U)
(declare-fun Tagclass.TotalKMMapMod.TotalMap () T@U)
(declare-fun Tagclass.StampedMod.Stamped () T@U)
(declare-fun Tagclass.PagedBetree.TransitionLabel () T@U)
(declare-fun Tagclass.AbstractMap.TransitionLabel () T@U)
(declare-fun Tagclass.MsgHistoryMod.MsgHistory () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun Tagclass.PagedBetree.Variables () T@U)
(declare-fun Tagclass.AbstractMap.Variables () T@U)
(declare-fun Tagclass.MemtableMod.Memtable () T@U)
(declare-fun Tagclass.Buffers.Buffer () T@U)
(declare-fun Tagclass.PagedBetree.Path () T@U)
(declare-fun Tagclass.PagedBetree.Step () T@U)
(declare-fun Tagclass.MsgHistoryMod.KeyedMessage () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.KeyType.__default () T@U)
(declare-fun Tagclass.KeyType.__default () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun class.LinearMaybe.predefined () T@U)
(declare-fun class.LinearMaybe.__default () T@U)
(declare-fun Tagclass.LinearMaybe.__default () T@U)
(declare-fun class.LinearExtern.predefined () T@U)
(declare-fun class.LinearExtern.__default () T@U)
(declare-fun Tagclass.LinearExtern.__default () T@U)
(declare-fun |##ValueMessage.Delta.NoDelta| () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun class.TotalKMMapMod.__default () T@U)
(declare-fun Tagclass.TotalKMMapMod.__default () T@U)
(declare-fun class.LSNMod.__default () T@U)
(declare-fun Tagclass.LSNMod.__default () T@U)
(declare-fun |##StampedMod.Stamped.Stamped| () T@U)
(declare-fun class.StampedMod.Stamped () T@U)
(declare-fun class.StampedMod.__default () T@U)
(declare-fun Tagclass.StampedMod.__default () T@U)
(declare-fun class.SequencesLite.__default () T@U)
(declare-fun Tagclass.SequencesLite.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun class.LinearSequence__i.__default () T@U)
(declare-fun Tagclass.LinearSequence__i.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.MapRemove_s.__default () T@U)
(declare-fun Tagclass.MapRemove_s.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun |##MsgHistoryMod.KeyedMessage.KeyedMessage| () T@U)
(declare-fun class.MsgHistoryMod.KeyedMessage () T@U)
(declare-fun |##MsgHistoryMod.MsgHistory.MsgHistory| () T@U)
(declare-fun class.MsgHistoryMod.MsgHistory () T@U)
(declare-fun class.MsgHistoryMod.__default () T@U)
(declare-fun Tagclass.MsgHistoryMod.__default () T@U)
(declare-fun |##Buffers.Buffer.Buffer| () T@U)
(declare-fun class.Buffers.Buffer () T@U)
(declare-fun |##Buffers.BufferStack.BufferStack| () T@U)
(declare-fun class.Buffers.BufferStack () T@U)
(declare-fun class.Buffers.__default () T@U)
(declare-fun Tagclass.Buffers.__default () T@U)
(declare-fun |##MemtableMod.Memtable.Memtable| () T@U)
(declare-fun class.MemtableMod.Memtable () T@U)
(declare-fun class.MemtableMod.__default () T@U)
(declare-fun Tagclass.MemtableMod.__default () T@U)
(declare-fun |##PagedBetree.TransitionLabel.QueryLabel| () T@U)
(declare-fun |##PagedBetree.TransitionLabel.PutLabel| () T@U)
(declare-fun |##PagedBetree.TransitionLabel.QueryEndLsnLabel| () T@U)
(declare-fun |##PagedBetree.TransitionLabel.FreezeAsLabel| () T@U)
(declare-fun |##PagedBetree.TransitionLabel.InternalLabel| () T@U)
(declare-fun class.PagedBetree.TransitionLabel () T@U)
(declare-fun |##PagedBetree.ChildMap.ChildMap| () T@U)
(declare-fun class.PagedBetree.ChildMap () T@U)
(declare-fun |##PagedBetree.BetreeNode.Nil| () T@U)
(declare-fun |##PagedBetree.BetreeNode.BetreeNode| () T@U)
(declare-fun class.PagedBetree.BetreeNode () T@U)
(declare-fun |##PagedBetree.QueryReceiptLine.QueryReceiptLine| () T@U)
(declare-fun class.PagedBetree.QueryReceiptLine () T@U)
(declare-fun |##PagedBetree.QueryReceipt.QueryReceipt| () T@U)
(declare-fun class.PagedBetree.QueryReceipt () T@U)
(declare-fun |##PagedBetree.Variables.Variables| () T@U)
(declare-fun class.PagedBetree.Variables () T@U)
(declare-fun |##PagedBetree.Path.Path| () T@U)
(declare-fun class.PagedBetree.Path () T@U)
(declare-fun |##PagedBetree.Step.QueryStep| () T@U)
(declare-fun |##PagedBetree.Step.PutStep| () T@U)
(declare-fun |##PagedBetree.Step.QueryEndLsnStep| () T@U)
(declare-fun |##PagedBetree.Step.FreezeAsStep| () T@U)
(declare-fun |##PagedBetree.Step.InternalGrowStep| () T@U)
(declare-fun |##PagedBetree.Step.InternalSplitStep| () T@U)
(declare-fun |##PagedBetree.Step.InternalFlushMemtableStep| () T@U)
(declare-fun |##PagedBetree.Step.InternalFlushStep| () T@U)
(declare-fun |##PagedBetree.Step.InternalCompactStep| () T@U)
(declare-fun |##PagedBetree.Step.InternalNoOpStep| () T@U)
(declare-fun class.PagedBetree.Step () T@U)
(declare-fun class.PagedBetree.__default () T@U)
(declare-fun Tagclass.PagedBetree.__default () T@U)
(declare-fun |##AbstractMap.TransitionLabel.QueryLabel| () T@U)
(declare-fun |##AbstractMap.TransitionLabel.PutLabel| () T@U)
(declare-fun |##AbstractMap.TransitionLabel.QueryEndLsnLabel| () T@U)
(declare-fun |##AbstractMap.TransitionLabel.FreezeAsLabel| () T@U)
(declare-fun |##AbstractMap.TransitionLabel.InternalLabel| () T@U)
(declare-fun class.AbstractMap.TransitionLabel () T@U)
(declare-fun |##AbstractMap.Variables.Variables| () T@U)
(declare-fun class.AbstractMap.Variables () T@U)
(declare-fun class.AbstractMap.__default () T@U)
(declare-fun Tagclass.AbstractMap.__default () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_#Func4| () T@U)
(declare-fun |tytagFamily$_#PartialFunc4| () T@U)
(declare-fun |tytagFamily$_#TotalFunc4| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_#Func2OSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#Func3LLOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#Func1OS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OS| () T@U)
(declare-fun |tytagFamily$_#Func0L| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0L| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0L| () T@U)
(declare-fun |tytagFamily$_#Func2LOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LOO| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun |tytagFamily$_#Func1OL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OL| () T@U)
(declare-fun |tytagFamily$_#Func1LO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LO| () T@U)
(declare-fun |tytagFamily$_tuple#2OLL| () T@U)
(declare-fun |tytagFamily$_#Func3LLOL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#Func2SSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#Func2LLO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LLO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LLO| () T@U)
(declare-fun |tytagFamily$_#Func1SS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1SS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1SS| () T@U)
(declare-fun |tytagFamily$_#Func1LL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LL| () T@U)
(declare-fun tytagFamily$BetreeNode () T@U)
(declare-fun tytagFamily$Key () T@U)
(declare-fun tytagFamily$QueryReceipt () T@U)
(declare-fun tytagFamily$ChildMap () T@U)
(declare-fun tytagFamily$Message () T@U)
(declare-fun tytagFamily$BufferStack () T@U)
(declare-fun tytagFamily$QueryReceiptLine () T@U)
(declare-fun tytagFamily$TotalMap () T@U)
(declare-fun tytagFamily$Stamped () T@U)
(declare-fun tytagFamily$TransitionLabel () T@U)
(declare-fun tytagFamily$MsgHistory () T@U)
(declare-fun tytagFamily$Value () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$Variables () T@U)
(declare-fun tytagFamily$Memtable () T@U)
(declare-fun tytagFamily$Buffer () T@U)
(declare-fun tytagFamily$Path () T@U)
(declare-fun tytagFamily$Step () T@U)
(declare-fun tytagFamily$KeyedMessage () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun tytagFamily$Delta () T@U)
(declare-fun MsgHistoryMod.MsgHistory.DiscardRecent (T@U Int) T@U)
(declare-fun Tclass.MsgHistoryMod.MsgHistory () T@U)
(declare-fun MsgHistoryMod.MsgHistory.WF (T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.CanDiscardTo (T@U Int) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.DiscardRecent#canCall| (T@U Int) Bool)
(declare-fun |puts1#0| () T@U)
(declare-fun |#MsgHistoryMod.MsgHistory.MsgHistory| (T@U Int Int) T@U)
(declare-fun MsgHistoryMod.MsgHistory.seqStart (T@U) Int)
(declare-fun Tclass.MsgHistoryMod.KeyedMessage () T@U)
(declare-fun |lambda#148| (T@U) T@U)
(declare-fun MsgHistoryMod.MsgHistory.msgs (T@U) T@U)
(declare-fun |lambda#211| (T@U Int Int) T@U)
(declare-fun MsgHistoryMod.MsgHistory.MsgHistory_q (T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.Concat (T@U T@U) T@U)
(declare-fun MsgHistoryMod.MsgHistory.seqEnd (T@U) Int)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.CanConcat (T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.Concat#canCall| (T@U T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.CanFollow (T@U Int) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.CanFollow#canCall| (T@U Int) Bool)
(declare-fun MsgHistoryMod.MsgHistory.ApplyToStampedMap (T@U T@U T@U) T@U)
(declare-fun Tclass.StampedMod.Stamped (T@U) T@U)
(declare-fun Tclass.TotalKMMapMod.TotalMap () T@U)
(declare-fun MsgHistoryMod.MsgHistory.Len (T@U) Int)
(declare-fun StampedMod.Stamped.seqEnd (T@U) Int)
(declare-fun |MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| (T@U T@U) Bool)
(declare-fun |#StampedMod.Stamped.Stamped| (T@U Int) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun MsgHistoryMod.KeyedMessage.key (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun StampedMod.Stamped.value (T@U) T@U)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun MsgHistoryMod.KeyedMessage.message (T@U) T@U)
(declare-fun MsgHistoryMod.MsgHistory.IsEmpty (T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun StampedMod.Stamped.Stamped_q (T@U) Bool)
(declare-fun MsgHistoryMod.KeyedMessage.KeyedMessage_q (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.IsEmpty#canCall| (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory#Equal| (T@U T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.LSNSet (T@U T@U) T@U)
(declare-fun |MsgHistoryMod.MsgHistory.Len#canCall| (T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.ContainsExactly (T@U T@U) Bool)
(declare-fun MsgHistoryMod.MsgHistory.Contains (T@U Int) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.Contains#canCall| (T@U Int) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.ContainsExactly#canCall| (T@U T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.LSNSet#canCall| (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.WF#canCall| (T@U) Bool)
(declare-fun |$IsA#MsgHistoryMod.MsgHistory| (T@U) Bool)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun |lambda#147| (T@U T@U T@U) T@U)
(declare-fun |$IsA#StampedMod.Stamped| (T@U) Bool)
(declare-fun |StampedMod.Stamped#Equal| (T@U T@U) Bool)
(declare-fun |lambda#101| (T@U) T@U)
(declare-fun TotalKMMapMod.__default.TerminalValue (T@U) Bool)
(declare-fun TotalKMMapMod.__default.DefaultV () T@U)
(declare-fun |puts2#0| () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapInvert () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapInvert () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet () T@U)
(declare-fun StartFuel_PagedBetree.Path.ReplacedChildren () T@U)
(declare-fun StartFuelAssert_PagedBetree.Path.ReplacedChildren () T@U)
(declare-fun StartFuelAssert_PagedBetreeRefinement._default.INode () T@U)
(declare-fun StartFuel_PagedBetreeRefinement._default.MapApply () T@U)
(declare-fun StartFuelAssert_PagedBetreeRefinement._default.MapApply () T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun |lambda#81| (T@U T@U T@U Bool) T@U)
(declare-fun $Heap@@50 () T@U)
(declare-fun null () T@U)
(declare-fun MapType1Type () T@T)
(declare-fun |stampedMap#0@@3| () T@U)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_PagedBetreeRefinement._default.INode () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| (T@U Int) Bool)
(declare-fun |##lsn#0@0| () Int)
(assert
 (= (Ctor intType) 0))
(assert
 (= (Ctor realType) 1))
(assert
 (= (Ctor boolType) 2))
(assert
 (= (Ctor rmodeType) 3))
(assert
 (= (Ctor stringType) 4))
(assert
 (= (Ctor regexType) 5))
(assert
 (forall ((arg0 Int) )(! (= (U_2_int (int_2_U arg0)) arg0) :pattern ( (int_2_U arg0) ) :qid typeInv:U_2_int))
 )
(assert
 (forall ((x T@U) )(! (let (($x67 (= (int_2_U (U_2_int x)) x)))
 (let ((?x63 (type x)))
 (let (($x64 (= ?x63 intType)))
 (let (($x176833 (not $x64)))
 (or $x176833 $x67))))) :pattern ( (U_2_int x) ) :qid cast:U_2_int))
 )
(assert
 (forall ((arg0@@0 Int) )(! (= (type (int_2_U arg0@@0)) intType) :pattern ( (int_2_U arg0@@0) ) :qid funType:int_2_U))
 )
(assert
 (forall ((arg0@@1 Real) )(! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :pattern ( (real_2_U arg0@@1) ) :qid typeInv:U_2_real))
 )
(assert
 (forall ((x@@0 T@U) )(! (let (($x85 (= (real_2_U (U_2_real x@@0)) x@@0)))
 (or (not (= (type x@@0) realType)) $x85)) :pattern ( (U_2_real x@@0) ) :qid cast:U_2_real))
 )
(assert
 (forall ((arg0@@2 Real) )(! (= (type (real_2_U arg0@@2)) realType) :pattern ( (real_2_U arg0@@2) ) :qid funType:real_2_U))
 )
(assert
 (forall ((arg0@@3 Bool) )(! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :pattern ( (bool_2_U arg0@@3) ) :qid typeInv:U_2_bool))
 )
(assert
 (forall ((x@@1 T@U) )(! (let (($x104 (= (bool_2_U (U_2_bool x@@1)) x@@1)))
 (or (not (= (type x@@1) boolType)) $x104)) :pattern ( (U_2_bool x@@1) ) :qid cast:U_2_bool))
 )
(assert
 (forall ((arg0@@4 Bool) )(! (= (type (bool_2_U arg0@@4)) boolType) :pattern ( (bool_2_U arg0@@4) ) :qid funType:bool_2_U))
 )
(assert
 (forall ((arg0@@5 RoundingMode) )(! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :pattern ( (rmode_2_U arg0@@5) ) :qid typeInv:U_2_rmode))
 )
(assert
 (forall ((x@@2 T@U) )(! (let (($x123 (= (rmode_2_U (U_2_rmode x@@2)) x@@2)))
 (or (not (= (type x@@2) rmodeType)) $x123)) :pattern ( (U_2_rmode x@@2) ) :qid cast:U_2_rmode))
 )
(assert
 (forall ((arg0@@6 RoundingMode) )(! (= (type (rmode_2_U arg0@@6)) rmodeType) :pattern ( (rmode_2_U arg0@@6) ) :qid funType:rmode_2_U))
 )
(assert
 (forall ((arg0@@7 String) )(! (let ((?x133 (string_2_U arg0@@7)))
 (let ((?x134 (U_2_string ?x133)))
 (= ?x134 arg0@@7))) :pattern ( (string_2_U arg0@@7) ) :qid typeInv:U_2_string))
 )
(assert
 (forall ((x@@3 T@U) )(! (let (($x142 (= (string_2_U (U_2_string x@@3)) x@@3)))
 (or (not (= (type x@@3) stringType)) $x142)) :pattern ( (U_2_string x@@3) ) :qid cast:U_2_string))
 )
(assert
 (forall ((arg0@@8 String) )(! (= (type (string_2_U arg0@@8)) stringType) :pattern ( (string_2_U arg0@@8) ) :qid funType:string_2_U))
 )
(assert
 (forall ((arg0@@9 (RegEx String)) )(! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :pattern ( (regex_2_U arg0@@9) ) :qid typeInv:U_2_regex))
 )
(assert
 (forall ((x@@4 T@U) )(! (let (($x161 (= (regex_2_U (U_2_regex x@@4)) x@@4)))
 (or (not (= (type x@@4) regexType)) $x161)) :pattern ( (U_2_regex x@@4) ) :qid cast:U_2_regex))
 )
(assert
 (forall ((arg0@@10 (RegEx String)) )(! (= (type (regex_2_U arg0@@10)) regexType) :pattern ( (regex_2_U arg0@@10) ) :qid funType:regex_2_U))
 )
(assert
 (forall ((bx@@26 T@U) )(! (let (($x4931 (= ($Box ($Unbox intType bx@@26)) bx@@26)))
 (let (($x7915 (and $x4931 ($Is ($Unbox intType bx@@26) Tclass._System.nat))))
 (let (($x7912 ($IsBox bx@@26 Tclass._System.nat)))
 (let ((?x63 (type bx@@26)))
 (let (($x4926 (= ?x63 BoxType)))
 (let (($x7913 (and $x4926 $x7912)))
 (or (not $x7913) $x7915))))))) :pattern ( ($IsBox bx@@26 Tclass._System.nat) ) :qid unknown.0:0!1766))
 )
(assert
 (forall ((|x#0| T@U) )(! (let ((?x65 (U_2_int |x#0|)))
 (let (($x7920 (INTERNAL_le_boogie 0 ?x65)))
 (let (($x7919 ($Is |x#0| Tclass._System.nat)))
 (let (($x7921 (= $x7919 $x7920)))
 (let ((?x63 (type |x#0|)))
 (let (($x64 (= ?x63 intType)))
 (let (($x176833 (not $x64)))
 (or $x176833 $x7921)))))))) :pattern ( ($Is |x#0| Tclass._System.nat) ) :qid unknown.0:0!1770))
 )
(assert
 (forall ((x@@43 Int) (y@@13 Int) )(! (let ((?x7815 (INTERNAL_sub_boogie x@@43 y@@13)))
 (= ?x7815 (+ x@@43 (* (- 1) y@@13)))) :pattern ( (INTERNAL_sub_boogie x@@43 y@@13) ) :qid DafnyPreludebpl.1414:30))
 )
(assert
 (forall ((x@@42 Int) (y@@12 Int) )(! (let ((?x5759 (+ x@@42 y@@12)))
 (let ((?x198284 (INTERNAL_add_boogie x@@42 y@@12)))
 (= ?x198284 ?x5759))) :pattern ( (INTERNAL_add_boogie x@@42 y@@12) ) :qid DafnyPreludebpl.1413:30))
 )
(assert
 (forall ((x@@47 Int) (y@@17 Int) )(! (not (= (<= y@@17 x@@47) (INTERNAL_lt_boogie x@@47 y@@17))) :pattern ( (INTERNAL_lt_boogie x@@47 y@@17) ) :qid DafnyPreludebpl.1418:51))
 )
(assert
 (forall ((y@@18 Int) (x@@48 Int) )(! (let (($x197646 (<= x@@48 y@@18)))
 (let (($x3866 (INTERNAL_le_boogie x@@48 y@@18)))
 (= $x3866 $x197646))) :pattern ( (INTERNAL_le_boogie x@@48 y@@18) ) :qid DafnyPreludebpl.1419:51))
 )
(assert
 (forall ((m@@27 T@U) (m' T@U) )(! (let (($x176919 (forall ((u@@13 T@U) )(! (let ((?x7387 (|Map#Elements| m')))
 (let ((?x7526 (MapType0Select ?x7387 u@@13)))
 (let ((?x5398 (|Map#Elements| m@@27)))
 (let ((?x5399 (MapType0Select ?x5398 u@@13)))
 (let (($x7564 (= ?x5399 ?x7526)))
 (let ((?x5394 (|Map#Domain| m@@27)))
 (let ((?x5395 (MapType0Select ?x5394 u@@13)))
 (let (($x5396 (U_2_bool ?x5395)))
 (let ((?x63 (type u@@13)))
 (let (($x7359 (= ?x63 (MapTypeInv0 (type m@@27)))))
 (let (($x7563 (and $x7359 $x5396)))
 (or (not $x7563) $x7564)))))))))))) :qid DafnyPreludebpl.1273:35))
 ))
 (let (($x176927 (forall ((u@@12 T@U) )(! (let ((?x7308 (|Map#Domain| m')))
 (let ((?x7309 (MapType0Select ?x7308 u@@12)))
 (let (($x7310 (U_2_bool ?x7309)))
 (let ((?x5394 (|Map#Domain| m@@27)))
 (let ((?x5395 (MapType0Select ?x5394 u@@12)))
 (let (($x5396 (U_2_bool ?x5395)))
 (let (($x7560 (= $x5396 $x7310)))
 (or (not (= (type u@@12) (MapTypeInv0 (type m@@27)))) $x7560)))))))) :qid DafnyPreludebpl.1272:35))
 ))
 (let (($x7559 (|Map#Equal| m@@27 m')))
 (let ((?x176 (type m@@27)))
 (let ((?x7316 (MapTypeInv1 ?x176)))
 (let ((?x7306 (MapTypeInv0 ?x176)))
 (let ((?x7498 (MapType ?x7306 ?x7316)))
 (let ((?x63 (type m')))
 (let (($x7503 (= ?x63 ?x7498)))
 (let (($x7502 (= ?x176 ?x7498)))
 (let (($x7504 (and $x7502 $x7503)))
 (or (not $x7504) (= $x7559 (and $x176927 $x176919)))))))))))))) :pattern ( (|Map#Equal| m@@27 m') ) :qid DafnyPreludebpl.1270:21))
 )
(assert
 (forall ((m@@28 T@U) (|m'@@0| T@U) )(! (let (($x5003 (= m@@28 |m'@@0|)))
 (let (($x7559 (|Map#Equal| m@@28 |m'@@0|)))
 (let ((?x176 (type m@@28)))
 (let ((?x7316 (MapTypeInv1 ?x176)))
 (let ((?x7306 (MapTypeInv0 ?x176)))
 (let ((?x7498 (MapType ?x7306 ?x7316)))
 (let ((?x63 (type |m'@@0|)))
 (let (($x7503 (= ?x63 ?x7498)))
 (let (($x7502 (= ?x176 ?x7498)))
 (or (not (and $x7502 $x7503 $x7559)) $x5003)))))))))) :pattern ( (|Map#Equal| m@@28 |m'@@0|) ) :qid DafnyPreludebpl.1275:21))
 )
(assert
 (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) )(! (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType (MapType0TypeInv0 (type arg0@@105)) (MapType0TypeInv1 (type arg1@@45)))) :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4) ) :qid funType:Map#Glue))
 )
(assert
 (forall ((b@@52 T@U) (t@@27 T@U) (a@@73 T@U) )(! (let ((?x217943 (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))))
 (let (($x198104 (= ?x217943 a@@73)))
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x176 (type t@@27)))
 (let (($x177567 (= ?x176 ?x7901)))
 (let ((?x174 (type b@@52)))
 (let ((?x4995 (MapType0TypeInv1 ?x174)))
 (let ((?x63 (type a@@73)))
 (let ((?x6021 (MapType0TypeInv0 ?x63)))
 (let (($x112331 (= ?x174 (MapType0Type ?x6021 ?x4995))))
 (let ((?x6022 (MapType0Type ?x6021 boolType)))
 (let (($x6023 (= ?x63 ?x6022)))
 (or (not (and $x6023 $x112331 $x177567)) $x198104))))))))))))) :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) ) :qid DafnyPreludebpl.1217:21))
 )
(assert
 (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) )(! (let ((?x7403 (|Map#Glue| a@@74 b@@53 t@@28)))
 (let ((?x198102 (|Map#Elements| ?x7403)))
 (let (($x198330 (= ?x198102 b@@53)))
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x63 (type t@@28)))
 (let (($x177339 (= ?x63 ?x7901)))
 (let ((?x176 (type b@@53)))
 (let ((?x4983 (MapType0TypeInv1 ?x176)))
 (let ((?x174 (type a@@74)))
 (let ((?x6242 (MapType0TypeInv0 ?x174)))
 (let (($x7412 (= ?x176 (MapType0Type ?x6242 ?x4983))))
 (let (($x7410 (= ?x174 (MapType0Type ?x6242 boolType))))
 (or (not (and $x7410 $x7412 $x177339)) $x198330))))))))))))) :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) ) :qid DafnyPreludebpl.1220:21))
 )
(assert
 (forall ((b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) (a@@75 T@U) )(! (let ((?x5096 (TMap t0@@14 t1@@5)))
 (let ((?x198114 (|Map#Glue| a@@75 b@@54 ?x5096)))
 (let (($x198112 ($Is ?x198114 ?x5096)))
 (let (($x176963 (forall ((bx@@24 T@U) )(! (let (($x8435 ($IsBox bx@@24 t0@@14)))
 (let (($x198122 (and $x8435 ($IsBox (MapType0Select b@@54 bx@@24) t1@@5))))
 (let ((?x4981 (MapType0Select a@@75 bx@@24)))
 (let (($x5319 (U_2_bool ?x4981)))
 (let ((?x63 (type bx@@24)))
 (let (($x4926 (= ?x63 BoxType)))
 (let (($x5320 (and $x4926 $x5319)))
 (or (not $x5320) $x198122)))))))) :qid DafnyPreludebpl.1226:11))
 ))
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x176 (type t1@@5)))
 (let (($x177567 (= ?x176 ?x7901)))
 (let ((?x174 (type t0@@14)))
 (let (($x177605 (= ?x174 ?x7901)))
 (let ((?x7426 (MapType0Type BoxType BoxType)))
 (let ((?x5410 (type b@@54)))
 (let (($x135152 (= ?x5410 ?x7426)))
 (let ((?x5021 (MapType0Type BoxType boolType)))
 (let ((?x63 (type a@@75)))
 (let (($x5314 (= ?x63 ?x5021)))
 (or (not (and $x5314 $x135152 $x177605 $x177567 $x176963)) $x198112)))))))))))))))) :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) ) :qid DafnyPreludebpl.1223:15))
 )
(assert
 (forall ((u@@6 T@U) (V@@13 T@T) )(! (let ((?x112319 (MapType0Select (|Map#Domain| (|Map#Empty| (type u@@6) V@@13)) u@@6)))
 (not (U_2_bool ?x112319))) :pattern ( (MapType0Select (|Map#Domain| (|Map#Empty| (type u@@6) V@@13)) u@@6) ) :qid DafnyPreludebpl.1212:21))
 )
(assert
 (forall ((m@@12 T@U) )(! (let (($x198028 (exists ((k@@4 T@U) )(! (let ((?x7308 (|Map#Domain| m@@12)))
 (let ((?x7309 (MapType0Select ?x7308 k@@4)))
 (let (($x7310 (U_2_bool ?x7309)))
 (let ((?x176 (type m@@12)))
 (let ((?x7306 (MapTypeInv0 ?x176)))
 (let ((?x63 (type k@@4)))
 (let (($x7307 (= ?x63 ?x7306)))
 (and $x7307 $x7310)))))))) :qid DafnyPreludebpl.1158:31))
 ))
 (let ((?x63 (type m@@12)))
 (let (($x7288 (= ?x63 (MapType (MapTypeInv0 ?x63) (MapTypeInv1 ?x63)))))
 (let (($x7302 (= m@@12 (|Map#Empty| (MapTypeInv0 ?x63) (MapTypeInv1 ?x63)))))
 (or $x7302 (not $x7288) $x198028))))) :pattern ( (|Map#Domain| m@@12) ) :qid DafnyPreludebpl.1156:21))
 )
(assert
 (forall ((arg0@@77 T@U) (arg1@@25 T@U) )(! (let ((?x176 (type arg0@@77)))
 (let ((?x6046 (MapType0TypeInv0 ?x176)))
 (let ((?x6123 (MapType0Type ?x6046 boolType)))
 (= (type (|Set#Union| arg0@@77 arg1@@25)) ?x6123)))) :pattern ( (|Set#Union| arg0@@77 arg1@@25) ) :qid funType:Set#Union))
 )
(assert
 (forall ((a@@23 T@U) (b@@18 T@U) )(! (let (($x5003 (= a@@23 b@@18)))
 (let (($x6251 (|Set#Equal| a@@23 b@@18)))
 (let ((?x176 (type a@@23)))
 (let ((?x6046 (MapType0TypeInv0 ?x176)))
 (let ((?x6123 (MapType0Type ?x6046 boolType)))
 (let ((?x63 (type b@@18)))
 (let (($x6156 (= ?x63 ?x6123)))
 (let (($x6155 (= ?x176 ?x6123)))
 (or (not (and $x6155 $x6156 $x6251)) $x5003))))))))) :pattern ( (|Set#Equal| a@@23 b@@18) ) :qid DafnyPreludebpl.706:17))
 )
(assert
 (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) )(! (let ((?x5006 (MapType0Select a@@9 y@@2)))
 (let (($x5255 (U_2_bool ?x5006)))
 (let ((?x63 (type y@@2)))
 (let ((?x6056 (MapType0Type ?x63 boolType)))
 (let ((?x176 (type b@@4)))
 (let (($x6090 (= ?x176 ?x6056)))
 (let ((?x174 (type a@@9)))
 (let (($x6127 (= ?x174 ?x6056)))
 (let ((?x6129 (|Set#Union| a@@9 b@@4)))
 (let ((?x6130 (MapType0Select ?x6129 y@@2)))
 (let (($x6131 (U_2_bool ?x6130)))
 (or $x6131 (not (and $x6127 $x6090 $x5255)))))))))))))) :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2) ) :qid DafnyPreludebpl.655:18))
 )
(assert
 (forall ((arg0@@68 T@U) )(! (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x5834 ($LS arg0@@68)))
 (let ((?x5835 (type ?x5834)))
 (= ?x5835 ?x132767)))) :pattern ( ($LS arg0@@68) ) :qid funType:$LS))
 )
(assert
 (forall ((arg0@@29 T@U) )(! (let ((?x63 (type arg0@@29)))
 (= (type (Lit arg0@@29)) ?x63)) :pattern ( (Lit arg0@@29) ) :qid funType:Lit))
 )
(assert
 (forall ((x@@8 T@U) )(! (let ((?x4821 (Lit x@@8)))
 (= ?x4821 x@@8)) :pattern ( (Lit x@@8) ) :qid DafnyPreludebpl.89:29))
 )
(assert
 (= (Ctor BoxType) 13))
(assert
 (forall ((arg0@@30 T@U) )(! (= (type ($Box arg0@@30)) BoxType) :pattern ( ($Box arg0@@30) ) :qid funType:$Box))
 )
(assert
 (forall ((x@@10 Int) )(! (let ((?x4843 (LitInt x@@10)))
 (= ?x4843 x@@10)) :pattern ( (LitInt x@@10) ) :qid DafnyPreludebpl.95:29))
 )
(assert
 (forall ((arg0@@51 T@U) )(! (= (type (|Map#Elements| arg0@@51)) (MapType0Type (MapTypeInv0 (type arg0@@51)) (MapTypeInv1 (type arg0@@51)))) :pattern ( (|Map#Elements| arg0@@51) ) :qid funType:Map#Elements))
 )
(assert
 (forall ((arg0@@52 T@U) )(! (= (type (|Map#Domain| arg0@@52)) (MapType0Type (MapTypeInv0 (type arg0@@52)) boolType)) :pattern ( (|Map#Domain| arg0@@52) ) :qid funType:Map#Domain))
 )
(assert
 (forall ((arg0@@22 T@U) (arg1 T@U) )(! (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x4727 (TMap arg0@@22 arg1)))
 (let ((?x4728 (type ?x4727)))
 (= ?x4728 ?x7901)))) :pattern ( (TMap arg0@@22 arg1) ) :qid funType:TMap))
 )
(assert
 (forall ((arg0@@23 T@U) )(! (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x4732 (Inv0_TMap arg0@@23)))
 (let ((?x4733 (type ?x4732)))
 (= ?x4733 ?x7901)))) :pattern ( (Inv0_TMap arg0@@23) ) :qid funType:Inv0_TMap))
 )
(assert
 (forall ((v T@U) (t@@19 T@U) )(! (let ((?x5136 ($Box v)))
 (let (($x231079 ($IsBox ?x5136 t@@19)))
 (let (($x197268 (= $x231079 ($Is v t@@19))))
 (or (not (= (type t@@19) (type Tclass._System.nat))) $x197268)))) :pattern ( ($IsBox ($Box v) t@@19) ) :qid DafnyPreludebpl.181:18))
 )
(assert
 (forall ((v@@13 T@U) (t0 T@U) )(! (let (($x177001 (forall ((bx@@10 T@U) )(! (let (($x5257 ($IsBox bx@@10 t0)))
 (let ((?x5006 (MapType0Select v@@13 bx@@10)))
 (let (($x5255 (U_2_bool ?x5006)))
 (let ((?x63 (type bx@@10)))
 (let (($x4926 (= ?x63 BoxType)))
 (let (($x5256 (and $x4926 $x5255)))
 (or (not $x5256) $x5257))))))) :pattern ( (MapType0Select v@@13 bx@@10) ) :qid DafnyPreludebpl.221:11))
 ))
 (let ((?x4666 (TSet t0)))
 (let (($x5254 ($Is v@@13 ?x4666)))
 (let (($x176999 (= $x5254 $x177001)))
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x63 (type t0)))
 (let (($x177339 (= ?x63 ?x7901)))
 (let ((?x5021 (MapType0Type BoxType boolType)))
 (let ((?x176 (type v@@13)))
 (let (($x5252 (= ?x176 ?x5021)))
 (or (not (and $x5252 $x177339)) $x176999))))))))))) :pattern ( ($Is v@@13 (TSet t0)) ) :qid DafnyPreludebpl.219:15))
 )
(assert
 (forall ((T@@0 T@T) (arg0@@34 T@U) )(! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :pattern ( ($Unbox T@@0 arg0@@34) ) :qid funType:$Unbox))
 )
(assert
 (forall ((bx T@U) )(! (let (($x4931 (= ($Box ($Unbox intType bx)) bx)))
 (let (($x4933 (and $x4931 ($Is ($Unbox intType bx) TInt))))
 (or (not (and (= (type bx) BoxType) ($IsBox bx TInt))) $x4933))) :pattern ( ($IsBox bx TInt) ) :qid DafnyPreludebpl.143:15))
 )
(assert
 (forall ((arg1@@3 T@T) (arg0@@35 T@T) )(! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid ctor:MapType0Type))
 )
(assert
 (forall ((arg0@@36 T@T) (arg1@@4 T@T) )(! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :pattern ( (MapType0Type arg0@@36 arg1@@4) ) :qid typeInv:MapType0TypeInv0))
 )
(assert
 (forall ((arg0@@37 T@T) (arg1@@5 T@T) )(! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :pattern ( (MapType0Type arg0@@37 arg1@@5) ) :qid typeInv:MapType0TypeInv1))
 )
(assert
 (forall ((arg0@@38 T@U) (arg1@@6 T@U) )(! (let ((?x176 (type arg0@@38)))
 (let ((?x4983 (MapType0TypeInv1 ?x176)))
 (= (type (MapType0Select arg0@@38 arg1@@6)) ?x4983))) :pattern ( (MapType0Select arg0@@38 arg1@@6) ) :qid funType:MapType0Select))
 )
(assert
 (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) )(! (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type (type arg1@@7) (type arg2))) :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2) ) :qid funType:MapType0Store))
 )
(assert
 (forall ((m T@U) (x0 T@U) (val T@U) )(! (let (($x4998 (= (MapType0Select (MapType0Store m x0 val) x0) val)))
 (or (not (= (type val) (MapType0TypeInv1 (type m)))) $x4998)) :qid mapAx0:MapType0Select))
 )
(assert
 (forall ((y0 T@U) (val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) )(! (let ((?x5012 (MapType0Select m@@0 y0)))
 (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) ?x5012))) :qid mapAx1:MapType0Select:0))
 )
(assert
 (forall ((arg0@@42 T@T) (arg1@@8 T@T) )(! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid ctor:MapType))
 )
(assert
 (forall ((arg0@@43 T@T) (arg1@@9 T@T) )(! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :pattern ( (MapType arg0@@43 arg1@@9) ) :qid typeInv:MapTypeInv0))
 )
(assert
 (forall ((arg0@@44 T@T) (arg1@@10 T@T) )(! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :pattern ( (MapType arg0@@44 arg1@@10) ) :qid typeInv:MapTypeInv1))
 )
(assert
 (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) )(! (let (($x177023 (forall ((bx@@16 T@U) )(! (let (($x5278 ($IsBox bx@@16 t0@@8)))
 (let (($x111791 (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) $x5278)))
 (let ((?x7464 (|Map#Domain| v@@22)))
 (let ((?x111786 (MapType0Select ?x7464 bx@@16)))
 (let (($x111787 (U_2_bool ?x111786)))
 (let ((?x63 (type bx@@16)))
 (let (($x4926 (= ?x63 BoxType)))
 (let (($x111788 (and $x4926 $x111787)))
 (or (not $x111788) $x111791))))))))) :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16) ) :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16) ) :qid DafnyPreludebpl.259:19))
 ))
 (let ((?x4727 (TMap t0@@8 t1)))
 (let (($x5455 ($Is v@@22 ?x4727)))
 (let (($x177021 (= $x5455 $x177023)))
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x63 (type t1)))
 (let (($x177339 (= ?x63 ?x7901)))
 (let ((?x176 (type t0@@8)))
 (let (($x177567 (= ?x176 ?x7901)))
 (let ((?x5099 (MapType BoxType BoxType)))
 (let ((?x174 (type v@@22)))
 (let (($x5452 (= ?x174 ?x5099)))
 (or (not (and $x5452 $x177567 $x177339)) $x177021))))))))))))) :pattern ( ($Is v@@22 (TMap t0@@8 t1)) ) :qid DafnyPreludebpl.256:15))
 )
(assert
 (forall ((t1@@1 T@U) (v@@24 T@U) (t0@@10 T@U) )(! (let ((?x197350 (|Map#Items| v@@24)))
 (let (($x197346 ($Is ?x197350 (TSet (Tclass._System.Tuple2 t0@@10 t1@@1)))))
 (let ((?x7318 (|Map#Values| v@@24)))
 (let (($x197354 ($Is ?x7318 (TSet t1@@1))))
 (let ((?x4666 (TSet t0@@10)))
 (let ((?x7308 (|Map#Domain| v@@24)))
 (let (($x206465 ($Is ?x7308 ?x4666)))
 (let (($x177029 (and $x206465 $x197354 $x197346)))
 (let (($x5393 ($Is v@@24 (TMap t0@@10 t1@@1))))
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x174 (type t1@@1)))
 (let (($x177605 (= ?x174 ?x7901)))
 (let ((?x63 (type t0@@10)))
 (let (($x177339 (= ?x63 ?x7901)))
 (let ((?x5099 (MapType BoxType BoxType)))
 (let ((?x176 (type v@@24)))
 (let (($x5389 (= ?x176 ?x5099)))
 (or (not (and $x5389 $x177339 $x177605 $x5393)) $x177029)))))))))))))))))) :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1)) ) :qid DafnyPreludebpl.272:15))
 )
(assert
 (= (Ctor (type Tclass._System.nat)) 6))
(assert
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x199 (type TBool)))
 (= ?x199 ?x7901))))
(assert
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x203 (type TChar)))
 (= ?x203 ?x7901))))
(assert
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x207 (type TInt)))
 (= ?x207 ?x7901))))
(assert
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x211 (type TReal)))
 (= ?x211 ?x7901))))
(assert
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x215 (type TORDINAL)))
 (= ?x215 ?x7901))))
(assert
 (= (Ctor (type TagBool)) 7))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x228 (type TagChar)))
 (= ?x228 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x232 (type TagInt)))
 (= ?x232 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x236 (type TagReal)))
 (= ?x236 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x240 (type TagORDINAL)))
 (= ?x240 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x244 (type TagSet)))
 (= ?x244 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x248 (type TagISet)))
 (= ?x248 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x252 (type TagMultiSet)))
 (= ?x252 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x256 (type TagSeq)))
 (= ?x256 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x260 (type TagMap)))
 (= ?x260 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x264 (type TagIMap)))
 (= ?x264 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x268 (type TagClass)))
 (= ?x268 ?x224))))
(assert
 (= (Ctor (type class._System.int)) 8))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x281 (type class._System.bool)))
 (= ?x281 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x285 (type class._System.set)))
 (= ?x285 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x289 (type class._System.seq)))
 (= ?x289 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x293 (type class._System.multiset)))
 (= ?x293 ?x277))))
(assert
 (forall ((arg0@@11 T@T) )(! (= (Ctor (FieldType arg0@@11)) 9) :qid ctor:FieldType))
 )
(assert
 (forall ((arg0@@12 T@T) )(! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :pattern ( (FieldType arg0@@12) ) :qid typeInv:FieldTypeInv0))
 )
(assert
 (let ((?x310 (FieldType boolType)))
 (= (type alloc) ?x310)))
(assert
 (= (Ctor (type allocName)) 10))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x323 (type Tagclass._System.nat)))
 (= ?x323 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x327 (type class._System.object?)))
 (= ?x327 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x331 (type Tagclass._System.object?)))
 (= ?x331 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x335 (type Tagclass._System.object)))
 (= ?x335 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x339 (type class._System.array?)))
 (= ?x339 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x343 (type Tagclass._System.array?)))
 (= ?x343 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x347 (type Tagclass._System.array)))
 (= ?x347 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x351 (type Tagclass._System.___hFunc1)))
 (= ?x351 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x355 (type Tagclass._System.___hPartialFunc1)))
 (= ?x355 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x359 (type Tagclass._System.___hTotalFunc1)))
 (= ?x359 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x363 (type Tagclass._System.___hFunc0)))
 (= ?x363 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x367 (type Tagclass._System.___hPartialFunc0)))
 (= ?x367 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x371 (type Tagclass._System.___hTotalFunc0)))
 (= ?x371 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x375 (type class._System.__default)))
 (= ?x375 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x379 (type Tagclass._System.__default)))
 (= ?x379 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x383 (type Tagclass._System.___hFunc2)))
 (= ?x383 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x387 (type Tagclass._System.___hPartialFunc2)))
 (= ?x387 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x391 (type Tagclass._System.___hTotalFunc2)))
 (= ?x391 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11349 (type Tagclass._System.___hFunc4)))
 (= ?x11349 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11457 (type Tagclass._System.___hPartialFunc4)))
 (= ?x11457 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11285 (type Tagclass._System.___hTotalFunc4)))
 (= ?x11285 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11480 (type Tagclass._System.___hFunc3)))
 (= ?x11480 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11350 (type Tagclass._System.___hPartialFunc3)))
 (= ?x11350 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11515 (type Tagclass._System.___hTotalFunc3)))
 (= ?x11515 ?x224))))
(assert
 (= (Ctor (type |##_System._tuple#2._#Make2|)) 11))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x404 (type Tagclass._System.Tuple2)))
 (= ?x404 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x408 (type class._System.Tuple2)))
 (= ?x408 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11523 (type Tagclass._System.___hFunc2OSO)))
 (= ?x11523 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11524 (type Tagclass._System.___hPartialFunc2OSO)))
 (= ?x11524 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11521 (type Tagclass._System.___hTotalFunc2OSO)))
 (= ?x11521 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11496 (type Tagclass._System.___hFunc3LLOO)))
 (= ?x11496 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11473 (type Tagclass._System.___hPartialFunc3LLOO)))
 (= ?x11473 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11491 (type Tagclass._System.___hTotalFunc3LLOO)))
 (= ?x11491 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11448 (type Tagclass._System.___hFunc1OS)))
 (= ?x11448 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11672 (type Tagclass._System.___hPartialFunc1OS)))
 (= ?x11672 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11673 (type Tagclass._System.___hTotalFunc1OS)))
 (= ?x11673 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11650 (type Tagclass._System.___hFunc0L)))
 (= ?x11650 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11661 (type Tagclass._System.___hPartialFunc0L)))
 (= ?x11661 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11660 (type Tagclass._System.___hTotalFunc0L)))
 (= ?x11660 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11656 (type Tagclass._System.___hFunc2LOO)))
 (= ?x11656 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11631 (type Tagclass._System.___hPartialFunc2LOO)))
 (= ?x11631 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11648 (type Tagclass._System.___hTotalFunc2LOO)))
 (= ?x11648 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x412 (type |##_System._tuple#0._#Make0|)))
 (= ?x412 ?x400))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x416 (type Tagclass._System.Tuple0)))
 (= ?x416 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x420 (type class._System.Tuple0)))
 (= ?x420 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11643 (type Tagclass._System.___hFunc1OL)))
 (= ?x11643 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11633 (type Tagclass._System.___hPartialFunc1OL)))
 (= ?x11633 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11637 (type Tagclass._System.___hTotalFunc1OL)))
 (= ?x11637 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11623 (type Tagclass._System.___hFunc1LO)))
 (= ?x11623 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11640 (type Tagclass._System.___hPartialFunc1LO)))
 (= ?x11640 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11617 (type Tagclass._System.___hTotalFunc1LO)))
 (= ?x11617 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11625 (type |##_System._tuple#2OLL._#Make2|)))
 (= ?x11625 ?x400))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11608 (type Tagclass._System.Tuple2OLL)))
 (= ?x11608 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11606 (type class._System.Tuple2OLL)))
 (= ?x11606 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11600 (type Tagclass._System.___hFunc3LLOL)))
 (= ?x11600 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11603 (type Tagclass._System.___hPartialFunc3LLOL)))
 (= ?x11603 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11598 (type Tagclass._System.___hTotalFunc3LLOL)))
 (= ?x11598 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11589 (type Tagclass._System.___hFunc2SSO)))
 (= ?x11589 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11579 (type Tagclass._System.___hPartialFunc2SSO)))
 (= ?x11579 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11580 (type Tagclass._System.___hTotalFunc2SSO)))
 (= ?x11580 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11582 (type Tagclass._System.___hFunc2LLO)))
 (= ?x11582 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11574 (type Tagclass._System.___hPartialFunc2LLO)))
 (= ?x11574 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11569 (type Tagclass._System.___hTotalFunc2LLO)))
 (= ?x11569 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11553 (type Tagclass._System.___hFunc1SS)))
 (= ?x11553 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11561 (type Tagclass._System.___hPartialFunc1SS)))
 (= ?x11561 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11560 (type Tagclass._System.___hTotalFunc1SS)))
 (= ?x11560 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11557 (type Tagclass._System.___hFunc1LL)))
 (= ?x11557 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x10687 (type Tagclass._System.___hPartialFunc1LL)))
 (= ?x10687 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x10859 (type Tagclass._System.___hTotalFunc1LL)))
 (= ?x10859 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x141773 (type class.PagedBetreeRefinement.__default)))
 (= ?x141773 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x141747 (type Tagclass.PagedBetreeRefinement.__default)))
 (= ?x141747 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11534 (type Tagclass.PagedBetree.BetreeNode)))
 (= ?x11534 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11543 (type Tagclass.KeyType.Key)))
 (= ?x11543 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11722 (type Tagclass.PagedBetree.QueryReceipt)))
 (= ?x11722 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11416 (type Tagclass.PagedBetree.ChildMap)))
 (= ?x11416 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11977 (type Tagclass.ValueMessage.Message)))
 (= ?x11977 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11419 (type Tagclass.Buffers.BufferStack)))
 (= ?x11419 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11949 (type Tagclass.PagedBetree.QueryReceiptLine)))
 (= ?x11949 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11889 (type Tagclass.TotalKMMapMod.TotalMap)))
 (= ?x11889 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11450 (type Tagclass.StampedMod.Stamped)))
 (= ?x11450 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11493 (type Tagclass.PagedBetree.TransitionLabel)))
 (= ?x11493 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x141858 (type Tagclass.AbstractMap.TransitionLabel)))
 (= ?x141858 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11449 (type Tagclass.MsgHistoryMod.MsgHistory)))
 (= ?x11449 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11542 (type Tagclass.ValueType.Value)))
 (= ?x11542 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x26180 (type Tagclass.NativeTypes.byte)))
 (= ?x26180 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x24124 (type Tagclass.PagedBetree.Variables)))
 (= ?x24124 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x141846 (type Tagclass.AbstractMap.Variables)))
 (= ?x141846 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11967 (type Tagclass.MemtableMod.Memtable)))
 (= ?x11967 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11754 (type Tagclass.Buffers.Buffer)))
 (= ?x11754 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x27330 (type Tagclass.PagedBetree.Path)))
 (= ?x27330 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x26199 (type Tagclass.PagedBetree.Step)))
 (= ?x26199 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x18128 (type Tagclass.MsgHistoryMod.KeyedMessage)))
 (= ?x18128 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x31936 (type |##Options.Option.None|)))
 (= ?x31936 ?x400))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x31984 (type Tagclass.Options.Option)))
 (= ?x31984 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x33738 (type |##Options.Option.Some|)))
 (= ?x33738 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11923 (type class.Options.Option)))
 (= ?x11923 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11929 (type class.Options.__default)))
 (= ?x11929 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11925 (type Tagclass.Options.__default)))
 (= ?x11925 ?x224))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11934 (type Tagclass.NativeTypes.sbyte)))
 (= ?x11934 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x13757 (type class.NativeTypes.sbyte)))
 (= ?x13757 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x32893 (type class.NativeTypes.byte)))
 (= ?x32893 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x17556 (type Tagclass.NativeTypes.int16)))
 (= ?x17556 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x17576 (type class.NativeTypes.int16)))
 (= ?x17576 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x32668 (type Tagclass.NativeTypes.uint16)))
 (= ?x32668 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11099 (type class.NativeTypes.uint16)))
 (= ?x11099 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x33606 (type Tagclass.NativeTypes.int32)))
 (= ?x33606 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11863 (type class.NativeTypes.int32)))
 (= ?x11863 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11852 (type Tagclass.NativeTypes.uint32)))
 (= ?x11852 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11728 (type class.NativeTypes.uint32)))
 (= ?x11728 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11858 (type Tagclass.NativeTypes.int64)))
 (= ?x11858 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x19277 (type class.NativeTypes.int64)))
 (= ?x19277 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x21900 (type Tagclass.NativeTypes.uint64)))
 (= ?x21900 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x30117 (type class.NativeTypes.uint64)))
 (= ?x30117 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x19519 (type Tagclass.NativeTypes.nat8)))
 (= ?x19519 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11803 (type class.NativeTypes.nat8)))
 (= ?x11803 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11812 (type Tagclass.NativeTypes.nat16)))
 (= ?x11812 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x13761 (type class.NativeTypes.nat16)))
 (= ?x13761 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x19527 (type Tagclass.NativeTypes.nat32)))
 (= ?x19527 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x22404 (type class.NativeTypes.nat32)))
 (= ?x22404 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11876 (type Tagclass.NativeTypes.nat64)))
 (= ?x11876 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11697 (type class.NativeTypes.nat64)))
 (= ?x11697 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x22288 (type Tagclass.NativeTypes.uint128)))
 (= ?x22288 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x32834 (type class.NativeTypes.uint128)))
 (= ?x32834 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11751 (type class.NativeTypes.__default)))
 (= ?x11751 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11895 (type Tagclass.NativeTypes.__default)))
 (= ?x11895 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11893 (type class.KeyType.__default)))
 (= ?x11893 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11883 (type Tagclass.KeyType.__default)))
 (= ?x11883 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11871 (type class.ValueType.__default)))
 (= ?x11871 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11873 (type Tagclass.ValueType.__default)))
 (= ?x11873 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11981 (type class.LinearMaybe.predefined)))
 (= ?x11981 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11762 (type class.LinearMaybe.__default)))
 (= ?x11762 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11998 (type Tagclass.LinearMaybe.__default)))
 (= ?x11998 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11760 (type class.LinearExtern.predefined)))
 (= ?x11760 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11765 (type class.LinearExtern.__default)))
 (= ?x11765 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x12002 (type Tagclass.LinearExtern.__default)))
 (= ?x12002 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x12009 (type |##ValueMessage.Delta.NoDelta|)))
 (= ?x12009 ?x400))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x12016 (type Tagclass.ValueMessage.Delta)))
 (= ?x12016 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x12005 (type class.ValueMessage.Delta)))
 (= ?x12005 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11779 (type class.ValueMessage.__default)))
 (= ?x11779 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11785 (type Tagclass.ValueMessage.__default)))
 (= ?x11785 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11794 (type |##ValueMessage.Message.Define|)))
 (= ?x11794 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x12011 (type |##ValueMessage.Message.Update|)))
 (= ?x12011 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x12015 (type class.ValueMessage.Message)))
 (= ?x12015 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x29003 (type class.TotalKMMapMod.__default)))
 (= ?x29003 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x28013 (type Tagclass.TotalKMMapMod.__default)))
 (= ?x28013 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x19356 (type class.LSNMod.__default)))
 (= ?x19356 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x19360 (type Tagclass.LSNMod.__default)))
 (= ?x19360 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x19348 (type |##StampedMod.Stamped.Stamped|)))
 (= ?x19348 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11986 (type class.StampedMod.Stamped)))
 (= ?x11986 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11970 (type class.StampedMod.__default)))
 (= ?x11970 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x19354 (type Tagclass.StampedMod.__default)))
 (= ?x19354 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11735 (type class.SequencesLite.__default)))
 (= ?x11735 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x11984 (type Tagclass.SequencesLite.__default)))
 (= ?x11984 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x14229 (type class.Mathematics.__default)))
 (= ?x14229 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x13419 (type Tagclass.Mathematics.__default)))
 (= ?x13419 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x31582 (type class.LinearSequence__i.__default)))
 (= ?x31582 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x13882 (type Tagclass.LinearSequence__i.__default)))
 (= ?x13882 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x14336 (type class.Sequences.__default)))
 (= ?x14336 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x25501 (type Tagclass.Sequences.__default)))
 (= ?x25501 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x14187 (type class.MapRemove_s.__default)))
 (= ?x14187 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x20163 (type Tagclass.MapRemove_s.__default)))
 (= ?x20163 ?x224))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x13209 (type class.Maps.__default)))
 (= ?x13209 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x25740 (type Tagclass.Maps.__default)))
 (= ?x25740 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x30315 (type |##MsgHistoryMod.KeyedMessage.KeyedMessage|)))
 (= ?x30315 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11352 (type class.MsgHistoryMod.KeyedMessage)))
 (= ?x11352 ?x277))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x29432 (type |##MsgHistoryMod.MsgHistory.MsgHistory|)))
 (= ?x29432 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x14395 (type class.MsgHistoryMod.MsgHistory)))
 (= ?x14395 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x12865 (type class.MsgHistoryMod.__default)))
 (= ?x12865 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x21917 (type Tagclass.MsgHistoryMod.__default)))
 (= ?x21917 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x31545 (type |##Buffers.Buffer.Buffer|)))
 (= ?x31545 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x30678 (type class.Buffers.Buffer)))
 (= ?x30678 ?x277))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x17464 (type |##Buffers.BufferStack.BufferStack|)))
 (= ?x17464 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x14639 (type class.Buffers.BufferStack)))
 (= ?x14639 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x25857 (type class.Buffers.__default)))
 (= ?x25857 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x18523 (type Tagclass.Buffers.__default)))
 (= ?x18523 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x15401 (type |##MemtableMod.Memtable.Memtable|)))
 (= ?x15401 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x18874 (type class.MemtableMod.Memtable)))
 (= ?x18874 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11095 (type class.MemtableMod.__default)))
 (= ?x11095 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x35914 (type Tagclass.MemtableMod.__default)))
 (= ?x35914 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11527 (type |##PagedBetree.TransitionLabel.QueryLabel|)))
 (= ?x11527 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11293 (type |##PagedBetree.TransitionLabel.PutLabel|)))
 (= ?x11293 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11292 (type |##PagedBetree.TransitionLabel.QueryEndLsnLabel|)))
 (= ?x11292 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11533 (type |##PagedBetree.TransitionLabel.FreezeAsLabel|)))
 (= ?x11533 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11440 (type |##PagedBetree.TransitionLabel.InternalLabel|)))
 (= ?x11440 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11439 (type class.PagedBetree.TransitionLabel)))
 (= ?x11439 ?x277))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11435 (type |##PagedBetree.ChildMap.ChildMap|)))
 (= ?x11435 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11432 (type class.PagedBetree.ChildMap)))
 (= ?x11432 ?x277))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x10685 (type |##PagedBetree.BetreeNode.Nil|)))
 (= ?x10685 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11423 (type |##PagedBetree.BetreeNode.BetreeNode|)))
 (= ?x11423 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11937 (type class.PagedBetree.BetreeNode)))
 (= ?x11937 ?x277))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x18187 (type |##PagedBetree.QueryReceiptLine.QueryReceiptLine|)))
 (= ?x18187 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x29730 (type class.PagedBetree.QueryReceiptLine)))
 (= ?x29730 ?x277))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11874 (type |##PagedBetree.QueryReceipt.QueryReceipt|)))
 (= ?x11874 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11962 (type class.PagedBetree.QueryReceipt)))
 (= ?x11962 ?x277))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11963 (type |##PagedBetree.Variables.Variables|)))
 (= ?x11963 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x25696 (type class.PagedBetree.Variables)))
 (= ?x25696 ?x277))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x33811 (type |##PagedBetree.Path.Path|)))
 (= ?x33811 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x11924 (type class.PagedBetree.Path)))
 (= ?x11924 ?x277))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x32607 (type |##PagedBetree.Step.QueryStep|)))
 (= ?x32607 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x26198 (type |##PagedBetree.Step.PutStep|)))
 (= ?x26198 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x17045 (type |##PagedBetree.Step.QueryEndLsnStep|)))
 (= ?x17045 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x30565 (type |##PagedBetree.Step.FreezeAsStep|)))
 (= ?x30565 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11960 (type |##PagedBetree.Step.InternalGrowStep|)))
 (= ?x11960 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11956 (type |##PagedBetree.Step.InternalSplitStep|)))
 (= ?x11956 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11972 (type |##PagedBetree.Step.InternalFlushMemtableStep|)))
 (= ?x11972 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x17692 (type |##PagedBetree.Step.InternalFlushStep|)))
 (= ?x17692 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x28906 (type |##PagedBetree.Step.InternalCompactStep|)))
 (= ?x28906 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x11917 (type |##PagedBetree.Step.InternalNoOpStep|)))
 (= ?x11917 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x32414 (type class.PagedBetree.Step)))
 (= ?x32414 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x17044 (type class.PagedBetree.__default)))
 (= ?x17044 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x25957 (type Tagclass.PagedBetree.__default)))
 (= ?x25957 ?x224))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x142279 (type |##AbstractMap.TransitionLabel.QueryLabel|)))
 (= ?x142279 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x142288 (type |##AbstractMap.TransitionLabel.PutLabel|)))
 (= ?x142288 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x142050 (type |##AbstractMap.TransitionLabel.QueryEndLsnLabel|)))
 (= ?x142050 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x142271 (type |##AbstractMap.TransitionLabel.FreezeAsLabel|)))
 (= ?x142271 ?x400))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x142244 (type |##AbstractMap.TransitionLabel.InternalLabel|)))
 (= ?x142244 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x142033 (type class.AbstractMap.TransitionLabel)))
 (= ?x142033 ?x277))))
(assert
 (let ((?x400 (type |##_System._tuple#2._#Make2|)))
 (let ((?x142240 (type |##AbstractMap.Variables.Variables|)))
 (= ?x142240 ?x400))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x142258 (type class.AbstractMap.Variables)))
 (= ?x142258 ?x277))))
(assert
 (let ((?x277 (type class._System.int)))
 (let ((?x142252 (type class.AbstractMap.__default)))
 (= ?x142252 ?x277))))
(assert
 (let ((?x224 (type TagBool)))
 (let ((?x142162 (type Tagclass.AbstractMap.__default)))
 (= ?x142162 ?x224))))
(assert
 (= (Ctor (type tytagFamily$nat)) 12))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x441 (type tytagFamily$object)))
 (= ?x441 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x445 (type tytagFamily$array)))
 (= ?x445 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x449 (type |tytagFamily$_#Func1|)))
 (= ?x449 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x453 (type |tytagFamily$_#PartialFunc1|)))
 (= ?x453 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x457 (type |tytagFamily$_#TotalFunc1|)))
 (= ?x457 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x461 (type |tytagFamily$_#Func0|)))
 (= ?x461 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x465 (type |tytagFamily$_#PartialFunc0|)))
 (= ?x465 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x469 (type |tytagFamily$_#TotalFunc0|)))
 (= ?x469 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x473 (type tytagFamily$_default)))
 (= ?x473 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x477 (type |tytagFamily$_#Func2|)))
 (= ?x477 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x481 (type |tytagFamily$_#PartialFunc2|)))
 (= ?x481 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x485 (type |tytagFamily$_#TotalFunc2|)))
 (= ?x485 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x15482 (type |tytagFamily$_#Func4|)))
 (= ?x15482 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x29773 (type |tytagFamily$_#PartialFunc4|)))
 (= ?x29773 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x13975 (type |tytagFamily$_#TotalFunc4|)))
 (= ?x13975 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x28394 (type |tytagFamily$_#Func3|)))
 (= ?x28394 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x24551 (type |tytagFamily$_#PartialFunc3|)))
 (= ?x24551 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x30987 (type |tytagFamily$_#TotalFunc3|)))
 (= ?x30987 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x489 (type |tytagFamily$_tuple#2|)))
 (= ?x489 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x33774 (type |tytagFamily$_#Func2OSO|)))
 (= ?x33774 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x28164 (type |tytagFamily$_#PartialFunc2OSO|)))
 (= ?x28164 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x11211 (type |tytagFamily$_#TotalFunc2OSO|)))
 (= ?x11211 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x25516 (type |tytagFamily$_#Func3LLOO|)))
 (= ?x25516 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x31139 (type |tytagFamily$_#PartialFunc3LLOO|)))
 (= ?x31139 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x29043 (type |tytagFamily$_#TotalFunc3LLOO|)))
 (= ?x29043 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x23881 (type |tytagFamily$_#Func1OS|)))
 (= ?x23881 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x20674 (type |tytagFamily$_#PartialFunc1OS|)))
 (= ?x20674 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x20438 (type |tytagFamily$_#TotalFunc1OS|)))
 (= ?x20438 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x20573 (type |tytagFamily$_#Func0L|)))
 (= ?x20573 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x20056 (type |tytagFamily$_#PartialFunc0L|)))
 (= ?x20056 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x25824 (type |tytagFamily$_#TotalFunc0L|)))
 (= ?x25824 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x27039 (type |tytagFamily$_#Func2LOO|)))
 (= ?x27039 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x19584 (type |tytagFamily$_#PartialFunc2LOO|)))
 (= ?x19584 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x20111 (type |tytagFamily$_#TotalFunc2LOO|)))
 (= ?x20111 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x493 (type |tytagFamily$_tuple#0|)))
 (= ?x493 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x20520 (type |tytagFamily$_#Func1OL|)))
 (= ?x20520 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x16801 (type |tytagFamily$_#PartialFunc1OL|)))
 (= ?x16801 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x28105 (type |tytagFamily$_#TotalFunc1OL|)))
 (= ?x28105 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x17296 (type |tytagFamily$_#Func1LO|)))
 (= ?x17296 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x29876 (type |tytagFamily$_#PartialFunc1LO|)))
 (= ?x29876 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x35802 (type |tytagFamily$_#TotalFunc1LO|)))
 (= ?x35802 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x31511 (type |tytagFamily$_tuple#2OLL|)))
 (= ?x31511 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x12800 (type |tytagFamily$_#Func3LLOL|)))
 (= ?x12800 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x36996 (type |tytagFamily$_#PartialFunc3LLOL|)))
 (= ?x36996 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x10567 (type |tytagFamily$_#TotalFunc3LLOL|)))
 (= ?x10567 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x23140 (type |tytagFamily$_#Func2SSO|)))
 (= ?x23140 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x20145 (type |tytagFamily$_#PartialFunc2SSO|)))
 (= ?x20145 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x24326 (type |tytagFamily$_#TotalFunc2SSO|)))
 (= ?x24326 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x17811 (type |tytagFamily$_#Func2LLO|)))
 (= ?x17811 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x17211 (type |tytagFamily$_#PartialFunc2LLO|)))
 (= ?x17211 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x33410 (type |tytagFamily$_#TotalFunc2LLO|)))
 (= ?x33410 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x13647 (type |tytagFamily$_#Func1SS|)))
 (= ?x13647 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x20124 (type |tytagFamily$_#PartialFunc1SS|)))
 (= ?x20124 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x19121 (type |tytagFamily$_#TotalFunc1SS|)))
 (= ?x19121 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x31897 (type |tytagFamily$_#Func1LL|)))
 (= ?x31897 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x20492 (type |tytagFamily$_#PartialFunc1LL|)))
 (= ?x20492 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x36900 (type |tytagFamily$_#TotalFunc1LL|)))
 (= ?x36900 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x18669 (type tytagFamily$BetreeNode)))
 (= ?x18669 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x35103 (type tytagFamily$Key)))
 (= ?x35103 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x33948 (type tytagFamily$QueryReceipt)))
 (= ?x33948 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x22206 (type tytagFamily$ChildMap)))
 (= ?x22206 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x14113 (type tytagFamily$Message)))
 (= ?x14113 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x17751 (type tytagFamily$BufferStack)))
 (= ?x17751 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x10936 (type tytagFamily$QueryReceiptLine)))
 (= ?x10936 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x13923 (type tytagFamily$TotalMap)))
 (= ?x13923 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x14305 (type tytagFamily$Stamped)))
 (= ?x14305 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x22910 (type tytagFamily$TransitionLabel)))
 (= ?x22910 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x14913 (type tytagFamily$MsgHistory)))
 (= ?x14913 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x11152 (type tytagFamily$Value)))
 (= ?x11152 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x17245 (type tytagFamily$byte)))
 (= ?x17245 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x30761 (type tytagFamily$Variables)))
 (= ?x30761 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x19966 (type tytagFamily$Memtable)))
 (= ?x19966 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x8 (type tytagFamily$Buffer)))
 (= ?x8 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x21695 (type tytagFamily$Path)))
 (= ?x21695 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x13244 (type tytagFamily$Step)))
 (= ?x13244 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x34200 (type tytagFamily$KeyedMessage)))
 (= ?x34200 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x21051 (type tytagFamily$Option)))
 (= ?x21051 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x30368 (type tytagFamily$sbyte)))
 (= ?x30368 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x18953 (type tytagFamily$int16)))
 (= ?x18953 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x16517 (type tytagFamily$uint16)))
 (= ?x16517 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x24422 (type tytagFamily$int32)))
 (= ?x24422 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x36043 (type tytagFamily$uint32)))
 (= ?x36043 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x13981 (type tytagFamily$int64)))
 (= ?x13981 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x13977 (type tytagFamily$uint64)))
 (= ?x13977 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x20453 (type tytagFamily$nat8)))
 (= ?x20453 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x18799 (type tytagFamily$nat16)))
 (= ?x18799 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x18800 (type tytagFamily$nat32)))
 (= ?x18800 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x16255 (type tytagFamily$nat64)))
 (= ?x16255 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x15079 (type tytagFamily$uint128)))
 (= ?x15079 ?x437))))
(assert
 (let ((?x437 (type tytagFamily$nat)))
 (let ((?x16984 (type tytagFamily$Delta)))
 (= ?x16984 ?x437))))
(assert
 (forall ((this@@56 T@U) (|lsn#0@@22| Int) )(! (let ((?x132906 (MsgHistoryMod.MsgHistory.DiscardRecent this@@56 |lsn#0@@22|)))
 (let (($x133273 (and (MsgHistoryMod.MsgHistory.WF ?x132906) ($Is ?x132906 Tclass.MsgHistoryMod.MsgHistory))))
 (let (($x132714 (MsgHistoryMod.MsgHistory.WF this@@56)))
 (let (($x133109 (MsgHistoryMod.MsgHistory.CanDiscardTo this@@56 |lsn#0@@22|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |lsn#0@@22|)))
 (let (($x132483 ($Is this@@56 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x133266 (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| this@@56 |lsn#0@@22|)))
 (let (($x177047 (or $x133266 (and $x132483 $x9901 $x133109 $x132714))))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x176 (type this@@56)))
 (let (($x178327 (= ?x176 ?x161909)))
 (let (($x178347 (not (and $x178327 $x177047))))
 (or $x178347 $x133273))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.DiscardRecent this@@56 |lsn#0@@22|) ) :qid MsgHistoryidfy.140:14))
 )
(assert
 (forall ((this@@58 T@U) (|lsn#0@@24| Int) )(! (let ((?x132346 (MsgHistoryMod.MsgHistory.seqStart this@@58)))
 (let ((?x133180 (TMap TInt Tclass.MsgHistoryMod.KeyedMessage)))
 (let ((?x132341 (MsgHistoryMod.MsgHistory.msgs this@@58)))
 (let ((?x132927 (|Map#Elements| ?x132341)))
 (let ((?x219961 (|lambda#148| ?x132927)))
 (let ((?x219475 (|#MsgHistoryMod.MsgHistory.MsgHistory| (|Map#Glue| (|lambda#211| TInt ?x132346 |lsn#0@@24|) ?x219961 ?x133180) ?x132346 |lsn#0@@24|)))
 (let ((?x132906 (MsgHistoryMod.MsgHistory.DiscardRecent this@@58 |lsn#0@@24|)))
 (let (($x217201 (= ?x132906 ?x219475)))
 (let (($x132337 (MsgHistoryMod.MsgHistory.MsgHistory_q this@@58)))
 (let (($x178337 (forall ((|k#0@@70| T@U) )(! (let ((?x65 (U_2_int |k#0@@70|)))
 (let (($x133285 (INTERNAL_lt_boogie ?x65 |lsn#0@@24|)))
 (let (($x133286 (and (INTERNAL_le_boogie (MsgHistoryMod.MsgHistory.seqStart this@@58) ?x65) $x133285)))
 (let (($x133163 (MsgHistoryMod.MsgHistory.MsgHistory_q this@@58)))
 (let ((?x63 (type |k#0@@70|)))
 (let (($x64 (= ?x63 intType)))
 (let (($x176833 (not $x64)))
 (or $x176833 (and $x133163 (or $x133163 (not $x133286))))))))))) :pattern ( ($Unbox (type |puts1#0|) (MapType0Select (|Map#Elements| (MsgHistoryMod.MsgHistory.msgs this@@58)) ($Box |k#0@@70|))) ) :qid MsgHistoryidfy.145:26))
 ))
 (let (($x132714 (MsgHistoryMod.MsgHistory.WF this@@58)))
 (let (($x133109 (MsgHistoryMod.MsgHistory.CanDiscardTo this@@58 |lsn#0@@24|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |lsn#0@@24|)))
 (let (($x132483 ($Is this@@58 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x133266 (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| this@@58 |lsn#0@@24|)))
 (let (($x177047 (or $x133266 (and $x132483 $x9901 $x133109 $x132714))))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x176 (type this@@58)))
 (let (($x178327 (= ?x176 ?x161909)))
 (let (($x178347 (not (and $x178327 $x177047))))
 (or $x178347 (and $x178337 $x132337 $x217201)))))))))))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.DiscardRecent this@@58 |lsn#0@@24|) ) :qid MsgHistoryidfy.140:14!1360))
 )
(assert
 (forall ((this@@31 T@U) (|other#0@@9| T@U) )(! (let ((?x132356 (MsgHistoryMod.MsgHistory.seqEnd |other#0@@9|)))
 (let ((?x132346 (MsgHistoryMod.MsgHistory.seqStart this@@31)))
 (let ((?x132332 (MsgHistoryMod.MsgHistory.msgs |other#0@@9|)))
 (let ((?x132341 (MsgHistoryMod.MsgHistory.msgs this@@31)))
 (let ((?x132800 (Maps.__default.MapDisjointUnion Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage StartFuel_Maps._default.MapDisjointUnion ?x132341 ?x132332)))
 (let ((?x132761 (MsgHistoryMod.MsgHistory.Concat this@@31 |other#0@@9|)))
 (let (($x132802 (= ?x132761 (|#MsgHistoryMod.MsgHistory.MsgHistory| ?x132800 ?x132346 ?x132356))))
 (let (($x132796 (|Maps.__default.MapDisjointUnion#canCall| Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage ?x132341 ?x132332)))
 (let (($x132298 (MsgHistoryMod.MsgHistory.MsgHistory_q |other#0@@9|)))
 (let (($x132337 (MsgHistoryMod.MsgHistory.MsgHistory_q this@@31)))
 (let (($x177055 (and $x132337 $x132298 $x132796 $x132802)))
 (let (($x132720 (MsgHistoryMod.MsgHistory.CanConcat this@@31 |other#0@@9|)))
 (let (($x132434 (MsgHistoryMod.MsgHistory.WF |other#0@@9|)))
 (let (($x132714 (MsgHistoryMod.MsgHistory.WF this@@31)))
 (let (($x116989 ($Is |other#0@@9| Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132483 ($Is this@@31 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132770 (|MsgHistoryMod.MsgHistory.Concat#canCall| this@@31 |other#0@@9|)))
 (let (($x177071 (or $x132770 (and $x132483 $x116989 $x132714 $x132434 $x132720))))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type |other#0@@9|)))
 (let (($x178371 (= ?x63 ?x161909)))
 (let ((?x176 (type this@@31)))
 (let (($x178327 (= ?x176 ?x161909)))
 (let (($x178365 (not (and $x178327 $x178371 $x177071))))
 (or $x178365 $x177055))))))))))))))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.Concat this@@31 |other#0@@9|) ) :qid MsgHistoryidfy.77:14!1149))
 )
(assert
 (forall ((this@@35 T@U) (|lsn#0@@8| Int) )(! (let (($x132838 (MsgHistoryMod.MsgHistory.CanFollow this@@35 |lsn#0@@8|)))
 (let (($x132337 (MsgHistoryMod.MsgHistory.MsgHistory_q this@@35)))
 (let (($x132850 (and $x132337 (= $x132838 (= (MsgHistoryMod.MsgHistory.seqStart this@@35) |lsn#0@@8|)))))
 (let (($x9901 (INTERNAL_le_boogie 0 |lsn#0@@8|)))
 (let (($x132483 ($Is this@@35 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132536 (and $x132483 $x9901)))
 (let (($x132835 (or (|MsgHistoryMod.MsgHistory.CanFollow#canCall| this@@35 |lsn#0@@8|) $x132536)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x176 (type this@@35)))
 (let (($x178327 (= ?x176 ?x161909)))
 (or (not (and $x178327 $x132835)) $x132850))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.CanFollow this@@35 |lsn#0@@8|) ) :qid MsgHistoryidfy.89:15!1178))
 )
(assert
 (forall ((arg2@@157 T@U) (arg0@@533 T@U) (arg1@@266 T@U) )(! (let ((?x161909 (type |puts1#0|)))
 (let ((?x132866 (MsgHistoryMod.MsgHistory.ApplyToStampedMap arg0@@533 arg1@@266 arg2@@157)))
 (let ((?x132867 (type ?x132866)))
 (= ?x132867 ?x161909)))) :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap arg0@@533 arg1@@266 arg2@@157) ) :qid funType:MsgHistoryMod.MsgHistory.ApplyToStampedMap))
 )
(assert
 (forall (($ly@@310 T@U) (this@@37 T@U) (|orig#0| T@U) )(! (let ((?x10093 ($LS $ly@@310)))
 (let ((?x132871 (MsgHistoryMod.MsgHistory.ApplyToStampedMap ?x10093 this@@37 |orig#0|)))
 (let (($x132873 (= ?x132871 (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@310 this@@37 |orig#0|))))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type |orig#0|)))
 (let (($x178371 (= ?x63 ?x161909)))
 (let ((?x176 (type this@@37)))
 (let (($x178327 (= ?x176 ?x161909)))
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x174 (type $ly@@310)))
 (let (($x178367 (= ?x174 ?x132767)))
 (or (not (and $x178367 $x178327 $x178371)) $x132873)))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@310) this@@37 |orig#0|) ) :qid MsgHistoryidfy.94:14))
 )
(assert
 (forall ((|orig#0@@1| T@U) ($ly@@312 T@U) (this@@39 T@U) )(! (let ((?x125505 (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)))
 (let ((?x132866 (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@312 this@@39 |orig#0@@1|)))
 (let ((?x132683 (MsgHistoryMod.MsgHistory.Len this@@39)))
 (let ((?x132886 (StampedMod.Stamped.seqEnd |orig#0@@1|)))
 (let (($x132896 (and (= (StampedMod.Stamped.seqEnd ?x132866) (INTERNAL_add_boogie ?x132886 ?x132683)) ($Is ?x132866 ?x125505))))
 (let (($x132887 (MsgHistoryMod.MsgHistory.CanFollow this@@39 ?x132886)))
 (let (($x132434 (MsgHistoryMod.MsgHistory.WF this@@39)))
 (let (($x132884 ($Is |orig#0@@1| ?x125505)))
 (let (($x116989 ($Is this@@39 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132883 (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| this@@39 |orig#0@@1|)))
 (let (($x177083 (or $x132883 (and $x116989 $x132884 $x132434 $x132887))))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type this@@39)))
 (let (($x178371 (= ?x63 ?x161909)))
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x176 (type $ly@@312)))
 (let (($x178389 (= ?x176 ?x132767)))
 (or (not (and $x178389 $x178371 (= (type |orig#0@@1|) ?x161909) $x177083)) $x132896)))))))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@312 this@@39 |orig#0@@1|) ) :qid MsgHistoryidfy.94:14!1198))
 )
(assert
 (forall ((arg0@@534 T@U) (arg1@@267 Int) )(! (let ((?x161909 (type |puts1#0|)))
 (let ((?x132906 (MsgHistoryMod.MsgHistory.DiscardRecent arg0@@534 arg1@@267)))
 (let ((?x132907 (type ?x132906)))
 (= ?x132907 ?x161909)))) :pattern ( (MsgHistoryMod.MsgHistory.DiscardRecent arg0@@534 arg1@@267) ) :qid funType:MsgHistoryMod.MsgHistory.DiscardRecent))
 )
(assert
 (forall (($ly@@314 T@U) (this@@41 T@U) (|orig#0@@3| T@U) )(! (let ((?x132418 (MsgHistoryMod.MsgHistory.seqEnd this@@41)))
 (let ((?x132922 (INTERNAL_sub_boogie ?x132418 1)))
 (let ((?x132924 (MsgHistoryMod.MsgHistory.DiscardRecent this@@41 ?x132922)))
 (let ((?x132934 (MsgHistoryMod.MsgHistory.ApplyToStampedMap $ly@@314 ?x132924 |orig#0@@3|)))
 (let ((?x132959 (INTERNAL_add_boogie (StampedMod.Stamped.seqEnd ?x132934) 1)))
 (let ((?x132341 (MsgHistoryMod.MsgHistory.msgs this@@41)))
 (let ((?x132927 (|Map#Elements| ?x132341)))
 (let ((?x132930 (MapType0Select ?x132927 ($Box (int_2_U ?x132922)))))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x178405 ($Unbox ?x161909 ?x132930)))
 (let ((?x178397 ($Box (MsgHistoryMod.KeyedMessage.key ?x178405))))
 (let ((?x5127 (IMapType BoxType BoxType)))
 (let ((?x132938 ($Unbox ?x5127 (StampedMod.Stamped.value ?x132934))))
 (let ((?x132939 (|IMap#Elements| ?x132938)))
 (let ((?x178417 ($Unbox ?x161909 (MapType0Select ?x132939 ?x178397))))
 (let ((?x178401 (MsgHistoryMod.KeyedMessage.message ?x178405)))
 (let ((?x178429 ($Box (|IMap#Build| ?x132938 ?x178397 ($Box (ValueMessage.__default.Merge ?x178401 ?x178417))))))
 (let (($x132920 (MsgHistoryMod.MsgHistory.IsEmpty this@@41)))
 (let ((?x10093 ($LS $ly@@314)))
 (let ((?x132871 (MsgHistoryMod.MsgHistory.ApplyToStampedMap ?x10093 this@@41 |orig#0@@3|)))
 (let (($x132935 (StampedMod.Stamped.Stamped_q ?x132934)))
 (let (($x132925 (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| ?x132924 |orig#0@@3|)))
 (let (($x132923 (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| this@@41 ?x132922)))
 (let (($x132337 (MsgHistoryMod.MsgHistory.MsgHistory_q this@@41)))
 (let (($x178425 (and $x132337 $x132923 $x132925 (MsgHistoryMod.KeyedMessage.KeyedMessage_q ?x178405) $x132935 (|ValueMessage.__default.Merge#canCall| ?x178401 ?x178417))))
 (let (($x132919 (|MsgHistoryMod.MsgHistory.IsEmpty#canCall| this@@41)))
 (let (($x178409 (and $x132919 (or $x132920 $x178425) (= ?x132871 (ite $x132920 |orig#0@@3| (|#StampedMod.Stamped.Stamped| ?x178429 ?x132959))))))
 (let ((?x122510 (StampedMod.Stamped.seqEnd |orig#0@@3|)))
 (let (($x132914 (MsgHistoryMod.MsgHistory.CanFollow this@@41 ?x122510)))
 (let (($x132714 (MsgHistoryMod.MsgHistory.WF this@@41)))
 (let ((?x125505 (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)))
 (let (($x132912 ($Is |orig#0@@3| ?x125505)))
 (let (($x132483 ($Is this@@41 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132911 (|MsgHistoryMod.MsgHistory.ApplyToStampedMap#canCall| this@@41 |orig#0@@3|)))
 (let (($x177111 (or $x132911 (and $x132483 $x132912 $x132714 $x132914))))
 (let ((?x63 (type |orig#0@@3|)))
 (let (($x178371 (= ?x63 ?x161909)))
 (let ((?x176 (type this@@41)))
 (let (($x178327 (= ?x176 ?x161909)))
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x174 (type $ly@@314)))
 (let (($x178367 (= ?x174 ?x132767)))
 (or (not (and $x178367 $x178327 $x178371 $x177111)) $x178409))))))))))))))))))))))))))))))))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.ApplyToStampedMap ($LS $ly@@314) this@@41 |orig#0@@3|) ) :qid MsgHistoryidfy.94:14!1219))
 )
(assert
 (forall ((arg0@@532 T@U) (arg1@@265 T@U) )(! (let ((?x161909 (type |puts1#0|)))
 (let ((?x132761 (MsgHistoryMod.MsgHistory.Concat arg0@@532 arg1@@265)))
 (let ((?x132762 (type ?x132761)))
 (= ?x132762 ?x161909)))) :pattern ( (MsgHistoryMod.MsgHistory.Concat arg0@@532 arg1@@265) ) :qid funType:MsgHistoryMod.MsgHistory.Concat))
 )
(assert
 (forall ((this@@29 T@U) (|other#0@@7| T@U) )(! (let ((?x132761 (MsgHistoryMod.MsgHistory.Concat this@@29 |other#0@@7|)))
 (let (($x132785 ($Is ?x132761 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132782 (|MsgHistoryMod.MsgHistory#Equal| ?x132761 this@@29)))
 (let (($x132648 (MsgHistoryMod.MsgHistory.IsEmpty |other#0@@7|)))
 (let (($x139787 (not $x132648)))
 (let ((?x132778 (MsgHistoryMod.MsgHistory.LSNSet StartFuel_MsgHistoryMod.MsgHistory.LSNSet |other#0@@7|)))
 (let ((?x132777 (MsgHistoryMod.MsgHistory.LSNSet StartFuel_MsgHistoryMod.MsgHistory.LSNSet this@@29)))
 (let ((?x132776 (MsgHistoryMod.MsgHistory.LSNSet StartFuel_MsgHistoryMod.MsgHistory.LSNSet ?x132761)))
 (let (($x132780 (|Set#Equal| ?x132776 (|Set#Union| ?x132777 ?x132778))))
 (let (($x132775 (MsgHistoryMod.MsgHistory.WF ?x132761)))
 (let (($x177127 (and $x132775 $x132780 (or $x139787 $x132782) $x132785)))
 (let (($x132720 (MsgHistoryMod.MsgHistory.CanConcat this@@29 |other#0@@7|)))
 (let (($x132434 (MsgHistoryMod.MsgHistory.WF |other#0@@7|)))
 (let (($x132714 (MsgHistoryMod.MsgHistory.WF this@@29)))
 (let (($x116989 ($Is |other#0@@7| Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132483 ($Is this@@29 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132770 (|MsgHistoryMod.MsgHistory.Concat#canCall| this@@29 |other#0@@7|)))
 (let (($x177071 (or $x132770 (and $x132483 $x116989 $x132714 $x132434 $x132720))))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type |other#0@@7|)))
 (let (($x178371 (= ?x63 ?x161909)))
 (let ((?x176 (type this@@29)))
 (let (($x178327 (= ?x176 ?x161909)))
 (let (($x178365 (not (and $x178327 $x178371 $x177071))))
 (or $x178365 $x177127))))))))))))))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.Concat this@@29 |other#0@@7|) ) :qid MsgHistoryidfy.77:14))
 )
(assert
 (forall ((this@@19 T@U) )(! (let ((?x132415 (MsgHistoryMod.MsgHistory.seqStart this@@19)))
 (let ((?x132356 (MsgHistoryMod.MsgHistory.seqEnd this@@19)))
 (let (($x132648 (MsgHistoryMod.MsgHistory.IsEmpty this@@19)))
 (let (($x132658 (= $x132648 (= ?x132356 ?x132415))))
 (let (($x132298 (MsgHistoryMod.MsgHistory.MsgHistory_q this@@19)))
 (let (($x177129 (and $x132298 $x132658)))
 (let (($x132434 (MsgHistoryMod.MsgHistory.WF this@@19)))
 (let (($x116989 ($Is this@@19 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132644 (and $x116989 $x132434)))
 (let (($x132643 (|MsgHistoryMod.MsgHistory.IsEmpty#canCall| this@@19)))
 (let (($x132645 (or $x132643 $x132644)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type this@@19)))
 (let (($x178371 (= ?x63 ?x161909)))
 (or (not (and $x178371 $x132645)) $x177129))))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.IsEmpty this@@19) ) :qid MsgHistoryidfy.58:15!1073))
 )
(assert
 (forall ((this@@23 T@U) )(! (let ((?x132415 (MsgHistoryMod.MsgHistory.seqStart this@@23)))
 (let ((?x132356 (MsgHistoryMod.MsgHistory.seqEnd this@@23)))
 (let ((?x132683 (MsgHistoryMod.MsgHistory.Len this@@23)))
 (let (($x132695 (= ?x132683 (INTERNAL_sub_boogie ?x132356 ?x132415))))
 (let (($x132298 (MsgHistoryMod.MsgHistory.MsgHistory_q this@@23)))
 (let (($x177151 (and $x132298 $x132695)))
 (let (($x132434 (MsgHistoryMod.MsgHistory.WF this@@23)))
 (let (($x116989 ($Is this@@23 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132644 (and $x116989 $x132434)))
 (let (($x132681 (or (|MsgHistoryMod.MsgHistory.Len#canCall| this@@23) $x132644)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type this@@23)))
 (let (($x178371 (= ?x63 ?x161909)))
 (or (not (and $x178371 $x132681)) $x177151)))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.Len this@@23) ) :qid MsgHistoryidfy.64:14!1089))
 )
(assert
 (forall ((arg1@@264 Int) (arg2@@156 Int) (arg0@@531 T@U) )(! (let ((?x5021 (MapType0Type BoxType boolType)))
 (= (type (|lambda#211| arg0@@531 arg1@@264 arg2@@156)) ?x5021)) :pattern ( (|lambda#211| arg0@@531 arg1@@264 arg2@@156) ) :qid funType:lambda#211))
 )
(assert
 (forall ((this@@5 T@U) (|lsns#0@@1| T@U) )(! (let (($x177161 (forall ((|lsn#0@@0| Int) )(! (let (($x132502 (MsgHistoryMod.MsgHistory.Contains this@@5 |lsn#0@@0|)))
 (let (($x132508 (= (U_2_bool (MapType0Select |lsns#0@@1| ($Box (int_2_U |lsn#0@@0|)))) $x132502)))
 (let (($x9901 (INTERNAL_le_boogie 0 |lsn#0@@0|)))
 (let (($x177171 (not $x9901)))
 (or $x177171 $x132508))))) :pattern ( (MapType0Select |lsns#0@@1| ($Box (int_2_U |lsn#0@@0|))) ) :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@5 |lsn#0@@0|) ) :qid MsgHistoryidfy.42:14!1001))
 ))
 (let (($x132490 (MsgHistoryMod.MsgHistory.ContainsExactly this@@5 |lsns#0@@1|)))
 (let (($x177165 (forall ((|lsn#0| Int) )(! (let (($x132500 (|MsgHistoryMod.MsgHistory.Contains#canCall| this@@5 |lsn#0|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |lsn#0|)))
 (let (($x177171 (not $x9901)))
 (or $x177171 $x132500)))) :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@5 |lsn#0|) ) :pattern ( (MapType0Select |lsns#0@@1| ($Box (int_2_U |lsn#0|))) ) :qid MsgHistoryidfy.42:14!998))
 ))
 (let (($x177157 (and $x177165 (= $x132490 $x177161))))
 (let (($x132483 ($Is this@@5 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132486 (and $x132483 ($Is |lsns#0@@1| (TSet Tclass._System.nat)))))
 (let (($x132487 (or (|MsgHistoryMod.MsgHistory.ContainsExactly#canCall| this@@5 |lsns#0@@1|) $x132486)))
 (let ((?x5021 (MapType0Type BoxType boolType)))
 (let ((?x63 (type |lsns#0@@1|)))
 (let (($x5314 (= ?x63 ?x5021)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x176 (type this@@5)))
 (let (($x178327 (= ?x176 ?x161909)))
 (or (not (and $x178327 $x5314 $x132487)) $x177157)))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.ContainsExactly this@@5 |lsns#0@@1|) ) :qid MsgHistoryidfy.40:15!1003))
 )
(assert
 (forall (($ly@@306 T@U) (this@@13 T@U) )(! (let ((?x132484 (TSet Tclass._System.nat)))
 (let ((?x132583 (MsgHistoryMod.MsgHistory.LSNSet $ly@@306 this@@13)))
 (let (($x132605 (and (MsgHistoryMod.MsgHistory.ContainsExactly this@@13 ?x132583) ($Is ?x132583 ?x132484))))
 (let (($x116989 ($Is this@@13 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132601 (or (|MsgHistoryMod.MsgHistory.LSNSet#canCall| this@@13) $x116989)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type this@@13)))
 (let (($x178371 (= ?x63 ?x161909)))
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x176 (type $ly@@306)))
 (let (($x178389 (= ?x176 ?x132767)))
 (or (not (and $x178389 $x178371 $x132601)) $x132605)))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.LSNSet $ly@@306 this@@13) ) :qid MsgHistoryidfy.52:24!1042))
 )
(assert
 (forall ((this@@9 T@U) (|lsn#0@@3| Int) )(! (let ((?x132418 (MsgHistoryMod.MsgHistory.seqEnd this@@9)))
 (let (($x132555 (INTERNAL_lt_boogie |lsn#0@@3| ?x132418)))
 (let ((?x132346 (MsgHistoryMod.MsgHistory.seqStart this@@9)))
 (let (($x132551 (INTERNAL_le_boogie ?x132346 |lsn#0@@3|)))
 (let (($x132556 (and $x132551 $x132555)))
 (let (($x132540 (MsgHistoryMod.MsgHistory.Contains this@@9 |lsn#0@@3|)))
 (let (($x132337 (MsgHistoryMod.MsgHistory.MsgHistory_q this@@9)))
 (let (($x177175 (or (not (U_2_bool (Lit (bool_2_U true)))) (and $x132337 (or $x132337 (not $x132551))))))
 (let (($x177211 (and $x177175 (= $x132540 $x132556))))
 (let (($x9901 (INTERNAL_le_boogie 0 |lsn#0@@3|)))
 (let (($x132483 ($Is this@@9 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132536 (and $x132483 $x9901)))
 (let (($x132535 (|MsgHistoryMod.MsgHistory.Contains#canCall| this@@9 |lsn#0@@3|)))
 (let (($x132537 (or $x132535 $x132536)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x176 (type this@@9)))
 (let (($x178327 (= ?x176 ?x161909)))
 (or (not (and $x178327 $x132537)) $x177211)))))))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.Contains this@@9 |lsn#0@@3|) ) :qid MsgHistoryidfy.45:15!1026))
 )
(assert
 (forall ((arg0@@530 T@U) (arg1@@263 T@U) )(! (let ((?x5021 (MapType0Type BoxType boolType)))
 (= (type (MsgHistoryMod.MsgHistory.LSNSet arg0@@530 arg1@@263)) ?x5021)) :pattern ( (MsgHistoryMod.MsgHistory.LSNSet arg0@@530 arg1@@263) ) :qid funType:MsgHistoryMod.MsgHistory.LSNSet))
 )
(assert
 (forall ((this@@1 T@U) )(! (let ((?x132332 (MsgHistoryMod.MsgHistory.msgs this@@1)))
 (let ((?x132445 (|Map#Domain| ?x132332)))
 (let ((?x132356 (MsgHistoryMod.MsgHistory.seqEnd this@@1)))
 (let ((?x132415 (MsgHistoryMod.MsgHistory.seqStart this@@1)))
 (let (($x132444 (INTERNAL_le_boogie ?x132415 ?x132356)))
 (let (($x132434 (MsgHistoryMod.MsgHistory.WF this@@1)))
 (let (($x132452 (= $x132434 (and $x132444 (MsgHistoryMod.MsgHistory.ContainsExactly this@@1 ?x132445)))))
 (let (($x132298 (MsgHistoryMod.MsgHistory.MsgHistory_q this@@1)))
 (let (($x132447 (and $x132298 (|MsgHistoryMod.MsgHistory.ContainsExactly#canCall| this@@1 ?x132445))))
 (let (($x177179 (and $x132298 (or (not $x132444) $x132447) $x132452)))
 (let (($x116989 ($Is this@@1 Tclass.MsgHistoryMod.MsgHistory)))
 (let (($x132431 (or (|MsgHistoryMod.MsgHistory.WF#canCall| this@@1) $x116989)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type this@@1)))
 (let (($x178371 (= ?x63 ?x161909)))
 (or (not (and $x178371 $x132431)) $x177179)))))))))))))))) :pattern ( (MsgHistoryMod.MsgHistory.WF this@@1) ) :qid MsgHistoryidfy.34:15!977))
 )
(assert
 (forall ((|a#17#0#0@@0| T@U) (|a#17#1#0@@0| Int) (|a#17#2#0| Int) )(! (let ((?x132289 (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#17#0#0@@0| |a#17#1#0@@0| |a#17#2#0|)))
 (let (($x132400 (= (MsgHistoryMod.MsgHistory.seqEnd ?x132289) |a#17#2#0|)))
 (let ((?x5099 (MapType BoxType BoxType)))
 (let ((?x174 (type |a#17#0#0@@0|)))
 (let (($x5452 (= ?x174 ?x5099)))
 (let (($x177143 (not $x5452)))
 (or $x177143 $x132400))))))) :pattern ( (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#17#0#0@@0| |a#17#1#0@@0| |a#17#2#0|) ) :qid MsgHistoryidfy.28:36!952))
 )
(assert
 (forall ((d@@53 T@U) )(! (let (($x132403 (|$IsA#MsgHistoryMod.MsgHistory| d@@53)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type d@@53)))
 (let (($x178371 (= ?x63 ?x161909)))
 (let (($x132298 (MsgHistoryMod.MsgHistory.MsgHistory_q d@@53)))
 (or $x132298 (not (and $x178371 $x132403)))))))) :pattern ( (|$IsA#MsgHistoryMod.MsgHistory| d@@53) ) :qid unknown.0:0!953))
 )
(assert
 (forall ((a@@131 T@U) (b@@81 T@U) )(! (let (($x5003 (= a@@131 b@@81)))
 (let (($x132425 (|MsgHistoryMod.MsgHistory#Equal| a@@131 b@@81)))
 (let (($x132426 (= $x132425 $x5003)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type b@@81)))
 (let (($x178371 (= ?x63 ?x161909)))
 (let ((?x176 (type a@@131)))
 (let (($x178327 (= ?x176 ?x161909)))
 (let (($x178507 (not (and $x178327 $x178371))))
 (or $x178507 $x132426)))))))))) :pattern ( (|MsgHistoryMod.MsgHistory#Equal| a@@131 b@@81) ) :qid unknown.0:0!965))
 )
(assert
 (forall ((|a#13#1#0| Int) (|a#13#2#0| Int) (|a#13#0#0| T@U) )(! (let ((?x132368 (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#13#0#0| |a#13#1#0| |a#13#2#0|)))
 (let (($x132370 (= (MsgHistoryMod.MsgHistory.msgs ?x132368) |a#13#0#0|)))
 (or (not (= (type |a#13#0#0|) (MapType BoxType BoxType))) $x132370))) :pattern ( (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#13#0#0| |a#13#1#0| |a#13#2#0|) ) :qid MsgHistoryidfy.28:36!934))
 )
(assert
 (forall ((|a#16#0#0@@0| T@U) (|a#16#1#0@@0| Int) (|a#16#2#0| Int) )(! (let ((?x132289 (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#16#0#0@@0| |a#16#1#0@@0| |a#16#2#0|)))
 (let (($x132396 (= (MsgHistoryMod.MsgHistory.seqStart ?x132289) |a#16#1#0@@0|)))
 (let ((?x5099 (MapType BoxType BoxType)))
 (let ((?x174 (type |a#16#0#0@@0|)))
 (let (($x5452 (= ?x174 ?x5099)))
 (let (($x177143 (not $x5452)))
 (or $x177143 $x132396))))))) :pattern ( (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#16#0#0@@0| |a#16#1#0@@0| |a#16#2#0|) ) :qid MsgHistoryidfy.28:36!950))
 )
(assert
 (forall ((arg0@@529 T@U) )(! (let ((?x5099 (MapType BoxType BoxType)))
 (= (type (MsgHistoryMod.MsgHistory.msgs arg0@@529)) ?x5099)) :pattern ( (MsgHistoryMod.MsgHistory.msgs arg0@@529) ) :qid funType:MsgHistoryMod.MsgHistory.msgs))
 )
(assert
 (forall ((d@@48 T@U) )(! (let (($x141060 (exists ((|a#9#0#0@@1| T@U) (|a#9#1#0| Int) (|a#9#2#0| Int) )(! (let ((?x5099 (MapType BoxType BoxType)))
 (let ((?x174 (type |a#9#0#0@@1|)))
 (let (($x5452 (= ?x174 ?x5099)))
 (and $x5452 (= d@@48 (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#9#0#0@@1| |a#9#1#0| |a#9#2#0|)))))) :qid MsgHistoryidfy.28:36!900))
 ))
 (let (($x132298 (MsgHistoryMod.MsgHistory.MsgHistory_q d@@48)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type d@@48)))
 (let (($x178371 (= ?x63 ?x161909)))
 (or (not (and $x178371 $x132298)) $x141060)))))) :pattern ( (MsgHistoryMod.MsgHistory.MsgHistory_q d@@48) ) :qid unknown.0:0!901))
 )
(assert
 (forall ((|a#10#2#0| Int) (|a#10#0#0@@1| T@U) (|a#10#1#0| Int) )(! (let ((?x116877 (int_2_U |a#10#2#0|)))
 (let (($x116878 ($Is ?x116877 Tclass._System.nat)))
 (let ((?x56 (int_2_U |a#10#1#0|)))
 (let (($x117050 ($Is ?x56 Tclass._System.nat)))
 (let ((?x132312 (TMap Tclass._System.nat Tclass.MsgHistoryMod.KeyedMessage)))
 (let (($x132313 ($Is |a#10#0#0@@1| ?x132312)))
 (let (($x132311 ($Is (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#10#0#0@@1| |a#10#1#0| |a#10#2#0|) Tclass.MsgHistoryMod.MsgHistory)))
 (or (not (= (type |a#10#0#0@@1|) (MapType BoxType BoxType))) (= $x132311 (and $x132313 $x117050 $x116878)))))))))) :pattern ( ($Is (|#MsgHistoryMod.MsgHistory.MsgHistory| |a#10#0#0@@1| |a#10#1#0| |a#10#2#0|) Tclass.MsgHistoryMod.MsgHistory) ) :qid MsgHistoryidfy.28:36!907))
 )
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x131919 (type StartFuel_Maps._default.MapDisjointUnion)))
 (= ?x131919 ?x132767))))
(assert
 (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@258 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) )(! (let ((?x130024 (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))
 (let ((?x131369 (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@258 |mapa#0@@1| |mapb#0@@1|)))
 (let (($x131406 ($Is ?x131369 ?x130024)))
 (let (($x177295 (forall ((|k#1@@2| T@U) )(! (let ((?x131394 (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@258 |mapa#0@@1| |mapb#0@@1|)) |k#1@@2|)))
 (let ((?x7387 (|Map#Elements| |mapb#0@@1|)))
 (let ((?x7526 (MapType0Select ?x7387 |k#1@@2|)))
 (let (($x131401 (= ?x7526 ?x131394)))
 (let ((?x7308 (|Map#Domain| |mapb#0@@1|)))
 (let ((?x7309 (MapType0Select ?x7308 |k#1@@2|)))
 (let (($x7310 (U_2_bool ?x7309)))
 (let (($x8299 ($IsBox |k#1@@2| Maps._default.MapDisjointUnion$U@@1)))
 (let ((?x63 (type |k#1@@2|)))
 (let (($x4926 (= ?x63 BoxType)))
 (or (not (and $x4926 $x8299 $x7310)) $x131401))))))))))) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@2|) ) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@258 |mapa#0@@1| |mapb#0@@1|)) |k#1@@2|) ) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@2|) ) :qid Mapsidfy.132:18))
 ))
 (let (($x177249 (forall ((|k#0@@60| T@U) )(! (let ((?x131394 (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@258 |mapa#0@@1| |mapb#0@@1|)) |k#0@@60|)))
 (let ((?x5398 (|Map#Elements| |mapa#0@@1|)))
 (let ((?x5399 (MapType0Select ?x5398 |k#0@@60|)))
 (let (($x131395 (= ?x5399 ?x131394)))
 (let ((?x5394 (|Map#Domain| |mapa#0@@1|)))
 (let ((?x5395 (MapType0Select ?x5394 |k#0@@60|)))
 (let (($x5396 (U_2_bool ?x5395)))
 (let (($x8299 ($IsBox |k#0@@60| Maps._default.MapDisjointUnion$U@@1)))
 (let ((?x63 (type |k#0@@60|)))
 (let (($x4926 (= ?x63 BoxType)))
 (or (not (and $x4926 $x8299 $x5396)) $x131395))))))))))) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@60|) ) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@258 |mapa#0@@1| |mapb#0@@1|)) |k#0@@60|) ) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@60|) ) :qid Mapsidfy.131:18))
 ))
 (let ((?x5382 (|Map#Domain| |mapb#0@@1|)))
 (let ((?x7308 (|Map#Domain| |mapa#0@@1|)))
 (let ((?x7506 (|Set#Union| ?x7308 ?x5382)))
 (let (($x131390 (|Set#Equal| (|Map#Domain| ?x131369) ?x7506)))
 (let (($x177291 (and $x131390 $x177249 $x177295 $x131406)))
 (let (($x131382 (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|)))
 (let (($x177259 (or $x131382 (and ($Is |mapa#0@@1| ?x130024) ($Is |mapb#0@@1| ?x130024) (|Set#Disjoint| ?x7308 ?x5382)))))
 (let ((?x5099 (MapType BoxType BoxType)))
 (let ((?x63 (type |mapb#0@@1|)))
 (let (($x112301 (= ?x63 ?x5099)))
 (let ((?x176 (type |mapa#0@@1|)))
 (let (($x5389 (= ?x176 ?x5099)))
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x174 (type $ly@@258)))
 (let (($x178367 (= ?x174 ?x132767)))
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x5410 (type Maps._default.MapDisjointUnion$T@@1)))
 (let (($x178537 (= ?x5410 ?x7901)))
 (let ((?x6895 (type Maps._default.MapDisjointUnion$U@@1)))
 (let (($x178539 (= ?x6895 ?x7901)))
 (or (not (and $x178539 $x178537 $x178367 $x5389 $x112301 $x177259)) $x177291)))))))))))))))))))))))))) :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@258 |mapa#0@@1| |mapb#0@@1|) ) :qid unknown.0:0!176))
 )
(assert
 (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@257 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) )(! (let ((?x131369 (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@257 |mapa#0@@0| |mapb#0@@0|)))
 (let (($x139722 (= ?x131369 (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))))
 (let ((?x5099 (MapType BoxType BoxType)))
 (let ((?x63 (type |mapb#0@@0|)))
 (let (($x112301 (= ?x63 ?x5099)))
 (let ((?x176 (type |mapa#0@@0|)))
 (let (($x5389 (= ?x176 ?x5099)))
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x174 (type $ly@@257)))
 (let (($x178367 (= ?x174 ?x132767)))
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x5410 (type Maps._default.MapDisjointUnion$T@@0)))
 (let (($x178537 (= ?x5410 ?x7901)))
 (let ((?x6895 (type Maps._default.MapDisjointUnion$U@@0)))
 (let (($x178539 (= ?x6895 ?x7901)))
 (or (not (and $x178539 $x178537 $x178367 $x5389 $x112301)) $x139722)))))))))))))))) :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@257) |mapa#0@@0| |mapb#0@@0|) ) :qid unknown.0:0!156))
 )
(assert
 (forall ((arg0@@512 T@U) (arg1@@248 T@U) (arg2@@142 T@U) (arg3@@84 T@U) (arg4@@49 T@U) )(! (let ((?x5099 (MapType BoxType BoxType)))
 (= (type (Maps.__default.MapDisjointUnion arg0@@512 arg1@@248 arg2@@142 arg3@@84 arg4@@49)) ?x5099)) :pattern ( (Maps.__default.MapDisjointUnion arg0@@512 arg1@@248 arg2@@142 arg3@@84 arg4@@49) ) :qid funType:Maps.__default.MapDisjointUnion))
 )
(assert
 (forall ((arg0@@496 T@U) (arg1@@233 T@U) (arg2@@127 T@U) )(! (let ((?x5021 (MapType0Type BoxType boolType)))
 (= (type (|lambda#147| arg0@@496 arg1@@233 arg2@@127)) ?x5021)) :pattern ( (|lambda#147| arg0@@496 arg1@@233 arg2@@127) ) :qid funType:lambda#147))
 )
(assert
 (forall ((arg0@@497 T@U) )(! (let ((?x7426 (MapType0Type BoxType BoxType)))
 (= (type (|lambda#148| arg0@@497)) ?x7426)) :pattern ( (|lambda#148| arg0@@497) ) :qid funType:lambda#148))
 )
(assert
 (forall ((|a#5#1#0@@0| Int) (|a#5#0#0@@2| T@U) )(! (let (($x203648 (= (StampedMod.Stamped.value (|#StampedMod.Stamped.Stamped| |a#5#0#0@@2| |a#5#1#0@@0|)) |a#5#0#0@@2|)))
 (or (not (= (type |a#5#0#0@@2|) BoxType)) $x203648)) :pattern ( (|#StampedMod.Stamped.Stamped| |a#5#0#0@@2| |a#5#1#0@@0|) ) :qid StampedMapidfy.18:33!774))
 )
(assert
 (forall ((d@@39 T@U) )(! (let (($x178571 (not (and (= (type d@@39) (type |puts1#0|)) (|$IsA#StampedMod.Stamped| d@@39)))))
 (let (($x122505 (StampedMod.Stamped.Stamped_q d@@39)))
 (or $x122505 $x178571))) :pattern ( (|$IsA#StampedMod.Stamped| d@@39) ) :qid unknown.0:0!782))
 )
(assert
 (forall ((a@@126 T@U) (b@@75 T@U) )(! (let (($x125468 (and (= (StampedMod.Stamped.value a@@126) (StampedMod.Stamped.value b@@75)) (= (StampedMod.Stamped.seqEnd a@@126) (StampedMod.Stamped.seqEnd b@@75)))))
 (let (($x125465 (|StampedMod.Stamped#Equal| a@@126 b@@75)))
 (let (($x125469 (= $x125465 $x125468)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type b@@75)))
 (let (($x178371 (= ?x63 ?x161909)))
 (let ((?x176 (type a@@126)))
 (let (($x178327 (= ?x176 ?x161909)))
 (let (($x178507 (not (and $x178327 $x178371))))
 (or $x178507 $x125469)))))))))) :pattern ( (|StampedMod.Stamped#Equal| a@@126 b@@75) ) :qid unknown.0:0!795))
 )
(assert
 (forall ((d@@36 T@U) )(! (let (($x203626 (exists ((|a#1#0#0@@1| T@U) (|a#1#1#0@@0| Int) )(! (let ((?x176 (type |a#1#0#0@@1|)))
 (let (($x5028 (= ?x176 BoxType)))
 (and $x5028 (= d@@36 (|#StampedMod.Stamped.Stamped| |a#1#0#0@@1| |a#1#1#0@@0|))))) :qid StampedMapidfy.18:33!739))
 ))
 (let (($x122505 (StampedMod.Stamped.Stamped_q d@@36)))
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x63 (type d@@36)))
 (let (($x178371 (= ?x63 ?x161909)))
 (or (not (and $x178371 $x122505)) $x203626)))))) :pattern ( (StampedMod.Stamped.Stamped_q d@@36) ) :qid unknown.0:0!740))
 )
(assert
 (forall ((arg0@@442 T@U) )(! (let ((?x7426 (MapType0Type BoxType BoxType)))
 (= (type (|lambda#101| arg0@@442)) ?x7426)) :pattern ( (|lambda#101| arg0@@442) ) :qid funType:lambda#101))
 )
(assert
 (let ((?x125127 (Lit TotalKMMapMod.__default.DefaultV)))
 (U_2_bool (Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue ?x125127))))))
(assert
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x132197 (type Tclass.MsgHistoryMod.KeyedMessage)))
 (= ?x132197 ?x7901))))
(assert
 (forall ((arg0@@362 T@U) )(! (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x9988 (AsFuelBottom arg0@@362)))
 (let ((?x9989 (type ?x9988)))
 (= ?x9989 ?x132767)))) :pattern ( (AsFuelBottom arg0@@362) ) :qid funType:AsFuelBottom))
 )
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x9994 (type $LZ)))
 (= ?x9994 ?x132767))))
(assert
 (forall ((|l#0@@115| T@U) (|$w#0@@4| T@U) )(! (let ((?x4981 (MapType0Select |l#0@@115| |$w#0@@4|)))
 (let ((?x161561 (MapType0Select (|lambda#148| |l#0@@115|) |$w#0@@4|)))
 (let (($x161563 (= ?x161561 ?x4981)))
 (let ((?x63 (type |$w#0@@4|)))
 (let (($x4926 (= ?x63 BoxType)))
 (let ((?x7426 (MapType0Type BoxType BoxType)))
 (let ((?x176 (type |l#0@@115|)))
 (let (($x136417 (= ?x176 ?x7426)))
 (let (($x136418 (and $x136417 $x4926)))
 (or (not $x136418) $x161563)))))))))) :pattern ( (MapType0Select (|lambda#148| |l#0@@115|) |$w#0@@4|) ) :qid MapRemovesdfy.22:44))
 )
(assert
 (forall ((|$y#0@@1| T@U) (|l#0@@121| T@U) (|l#1@@91| Int) (|l#2@@87| Int) )(! (let ((?x136479 (U_2_int ($Unbox intType |$y#0@@1|))))
 (let (($x136481 (INTERNAL_lt_boogie ?x136479 |l#2@@87|)))
 (let (($x136480 (INTERNAL_le_boogie |l#1@@91| ?x136479)))
 (let (($x128747 ($IsBox |$y#0@@1| |l#0@@121|)))
 (let ((?x161637 (MapType0Select (|lambda#211| |l#0@@121| |l#1@@91| |l#2@@87|) |$y#0@@1|)))
 (let (($x161639 (U_2_bool ?x161637)))
 (let (($x177323 (= $x161639 (and $x128747 $x136480 $x136481))))
 (let ((?x5410 (type |$y#0@@1|)))
 (let (($x9681 (= ?x5410 BoxType)))
 (let ((?x7901 (type Tclass._System.nat)))
 (let ((?x174 (type |l#0@@121|)))
 (let (($x177605 (= ?x174 ?x7901)))
 (or (not (and $x177605 $x9681)) $x177323))))))))))))) :pattern ( (MapType0Select (|lambda#211| |l#0@@121| |l#1@@91| |l#2@@87|) |$y#0@@1|) ) :qid DafnyPreludebpl.22:1!2122))
 )
(assert
 (|MsgHistoryMod.MsgHistory.Concat#canCall| |puts1#0| |puts2#0|))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136517 (type StartFuel_Sequences._default.Range)))
 (= ?x136517 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136521 (type StartFuelAssert_Sequences._default.Range)))
 (= ?x136521 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136525 (type StartFuel_Sequences._default.ApplyOpaque)))
 (= ?x136525 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136529 (type StartFuelAssert_Sequences._default.ApplyOpaque)))
 (= ?x136529 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136533 (type StartFuel_Sequences._default.remove)))
 (= ?x136533 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136537 (type StartFuelAssert_Sequences._default.remove)))
 (= ?x136537 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136541 (type StartFuel_Sequences._default.RemoveOneValue)))
 (= ?x136541 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136545 (type StartFuelAssert_Sequences._default.RemoveOneValue)))
 (= ?x136545 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136549 (type StartFuel_Sequences._default.insert)))
 (= ?x136549 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136553 (type StartFuelAssert_Sequences._default.insert)))
 (= ?x136553 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136557 (type StartFuel_Sequences._default.replace1with2)))
 (= ?x136557 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136561 (type StartFuelAssert_Sequences._default.replace1with2)))
 (= ?x136561 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136565 (type StartFuel_Sequences._default.replace2with1)))
 (= ?x136565 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136569 (type StartFuelAssert_Sequences._default.replace2with1)))
 (= ?x136569 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136573 (type StartFuel_Sequences._default.concat)))
 (= ?x136573 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136577 (type StartFuelAssert_Sequences._default.concat)))
 (= ?x136577 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136581 (type StartFuel_Sequences._default.concat3)))
 (= ?x136581 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136585 (type StartFuelAssert_Sequences._default.concat3)))
 (= ?x136585 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136589 (type StartFuel_Sequences._default.concatSeq)))
 (= ?x136589 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136593 (type StartFuelAssert_Sequences._default.concatSeq)))
 (= ?x136593 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136597 (type StartFuel_Sequences._default.IsPrefix)))
 (= ?x136597 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136601 (type StartFuelAssert_Sequences._default.IsPrefix)))
 (= ?x136601 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136605 (type StartFuel_Sequences._default.IsSuffix)))
 (= ?x136605 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136609 (type StartFuelAssert_Sequences._default.IsSuffix)))
 (= ?x136609 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136613 (type StartFuelAssert_Sequences._default.SeqIndexIterate)))
 (= ?x136613 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136617 (type StartFuel_Sequences._default.SeqIndex)))
 (= ?x136617 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136621 (type StartFuelAssert_Sequences._default.SeqIndex)))
 (= ?x136621 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136625 (type StartFuel_Sequences._default.SeqOfLength)))
 (= ?x136625 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136629 (type StartFuelAssert_Sequences._default.SeqOfLength)))
 (= ?x136629 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136633 (type StartFuel_Sequences._default.SeqIndexUpdate)))
 (= ?x136633 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136637 (type StartFuelAssert_Sequences._default.SeqIndexUpdate)))
 (= ?x136637 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136641 (type StartFuel_Sequences._default.Zip)))
 (= ?x136641 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136645 (type StartFuelAssert_Sequences._default.Zip)))
 (= ?x136645 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136649 (type StartFuel_Sequences._default.Unzip)))
 (= ?x136649 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136653 (type StartFuelAssert_Sequences._default.Unzip)))
 (= ?x136653 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136657 (type StartFuel_Sequences._default.Flatten)))
 (= ?x136657 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136661 (type StartFuelAssert_Sequences._default.Flatten)))
 (= ?x136661 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136665 (type StartFuel_Sequences._default.seqMax)))
 (= ?x136665 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136669 (type StartFuelAssert_Sequences._default.seqMax)))
 (= ?x136669 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136673 (type StartFuel_Sequences._default.fill)))
 (= ?x136673 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136677 (type StartFuelAssert_Sequences._default.fill)))
 (= ?x136677 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136681 (type StartFuel_Maps._default.MapRemoveStrong)))
 (= ?x136681 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136685 (type StartFuelAssert_Maps._default.MapRemoveStrong)))
 (= ?x136685 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136689 (type StartFuel_Maps._default.MapRemove1Strong)))
 (= ?x136689 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136693 (type StartFuelAssert_Maps._default.MapRemove1Strong)))
 (= ?x136693 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136697 (type StartFuel_Maps._default.IMapInvert)))
 (= ?x136697 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136701 (type StartFuelAssert_Maps._default.IMapInvert)))
 (= ?x136701 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136705 (type StartFuel_Maps._default.IMapRemove)))
 (= ?x136705 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136709 (type StartFuelAssert_Maps._default.IMapRemove)))
 (= ?x136709 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136713 (type StartFuel_Maps._default.IMapRemove1)))
 (= ?x136713 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136717 (type StartFuelAssert_Maps._default.IMapRemove1)))
 (= ?x136717 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136721 (type StartFuelAssert_Maps._default.MapDisjointUnion)))
 (= ?x136721 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136725 (type StartFuelAssert_Maps._default.MapUnionPreferA)))
 (= ?x136725 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136729 (type StartFuel_Maps._default.MapUnionPreferB)))
 (= ?x136729 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136733 (type StartFuelAssert_Maps._default.MapUnionPreferB)))
 (= ?x136733 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136737 (type StartFuel_Maps._default.MapUnion)))
 (= ?x136737 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136741 (type StartFuelAssert_Maps._default.MapUnion)))
 (= ?x136741 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136745 (type StartFuelAssert_Maps._default.IMapUnionPreferA)))
 (= ?x136745 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136749 (type StartFuel_Maps._default.IMapUnionPreferB)))
 (= ?x136749 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136753 (type StartFuelAssert_Maps._default.IMapUnionPreferB)))
 (= ?x136753 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136757 (type StartFuel_Maps._default.IMapUnion)))
 (= ?x136757 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136761 (type StartFuelAssert_Maps._default.IMapUnion)))
 (= ?x136761 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136765 (type StartFuel_Maps._default.MapDisjointUnion3)))
 (= ?x136765 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136769 (type StartFuelAssert_Maps._default.MapDisjointUnion3)))
 (= ?x136769 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136773 (type StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet)))
 (= ?x136773 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136777 (type StartFuel_PagedBetree.Path.ReplacedChildren)))
 (= ?x136777 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x136781 (type StartFuelAssert_PagedBetree.Path.ReplacedChildren)))
 (= ?x136781 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x161881 (type StartFuelAssert_PagedBetreeRefinement._default.INode)))
 (= ?x161881 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x161889 (type StartFuel_PagedBetreeRefinement._default.MapApply)))
 (= ?x161889 ?x132767))))
(assert
 (let ((?x132767 (type StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let ((?x161897 (type StartFuelAssert_PagedBetreeRefinement._default.MapApply)))
 (= ?x161897 ?x132767))))
(assert
 (let ((?x134985 (MapType6Type refType boolType)))
 (= (type (|lambda#81| null $Heap@@50 alloc false)) ?x134985)))
(assert
 (let ((?x5185 (MapType0Type refType MapType1Type)))
 (= (type $Heap@@50) ?x5185)))
(assert
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x161917 (type |puts2#0|)))
 (= ?x161917 ?x161909))))
(assert
 (let ((?x161909 (type |puts1#0|)))
 (let ((?x161925 (type |stampedMap#0@@3|)))
 (= ?x161925 ?x161909))))
(assert
 ($Is TotalKMMapMod.__default.DefaultV Tclass.ValueMessage.Message))
(assert
 (let ((?x125505 (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)))
 ($Is |stampedMap#0@@3| ?x125505)))
(assert
 (let ((?x125505 (Tclass.StampedMod.Stamped Tclass.TotalKMMapMod.TotalMap)))
 ($IsAlloc |stampedMap#0@@3| ?x125505 $Heap@@50)))
(assert
 (|$IsA#StampedMod.Stamped| |stampedMap#0@@3|))
(assert
 (|MsgHistoryMod.MsgHistory.WF#canCall| |puts1#0|))
(assert
 (MsgHistoryMod.MsgHistory.WF |puts1#0|))
(assert
 (let ((?x161975 (MsgHistoryMod.MsgHistory.seqEnd |puts1#0|)))
 (let ((?x161973 (MsgHistoryMod.MsgHistory.seqStart |puts1#0|)))
 (INTERNAL_le_boogie ?x161973 ?x161975))))
(assert
 (let ((?x161981 (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs |puts1#0|))))
 (MsgHistoryMod.MsgHistory.ContainsExactly |puts1#0| ?x161981)))
(assert
 (|MsgHistoryMod.MsgHistory.WF#canCall| |puts2#0|))
(assert
 (MsgHistoryMod.MsgHistory.WF |puts2#0|))
(assert
 (let ((?x161997 (MsgHistoryMod.MsgHistory.seqEnd |puts2#0|)))
 (let ((?x161995 (MsgHistoryMod.MsgHistory.seqStart |puts2#0|)))
 (INTERNAL_le_boogie ?x161995 ?x161997))))
(assert
 (let ((?x162003 (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs |puts2#0|))))
 (MsgHistoryMod.MsgHistory.ContainsExactly |puts2#0| ?x162003)))
(assert
 (let ((?x119943 (LitInt 1)))
 (= (MsgHistoryMod.MsgHistory.Len |puts2#0|) ?x119943)))
(assert
 (let ((?x161973 (MsgHistoryMod.MsgHistory.seqStart |puts1#0|)))
 (= ?x161973 (StampedMod.Stamped.seqEnd |stampedMap#0@@3|))))
(assert
 (let ((?x161975 (MsgHistoryMod.MsgHistory.seqEnd |puts1#0|)))
 (let ((?x161995 (MsgHistoryMod.MsgHistory.seqStart |puts2#0|)))
 (= ?x161995 ?x161975))))
(assert
 (= (ControlFlow 0 485795) 157524))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax))
(assert
 (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill))
(assert
 (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill))
(assert
 (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1))
(assert
 (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.IMapInvert) StartFuel_Maps._default.IMapInvert))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapInvert) StartFuelAssert_Maps._default.IMapInvert))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion))
(assert
 (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3))
(assert
 (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3))
(assert
 (= (AsFuelBottom StartFuel_MsgHistoryMod.MsgHistory.LSNSet) StartFuel_MsgHistoryMod.MsgHistory.LSNSet))
(assert
 (= (AsFuelBottom StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet) StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet))
(assert
 (= (AsFuelBottom StartFuel_PagedBetree.Path.ReplacedChildren) StartFuel_PagedBetree.Path.ReplacedChildren))
(assert
 (= (AsFuelBottom StartFuelAssert_PagedBetree.Path.ReplacedChildren) StartFuelAssert_PagedBetree.Path.ReplacedChildren))
(assert
 (= (AsFuelBottom StartFuel_PagedBetreeRefinement._default.INode) StartFuel_PagedBetreeRefinement._default.INode))
(assert
 (= (AsFuelBottom StartFuelAssert_PagedBetreeRefinement._default.INode) StartFuelAssert_PagedBetreeRefinement._default.INode))
(assert
 (= (AsFuelBottom StartFuel_PagedBetreeRefinement._default.MapApply) StartFuel_PagedBetreeRefinement._default.MapApply))
(assert
 (= (AsFuelBottom StartFuelAssert_PagedBetreeRefinement._default.MapApply) StartFuelAssert_PagedBetreeRefinement._default.MapApply))
(assert
 ($IsAlloc |puts1#0| Tclass.MsgHistoryMod.MsgHistory $Heap@@50))
(assert
 ($IsAlloc |puts2#0| Tclass.MsgHistoryMod.MsgHistory $Heap@@50))
(assert
 (= (ControlFlow 0 0) 485795))
(assert
 ($IsGoodHeap $Heap@@50))
(assert
 ($IsHeapAnchor $Heap@@50))
(assert
 ($Is |puts1#0| Tclass.MsgHistoryMod.MsgHistory))
(assert
 (|$IsA#MsgHistoryMod.MsgHistory| |puts1#0|))
(assert
 ($Is |puts2#0| Tclass.MsgHistoryMod.MsgHistory))
(assert
 (|$IsA#MsgHistoryMod.MsgHistory| |puts2#0|))
(assert
 (let ((?x162271 (MsgHistoryMod.MsgHistory.Concat |puts1#0| |puts2#0|)))
 (MsgHistoryMod.MsgHistory.MsgHistory_q ?x162271)))
(assert
 (let ((?x162271 (MsgHistoryMod.MsgHistory.Concat |puts1#0| |puts2#0|)))
 ($IsAlloc ?x162271 Tclass.MsgHistoryMod.MsgHistory $Heap@@50)))
(assert
 (MsgHistoryMod.MsgHistory.MsgHistory_q |puts2#0|))
(assert
 (let ((?x161997 (MsgHistoryMod.MsgHistory.seqEnd |puts2#0|)))
 (let ((?x162291 (INTERNAL_sub_boogie ?x161997 1)))
 (let ((?x162271 (MsgHistoryMod.MsgHistory.Concat |puts1#0| |puts2#0|)))
 (let (($x162403 (|MsgHistoryMod.MsgHistory.DiscardRecent#canCall| ?x162271 ?x162291)))
 (let ((?x162405 (MsgHistoryMod.MsgHistory.DiscardRecent ?x162271 ?x162291)))
 (let (($x162411 (|$IsA#MsgHistoryMod.MsgHistory| ?x162405)))
 (let (($x162409 (and $x162403 (MsgHistoryMod.MsgHistory.MsgHistory_q ?x162405))))
 (let (($x177553 (not $x162409)))
 (let ((?x10306 ($LS $LZ)))
 (let ((?x10439 ($LS ?x10306)))
 (let ((?x162439 (MsgHistoryMod.MsgHistory.ApplyToStampedMap ?x10439 |puts1#0| |stampedMap#0@@3|)))
 (let (($x162443 (|StampedMod.Stamped#Equal| (MsgHistoryMod.MsgHistory.ApplyToStampedMap ?x10439 ?x162271 |stampedMap#0@@3|) (MsgHistoryMod.MsgHistory.ApplyToStampedMap ?x10439 |puts2#0| ?x162439))))
 (let (($x177541 (or $x162443 (not (= (ControlFlow 0 157524) (- 487489))) (not (|MsgHistoryMod.MsgHistory#Equal| |puts1#0| ?x162405)))))
 (let (($x162427 (|MsgHistoryMod.MsgHistory#Equal| |puts1#0| ?x162405)))
 (let (($x177521 (and (or (not (= (ControlFlow 0 157524) (- 487469))) $x162427) $x177541)))
 (let ((?x162371 (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs ?x162271))))
 (let (($x162373 (|MsgHistoryMod.MsgHistory.ContainsExactly#canCall| ?x162271 ?x162371)))
 (let (($x177485 (forall ((|lsn#12| Int) )(! (let ((?x162271 (MsgHistoryMod.MsgHistory.Concat |puts1#0| |puts2#0|)))
 (let (($x162381 (MsgHistoryMod.MsgHistory.Contains ?x162271 |lsn#12|)))
 (let ((?x56 (int_2_U |lsn#12|)))
 (let ((?x4849 ($Box ?x56)))
 (let ((?x162371 (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs ?x162271))))
 (let ((?x162377 (MapType0Select ?x162371 ?x4849)))
 (let (($x162383 (= (U_2_bool ?x162377) $x162381)))
 (let (($x9901 (INTERNAL_le_boogie 0 |lsn#12|)))
 (let (($x177171 (not $x9901)))
 (or $x177171 $x162383)))))))))) :pattern ( (MapType0Select (|Map#Domain| (MsgHistoryMod.MsgHistory.msgs (MsgHistoryMod.MsgHistory.Concat |puts1#0| |puts2#0|))) ($Box (int_2_U |lsn#12|))) ) :pattern ( (MsgHistoryMod.MsgHistory.Contains (MsgHistoryMod.MsgHistory.Concat |puts1#0| |puts2#0|) |lsn#12|) ) :qid MsgHistoryidfy.42:14!188))
 ))
 (let (($x162351 (|MsgHistoryMod.MsgHistory.WF#canCall| ?x162271)))
 (let (($x177473 (not $x162351)))
 (let (($x162375 (MsgHistoryMod.MsgHistory.ContainsExactly ?x162271 ?x162371)))
 (let (($x162353 (MsgHistoryMod.MsgHistory.WF ?x162271)))
 (let (($x177513 (or $x162353 $x162375 $x177473 $x177485 (not $x162373) (not (= (ControlFlow 0 157524) (- 487251))))))
 (let ((?x162335 (MsgHistoryMod.MsgHistory.seqEnd ?x162271)))
 (let ((?x162319 (MsgHistoryMod.MsgHistory.seqStart ?x162271)))
 (let (($x162355 (INTERNAL_le_boogie ?x162319 ?x162335)))
 (let (($x177483 (or $x162353 $x162355 $x177473 (not (= (ControlFlow 0 157524) (- 487213))))))
 (let (($x162315 (|MsgHistoryMod.MsgHistory.CanDiscardTo#canCall| ?x162271 |##lsn#0@0|)))
 (let (($x177457 (not $x162315)))
 (let (($x162337 (INTERNAL_le_boogie |##lsn#0@0| ?x162335)))
 (let (($x162317 (MsgHistoryMod.MsgHistory.CanDiscardTo ?x162271 |##lsn#0@0|)))
 (let (($x177469 (or $x162317 $x162337 (not (= (ControlFlow 0 157524) (- 487180))) $x177457)))
 (let (($x162321 (INTERNAL_le_boogie ?x162319 |##lsn#0@0|)))
 (let (($x177451 (or $x162317 $x162321 (not (= (ControlFlow 0 157524) (- 487147))) $x177457)))
 (let (($x162307 (and (= |##lsn#0@0| ?x162291) ($IsAlloc (int_2_U |##lsn#0@0|) Tclass._System.nat $Heap@@50))))
 (let (($x177547 (not $x162307)))
 (let (($x162295 ($Is (int_2_U ?x162291) Tclass._System.nat)))
 (let (($x177545 (not $x162295)))
 (let (($x177555 (or $x177545 $x177547 (and $x177451 $x177469 $x177483 $x177513 (or $x177521 $x177553 (not (and $x162411 $x162403)))))))
 (let (($x177439 (or (not (= (ControlFlow 0 157524) (- 487114))) $x162295)))
 (not (and $x177439 $x177555)))))))))))))))))))))))))))))))))))))))))))
(check-sat)

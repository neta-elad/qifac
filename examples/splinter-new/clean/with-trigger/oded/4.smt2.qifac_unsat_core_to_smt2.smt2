
(set-option :print-success false)
(set-info :smt-lib-version |2.6|)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
; benchmark generated from python API
(set-info :status unknown)
(declare-sort T@U 0)
 (declare-sort T@T 0)
 (declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun regexType () T@T)
(declare-fun type (T@U) T@T)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun string_2_U (String) T@U)
(declare-fun stringType () T@T)
(declare-fun U_2_string (T@U) String)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun rmodeType () T@T)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun boolType () T@T)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun real_2_U (Real) T@U)
(declare-fun realType () T@T)
(declare-fun U_2_real (T@U) Real)
(declare-fun int_2_U (Int) T@U)
(declare-fun intType () T@T)
(declare-fun U_2_int (T@U) Int)
(declare-fun Ctor (T@T) Int)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.LargestLte (T@U T@U) Int)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.Element#Equal| (T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun $Box (T@U) T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.lt (T@U T@U) Bool)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.lte (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun Tclass.Upperbounded__Lexicographic__Byte__Order.Element () T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| (T@U T@U) Bool)
(declare-fun SeqType (T@T) T@T)
(declare-fun BoxType () T@T)
(declare-fun Tclass._System.nat () T@U)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun TyType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun Lit (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun TotalKMMapMod.__default.DefaultV () T@U)
(declare-fun TotalKMMapMod.__default.TerminalValue (T@U) Bool)
(declare-fun PivotBetree.__default.WFChildren (T@U T@U) Bool)
(declare-fun PivotBetree.BetreeNode.WF (T@U T@U) Bool)
(declare-fun |PivotBetree.BetreeNode.WF#canCall| (T@U) Bool)
(declare-fun Tclass.PivotBetree.BetreeNode () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |PivotBetree.__default.WFChildren#canCall| (T@U) Bool)
(declare-fun PivotBetree.Path.Substitute (T@U T@U T@U) T@U)
(declare-fun |#PivotBetree.BetreeNode.BetreeNode| (T@U T@U T@U) T@U)
(declare-fun PivotBetree.Path.ReplacedChildren (T@U T@U T@U) T@U)
(declare-fun PivotBetree.BetreeNode.pivotTable (T@U) T@U)
(declare-fun PivotBetree.Path.node (T@U) T@U)
(declare-fun PivotBetree.BetreeNode.buffers (T@U) T@U)
(declare-fun PivotBetree.Path.depth (T@U) Int)
(declare-fun |PivotBetree.Path.ReplacedChildren#canCall| (T@U T@U) Bool)
(declare-fun PivotBetree.Path.Path_q (T@U) Bool)
(declare-fun PivotBetree.Path.ValidReplacement (T@U T@U) Bool)
(declare-fun PivotBetree.Path.Valid (T@U T@U) Bool)
(declare-fun $LZ () T@U)
(declare-fun Tclass.PivotBetree.Path () T@U)
(declare-fun |PivotBetree.Path.Substitute#canCall| (T@U T@U) Bool)
(declare-fun |DomainMod.Domain#Equal| (T@U T@U) Bool)
(declare-fun PivotBetree.BetreeNode.MyDomain (T@U) T@U)
(declare-fun PivotBetree.Path.Target (T@U T@U) T@U)
(declare-fun PivotBetree.BetreeNode.BetreeNode_q (T@U) Bool)
(declare-fun |PivotBetree.BetreeNode.MyDomain#canCall| (T@U) Bool)
(declare-fun |PivotBetree.Path.Target#canCall| (T@U) Bool)
(declare-fun |$IsA#DomainMod.Domain| (T@U) Bool)
(declare-fun |PivotBetree.Path.ValidReplacement#canCall| (T@U T@U) Bool)
(declare-fun |#PivotBetree.Path.Path| (T@U T@U Int) T@U)
(declare-fun PivotBetree.Path.key (T@U) T@U)
(declare-fun PivotBetree.Path.ChildrenHaveMatchingDomains (T@U T@U) Bool)
(declare-fun PivotBetree.BetreeNode.children (T@U) T@U)
(declare-fun PivotBetree.BetreeNode.ValidChildIndex (T@U Int) Bool)
(declare-fun |PivotBetree.BetreeNode.ValidChildIndex#canCall| (T@U Int) Bool)
(declare-fun |PivotBetree.Path.ChildrenHaveMatchingDomains#canCall| (T@U T@U) Bool)
(declare-fun PivotBetree.Path.Subpath (T@U) T@U)
(declare-fun PivotBetree.BetreeNode.IsIndex (T@U) Bool)
(declare-fun PivotBetree.BetreeNode.KeyInDomain (T@U T@U) Bool)
(declare-fun |PivotBetree.Path.Valid#canCall| (T@U) Bool)
(declare-fun |PivotBetree.Path.Subpath#canCall| (T@U) Bool)
(declare-fun |PivotBetree.BetreeNode.IsIndex#canCall| (T@U) Bool)
(declare-fun |PivotBetree.BetreeNode.KeyInDomain#canCall| (T@U T@U) Bool)
(declare-fun PivotBetree.BetreeNode.Child (T@U T@U) T@U)
(declare-fun |PivotBetree.BetreeNode.Child#canCall| (T@U T@U) Bool)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun BoundedPivotsLib.__default.Route (T@U T@U) Int)
(declare-fun |BoundedPivotsLib.__default.Route#canCall| (T@U T@U) Bool)
(declare-fun BoundedPivotsLib.__default.BoundedKey (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.BoundedKey#canCall| (T@U T@U) Bool)
(declare-fun |#DomainMod.Domain.Domain| (T@U T@U) T@U)
(declare-fun PivotBetree.BetreeNode.LocalStructure (T@U) Bool)
(declare-fun PivotBetree.BetreeNode.DomainRoutedToChild (T@U Int) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun |PivotBetree.BetreeNode.DomainRoutedToChild#canCall| (T@U Int) Bool)
(declare-fun PivotBetree.BetreeNode.LinkedChildren (T@U) Bool)
(declare-fun |PivotBetree.BetreeNode.LinkedChildren#canCall| (T@U) Bool)
(declare-fun |PivotBetree.BetreeNode.LocalStructure#canCall| (T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun BoundedPivotsLib.__default.NumBuckets (T@U) Int)
(declare-fun |BoundedPivotsLib.__default.NumBuckets#canCall| (T@U) Bool)
(declare-fun BoundedPivotsLib.__default.WFPivots (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.WFPivots#canCall| (T@U) Bool)
(declare-fun Tclass.Buffers.BufferStack () T@U)
(declare-fun |##PivotBetree.BetreeNode.BetreeNode| () T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun StartFuelAssert_DomainMod.Domain.SaneKeys () T@U)
(declare-fun StartFuelAssert_BoundedPivotsLib._default.CutoffForRight () T@U)
(declare-fun StartFuelAssert_BoundedPivotsLib._default.CutoffForLeft () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuel_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximum () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuel_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimum () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuel_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.lte () T@U)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapInvert () T@U)
(declare-fun StartFuel_Maps._default.IMapInvert () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun |##key#0@0| () T@U)
(declare-fun |##pt#0@0| () T@U)
(declare-fun |##children#1@0| () T@U)
(declare-fun |##children#0@0| () T@U)
(declare-fun |let#0#0#0| () T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun $_Frame@0@@0 () T@U)
(declare-fun |newChild#Z#0@0| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun |out#0@@6| () T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $Heap@@108 () T@U)
(declare-fun |replacement#0@@17| () T@U)
(declare-fun this@@325 () T@U)
(declare-fun DomainMod.Domain.start (T@U) T@U)
(declare-fun BoundedPivotsLib.__default.KeyToElement (T@U) T@U)
(declare-fun BoundedPivotsLib.__default.ElementsAreKeys (T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.Element.Element_q (T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun |BoundedPivotsLib.__default.ElementsAreKeys#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun DomainMod.Domain.end (T@U) T@U)
(declare-fun |BoundedPivotsLib.__default.KeyToElement#canCall| (T@U) Bool)
(declare-fun BoundedPivotsLib.__default.InBetween (T@U T@U T@U) Bool)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |b$reqreads#4@0| () Bool)
(declare-fun |b$reqreads#3@0| () Bool)
(declare-fun |b$reqreads#2@0| () Bool)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.lte (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.Element.e (T@U) T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun BoundedPivotsLib.__default.ElementIsKey (T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun |lambda#82| (T@U T@U T@U Bool) T@U)
(declare-fun alloc () T@U)
(declare-fun null () T@U)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun StartFuel_DomainMod.Domain.SaneKeys () T@U)
(declare-fun StartFuel_BoundedPivotsLib._default.CutoffForRight () T@U)
(declare-fun StartFuel_BoundedPivotsLib._default.CutoffForLeft () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Byte_Order._default.minimum () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.ltedef () T@U)
(declare-fun StartFuel_Byte_Order._default.ltedef () T@U)
(declare-fun StartFuel_Byte_Order._default.lte () T@U)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun StartFuel_MsgHistoryMod.MsgHistory.LSNSet () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun |lambda#81| (T@U T@U T@U Bool) T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $IsGoodHeap (T@U) Bool)
(assert
 (let (($x168 (forall ((arg0@@10 (RegEx String)) )(! (= (type (regex_2_U arg0@@10)) regexType) :pattern ( (regex_2_U arg0@@10) ) :qid funType:regex_2_U))
 ))
 (let (($x164 (forall ((x@@4 T@U) )(! (let (($x161 (= (regex_2_U (U_2_regex x@@4)) x@@4)))
 (let ((?x63 (type x@@4)))
 (let (($x158 (= ?x63 regexType)))
 (=> $x158 $x161)))) :pattern ( (U_2_regex x@@4) ) :qid cast:U_2_regex))
 ))
 (let (($x156 (forall ((arg0@@9 (RegEx String)) )(! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :pattern ( (regex_2_U arg0@@9) ) :qid typeInv:U_2_regex))
 ))
 (let (($x149 (forall ((arg0@@8 String) )(! (= (type (string_2_U arg0@@8)) stringType) :pattern ( (string_2_U arg0@@8) ) :qid funType:string_2_U))
 ))
 (let (($x145 (forall ((x@@3 T@U) )(! (let (($x142 (= (string_2_U (U_2_string x@@3)) x@@3)))
 (let ((?x63 (type x@@3)))
 (let (($x139 (= ?x63 stringType)))
 (=> $x139 $x142)))) :pattern ( (U_2_string x@@3) ) :qid cast:U_2_string))
 ))
 (let (($x137 (forall ((arg0@@7 String) )(! (let ((?x133 (string_2_U arg0@@7)))
 (let ((?x134 (U_2_string ?x133)))
 (= ?x134 arg0@@7))) :pattern ( (string_2_U arg0@@7) ) :qid typeInv:U_2_string))
 ))
 (let (($x130 (forall ((arg0@@6 RoundingMode) )(! (= (type (rmode_2_U arg0@@6)) rmodeType) :pattern ( (rmode_2_U arg0@@6) ) :qid funType:rmode_2_U))
 ))
 (let (($x126 (forall ((x@@2 T@U) )(! (let (($x123 (= (rmode_2_U (U_2_rmode x@@2)) x@@2)))
 (let ((?x63 (type x@@2)))
 (let (($x120 (= ?x63 rmodeType)))
 (=> $x120 $x123)))) :pattern ( (U_2_rmode x@@2) ) :qid cast:U_2_rmode))
 ))
 (let (($x118 (forall ((arg0@@5 RoundingMode) )(! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :pattern ( (rmode_2_U arg0@@5) ) :qid typeInv:U_2_rmode))
 ))
 (let (($x111 (forall ((arg0@@4 Bool) )(! (= (type (bool_2_U arg0@@4)) boolType) :pattern ( (bool_2_U arg0@@4) ) :qid funType:bool_2_U))
 ))
 (let (($x107 (forall ((x@@1 T@U) )(! (let (($x104 (= (bool_2_U (U_2_bool x@@1)) x@@1)))
 (let ((?x63 (type x@@1)))
 (let (($x101 (= ?x63 boolType)))
 (=> $x101 $x104)))) :pattern ( (U_2_bool x@@1) ) :qid cast:U_2_bool))
 ))
 (let (($x99 (forall ((arg0@@3 Bool) )(! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :pattern ( (bool_2_U arg0@@3) ) :qid typeInv:U_2_bool))
 ))
 (let (($x92 (forall ((arg0@@2 Real) )(! (= (type (real_2_U arg0@@2)) realType) :pattern ( (real_2_U arg0@@2) ) :qid funType:real_2_U))
 ))
 (let (($x88 (forall ((x@@0 T@U) )(! (let (($x85 (= (real_2_U (U_2_real x@@0)) x@@0)))
 (let ((?x63 (type x@@0)))
 (let (($x82 (= ?x63 realType)))
 (=> $x82 $x85)))) :pattern ( (U_2_real x@@0) ) :qid cast:U_2_real))
 ))
 (let (($x80 (forall ((arg0@@1 Real) )(! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :pattern ( (real_2_U arg0@@1) ) :qid typeInv:U_2_real))
 ))
 (let (($x74 (forall ((arg0@@0 Int) )(! (= (type (int_2_U arg0@@0)) intType) :pattern ( (int_2_U arg0@@0) ) :qid funType:int_2_U))
 ))
 (let (($x70 (forall ((x T@U) )(! (let (($x67 (= (int_2_U (U_2_int x)) x)))
 (let ((?x63 (type x)))
 (let (($x64 (= ?x63 intType)))
 (=> $x64 $x67)))) :pattern ( (U_2_int x) ) :qid cast:U_2_int))
 ))
 (let (($x60 (forall ((arg0 Int) )(! (= (U_2_int (int_2_U arg0)) arg0) :pattern ( (int_2_U arg0) ) :qid typeInv:U_2_int))
 ))
 (let (($x53 (= (Ctor regexType) 5)))
 (let (($x48 (= (Ctor stringType) 4)))
 (let (($x43 (= (Ctor rmodeType) 3)))
 (let (($x38 (= (Ctor boolType) 2)))
 (let (($x39 (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) $x38)))
 (let (($x75 (and (and (and (and (and (and $x39 $x43) $x48) $x53) $x60) $x70) $x74)))
 (let (($x112 (and (and (and (and (and (and $x75 $x80) $x88) $x92) $x99) $x107) $x111)))
 (let (($x150 (and (and (and (and (and (and $x112 $x118) $x126) $x130) $x137) $x145) $x149)))
 (and (and (and $x150 $x156) $x164) $x168))))))))))))))))))))))))))))
(assert
 (let (($x241697 (forall ((|run#0@@179| T@U) (|needle#0@@75| T@U) )(! (let ((?x252923 (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte |run#0@@179| |needle#0@@75|)))
 (let (($x257126 (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@179| ?x252923)) |needle#0@@75|)))
 (let (($x257125 (and (INTERNAL_le_boogie 0 ?x252923) $x257126)))
 (let ((?x4832 ($Box |needle#0@@75|)))
 (let (($x129695 (|Seq#Contains| |run#0@@179| ?x4832)))
 (let (($x257108 (forall ((|i#1@@54| Int) )(! (let ((?x5305 (|Seq#Index| |run#0@@179| |i#1@@54|)))
 (let ((?x230061 ($Unbox DatatypeTypeType ?x5305)))
 (let (($x257103 (Upperbounded__Lexicographic__Byte__Order.__default.lt |needle#0@@75| ?x230061)))
 (let ((?x5302 (|Seq#Length| |run#0@@179|)))
 (let (($x126619 (INTERNAL_lt_boogie |i#1@@54| ?x5302)))
 (let ((?x252890 (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte |run#0@@179| |needle#0@@75|)))
 (let (($x257110 (and (INTERNAL_lt_boogie ?x252890 |i#1@@54|) $x126619)))
 (=> (and true $x257110) $x257103)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@179| |i#1@@54|)) ) :qid totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.363:20))
 ))
 (let (($x252913 (forall ((|i#0@@159| Int) )(! (let ((?x5305 (|Seq#Index| |run#0@@179| |i#0@@159|)))
 (let ((?x230061 ($Unbox DatatypeTypeType ?x5305)))
 (let (($x252916 (Upperbounded__Lexicographic__Byte__Order.__default.lte ?x230061 |needle#0@@75|)))
 (let ((?x252890 (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte |run#0@@179| |needle#0@@75|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@159|)))
 (let (($x252917 (and $x9901 (INTERNAL_le_boogie |i#0@@159| ?x252890))))
 (=> (and true $x252917) $x252916))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@179| |i#0@@159|)) ) :qid totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.362:20))
 ))
 (let ((?x6786 (|Seq#Length| |run#0@@179|)))
 (let (($x252921 (INTERNAL_lt_boogie ?x252923 ?x6786)))
 (let (($x257107 (and (and (and (INTERNAL_le_boogie (- 0 1) ?x252923) $x252921) $x252913) $x257108)))
 (let (($x257078 (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@179|)))
 (let (($x256923 ($Is |needle#0@@75| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let ((?x212568 (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let (($x148584 ($Is |run#0@@179| ?x212568)))
 (let (($x252851 (and $x148584 $x256923)))
 (let (($x252840 (and $x252851 $x257078)))
 (let (($x252906 (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@179| |needle#0@@75|)))
 (let ((?x63 (type |needle#0@@75|)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x176 (type |run#0@@179|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let (($x118757 (and $x5299 $x5613)))
 (let (($x257109 (and $x118757 (or $x252906 $x252840))))
 (=> $x257109 (and $x257107 (=> $x129695 $x257125))))))))))))))))))))))))))) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte |run#0@@179| |needle#0@@75|) ) :qid totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.359:23))
 ))
 (=> true $x241697)))
(assert
 (forall ((|x#0| T@U) )(! (let ((?x65 (U_2_int |x#0|)))
 (let (($x7920 (INTERNAL_le_boogie 0 ?x65)))
 (let (($x7919 ($Is |x#0| Tclass._System.nat)))
 (let (($x7921 (= $x7919 $x7920)))
 (let ((?x63 (type |x#0|)))
 (let (($x64 (= ?x63 intType)))
 (=> $x64 $x7921))))))) :pattern ( ($Is |x#0| Tclass._System.nat) ) :qid unknown.0:0!992))
 )
(assert
 (forall ((x@@50 Int) (y@@20 Int) )(! (let (($x197646 (<= y@@20 x@@50)))
 (let (($x3810 (INTERNAL_ge_boogie x@@50 y@@20)))
 (= $x3810 $x197646))) :pattern ( (INTERNAL_ge_boogie x@@50 y@@20) ) :qid DafnyPreludebpl.1421:51))
 )
(assert
 (forall ((y@@13 Int) (x@@43 Int) )(! (let ((?x7085 (- x@@43 y@@13)))
 (let ((?x178450 (INTERNAL_sub_boogie x@@43 y@@13)))
 (= ?x178450 ?x7085))) :pattern ( (INTERNAL_sub_boogie x@@43 y@@13) ) :qid DafnyPreludebpl.1414:30))
 )
(assert
 (forall ((y@@17 Int) (x@@47 Int) )(! (let (($x7041 (< x@@47 y@@17)))
 (let (($x124373 (INTERNAL_lt_boogie x@@47 y@@17)))
 (= $x124373 $x7041))) :pattern ( (INTERNAL_lt_boogie x@@47 y@@17) ) :qid DafnyPreludebpl.1418:51))
 )
(assert
 (forall ((x@@48 Int) (y@@18 Int) )(! (let (($x6413 (<= x@@48 y@@18)))
 (let (($x7839 (INTERNAL_le_boogie x@@48 y@@18)))
 (= $x7839 $x6413))) :pattern ( (INTERNAL_le_boogie x@@48 y@@18) ) :qid DafnyPreludebpl.1419:51))
 )
(assert
 (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) )(! (let ((?x5302 (|Seq#Length| s@@21)))
 (let ((?x6944 (|Seq#Update| s@@21 i@@10 v@@33)))
 (let ((?x177126 (|Seq#Length| ?x6944)))
 (let (($x177130 (= ?x177126 ?x5302)))
 (let (($x5754 (<= 0 i@@10)))
 (let (($x177122 (and $x5754 (< i@@10 ?x5302))))
 (let ((?x63 (type v@@33)))
 (let ((?x6724 (SeqType ?x63)))
 (let ((?x174 (type s@@21)))
 (let (($x6941 (= ?x174 ?x6724)))
 (=> (and $x6941 $x177122) $x177130))))))))))) :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) ) :qid DafnyPreludebpl.984:18))
 )
(assert
 (forall ((n@@7 Int) (s@@22 T@U) (i@@11 Int) (v@@34 T@U) )(! (let ((?x6944 (|Seq#Update| s@@22 i@@11 v@@34)))
 (let ((?x177162 (|Seq#Index| ?x6944 n@@7)))
 (let (($x177182 (= ?x177162 (|Seq#Index| s@@22 n@@7))))
 (let (($x177158 (= i@@11 n@@7)))
 (let (($x177174 (not $x177158)))
 (let (($x177194 (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> $x177158 (= ?x177162 v@@34)) (=> $x177174 $x177182)))))
 (let ((?x63 (type v@@34)))
 (let ((?x6724 (SeqType ?x63)))
 (let ((?x174 (type s@@22)))
 (let (($x6941 (= ?x174 ?x6724)))
 (=> (and $x6941 (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22)))) (and (=> $x177158 (= ?x177162 v@@34)) (=> $x177174 $x177182))))))))))))) :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) ) :qid DafnyPreludebpl.986:18))
 )
(assert
 (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) )(! (let ((?x63 (type arg2@@1)))
 (let ((?x6724 (SeqType ?x63)))
 (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) ?x6724))) :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1) ) :qid funType:Seq#Update))
 )
(assert
 (forall ((arg0@@50 T@U) (arg1@@16 Int) )(! (let ((?x176 (type arg0@@50)))
 (let ((?x5295 (SeqTypeInv0 ?x176)))
 (= (type (|Seq#Index| arg0@@50 arg1@@16)) ?x5295))) :pattern ( (|Seq#Index| arg0@@50 arg1@@16) ) :qid funType:Seq#Index))
 )
(assert
 (forall ((v@@17 T@U) (t0@@3 T@U) )(! (let (($x5309 (forall ((i Int) )(! (let ((?x5305 (|Seq#Index| v@@17 i)))
 (let (($x5306 ($IsBox ?x5305 t0@@3)))
 (let ((?x5302 (|Seq#Length| v@@17)))
 (let (($x5303 (< i ?x5302)))
 (let (($x4887 (<= 0 i)))
 (let (($x5304 (and $x4887 $x5303)))
 (=> $x5304 $x5306))))))) :pattern ( (|Seq#Index| v@@17 i) ) :qid DafnyPreludebpl.235:11))
 ))
 (let ((?x4697 (TSeq t0@@3)))
 (let (($x5301 ($Is v@@17 ?x4697)))
 (let ((?x63 (type t0@@3)))
 (let (($x4677 (= ?x63 TyType)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x176 (type v@@17)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let (($x5300 (and $x5299 $x4677)))
 (=> $x5300 (= $x5301 $x5309))))))))))) :pattern ( ($Is v@@17 (TSeq t0@@3)) ) :qid DafnyPreludebpl.233:15))
 )
(assert
 (forall ((arg0@@68 T@U) )(! (= (type ($LS arg0@@68)) LayerTypeType) :pattern ( ($LS arg0@@68) ) :qid funType:$LS))
 )
(assert
 (forall ((arg0@@29 T@U) )(! (let ((?x63 (type arg0@@29)))
 (= (type (Lit arg0@@29)) ?x63)) :pattern ( (Lit arg0@@29) ) :qid funType:Lit))
 )
(assert
 (forall ((x@@8 T@U) )(! (let ((?x4821 (Lit x@@8)))
 (= ?x4821 x@@8)) :pattern ( (Lit x@@8) ) :qid DafnyPreludebpl.89:29))
 )
(assert
 (forall ((x@@10 Int) )(! (let ((?x4843 (LitInt x@@10)))
 (= ?x4843 x@@10)) :pattern ( (LitInt x@@10) ) :qid DafnyPreludebpl.95:29))
 )
(assert
 (forall ((T@@0 T@T) (arg0@@34 T@U) )(! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :pattern ( ($Unbox T@@0 arg0@@34) ) :qid funType:$Unbox))
 )
(assert
 (forall ((x@@14 T@U) )(! (= ($Unbox (type x@@14) ($Box x@@14)) x@@14) :pattern ( ($Box x@@14) ) :qid DafnyPreludebpl.141:18))
 )
(assert
 (let (($x5066 (forall ((arg0@@41 T@T) )(! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :pattern ( (SeqType arg0@@41) ) :qid typeInv:SeqTypeInv0))
 ))
 (let (($x5062 (forall ((arg0@@40 T@T) )(! (= (Ctor (SeqType arg0@@40)) 16) :qid ctor:SeqType))
 ))
 (and $x5062 $x5066))))
(assert
 (let (($x219429 (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@9| T@U) )(! (let ((?x6717 (|Seq#Length| |run#0@@9|)))
 (let ((?x125564 (INTERNAL_sub_boogie ?x6717 1)))
 (let ((?x125565 (|Seq#Index| |run#0@@9| ?x125564)))
 (let ((?x118884 (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|)))
 (let (($x126438 (= ?x118884 ?x125565)))
 (let (($x125551 (INTERNAL_gt_boogie ?x6717 0)))
 (let ((?x5360 (TSeq Sequences._default.Last$E@@1)))
 (let (($x9894 ($Is |run#0@@9| ?x5360)))
 (let (($x125552 (and $x9894 $x125551)))
 (let (($x126427 (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@9|) $x125552)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |run#0@@9|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type Sequences._default.Last$E@@1)))
 (let (($x4738 (= ?x176 TyType)))
 (let (($x9891 (and $x4738 $x7226)))
 (let (($x126428 (and $x9891 $x126427)))
 (=> $x126428 $x126438)))))))))))))))))) :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|) ) :qid unknown.0:0!1376))
 ))
 (=> true $x219429)))
(assert
 (let (($x125132 ($Is TotalKMMapMod.__default.DefaultV Tclass.ValueMessage.Message)))
 (let ((?x125127 (Lit TotalKMMapMod.__default.DefaultV)))
 (let (($x125131 (U_2_bool (Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue ?x125127))))))
 (=> (and true true) (and $x125131 $x125132))))))
(assert
 (let (($x287088 (forall (($ly@@35 T@U) (|children#0@@3| T@U) )(! (let (($x235775 (forall ((|i#0@@30| Int) )(! (let ((?x5293 (|Seq#Index| |children#0@@3| |i#0@@30|)))
 (let ((?x112246 ($Unbox DatatypeTypeType ?x5293)))
 (let (($x151499 (PivotBetree.BetreeNode.WF $ly@@35 ?x112246)))
 (let ((?x6786 (|Seq#Length| |children#0@@3|)))
 (let (($x9902 (INTERNAL_lt_boogie |i#0@@30| ?x6786)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@30|)))
 (let (($x9903 (and $x9901 $x9902)))
 (=> $x9903 $x151499)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@3| |i#0@@30|)) ) :qid PivotBetreeidfy.40:16!849))
 ))
 (let ((?x9982 ($LS $ly@@35)))
 (let (($x151615 (PivotBetree.__default.WFChildren ?x9982 |children#0@@3|)))
 (let (($x151507 (forall ((|i#0@@29| Int) )(! (let ((?x5293 (|Seq#Index| |children#0@@3| |i#0@@29|)))
 (let ((?x112246 ($Unbox DatatypeTypeType ?x5293)))
 (let (($x153841 (|PivotBetree.BetreeNode.WF#canCall| ?x112246)))
 (let ((?x6786 (|Seq#Length| |children#0@@3|)))
 (let (($x9902 (INTERNAL_lt_boogie |i#0@@29| ?x6786)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@29|)))
 (=> (and $x9901 $x9902) $x153841))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |children#0@@3| |i#0@@29|)) ) :qid PivotBetreeidfy.40:16))
 ))
 (let (($x117698 (U_2_bool (Lit (bool_2_U true)))))
 (let ((?x230281 (TSeq Tclass.PivotBetree.BetreeNode)))
 (let (($x230279 ($Is |children#0@@3| ?x230281)))
 (let (($x229049 (not (= 19 $FunctionContextHeight))))
 (let (($x151567 (and $x229049 $x230279)))
 (let (($x153805 (|PivotBetree.__default.WFChildren#canCall| |children#0@@3|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |children#0@@3|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type $ly@@35)))
 (let (($x9979 (= ?x176 LayerTypeType)))
 (let (($x129308 (and $x9979 $x7226)))
 (let (($x151559 (and $x129308 (or $x153805 $x151567))))
 (=> $x151559 (and (=> $x117698 $x151507) (= $x151615 (and true $x235775))))))))))))))))))))) :pattern ( (PivotBetree.__default.WFChildren ($LS $ly@@35) |children#0@@3|) ) :qid PivotBetreeidfy.38:13!853))
 ))
 (let (($x228304 (<= 19 $FunctionContextHeight)))
 (=> $x228304 $x287088))))
(assert
 (forall (($ly@@31 T@U) (|children#0| T@U) )(! (let (($x151611 (PivotBetree.__default.WFChildren $ly@@31 |children#0|)))
 (let ((?x9982 ($LS $ly@@31)))
 (let (($x151615 (PivotBetree.__default.WFChildren ?x9982 |children#0|)))
 (let (($x151607 (= $x151615 $x151611)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |children#0|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type $ly@@31)))
 (let (($x9979 (= ?x176 LayerTypeType)))
 (let (($x129308 (and $x9979 $x7226)))
 (=> $x129308 $x151607))))))))))) :pattern ( (PivotBetree.__default.WFChildren ($LS $ly@@31) |children#0|) ) :qid PivotBetreeidfy.38:13))
 )
(assert
 (let (($x139383 (forall ((|replacement#0@@14| T@U) ($ly@@28 T@U) (this@@172 T@U) )(! (let ((?x139406 (|#PivotBetree.BetreeNode.BetreeNode| (PivotBetree.BetreeNode.buffers (PivotBetree.Path.node this@@172)) (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@172)) (PivotBetree.Path.ReplacedChildren $ly@@28 this@@172 |replacement#0@@14|))))
 (let ((?x155105 (PivotBetree.Path.depth this@@172)))
 (let ((?x10057 (LitInt 0)))
 (let (($x153395 (= ?x10057 ?x155105)))
 (let ((?x9982 ($LS $ly@@28)))
 (let ((?x140567 (PivotBetree.Path.Substitute ?x9982 this@@172 |replacement#0@@14|)))
 (let (($x140195 (= ?x140567 (ite $x153395 |replacement#0@@14| ?x139406))))
 (let (($x206574 (|PivotBetree.Path.ReplacedChildren#canCall| this@@172 |replacement#0@@14|)))
 (let (($x205130 (PivotBetree.Path.Path_q this@@172)))
 (let (($x155255 (and $x205130 $x205130)))
 (let (($x153415 (not $x153395)))
 (let (($x219025 (PivotBetree.Path.ValidReplacement this@@172 |replacement#0@@14|)))
 (let ((?x10306 ($LS $LZ)))
 (let (($x153321 (PivotBetree.Path.Valid ?x10306 this@@172)))
 (let (($x226851 ($Is |replacement#0@@14| Tclass.PivotBetree.BetreeNode)))
 (let (($x155307 ($Is this@@172 Tclass.PivotBetree.Path)))
 (let (($x155249 (and $x155307 $x226851)))
 (let (($x154829 (= 62 $FunctionContextHeight)))
 (let (($x154819 (not $x154829)))
 (let (($x219515 (|PivotBetree.Path.Substitute#canCall| this@@172 |replacement#0@@14|)))
 (let ((?x174 (type |replacement#0@@14|)))
 (let (($x9705 (= ?x174 DatatypeTypeType)))
 (let ((?x63 (type this@@172)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type $ly@@28)))
 (let (($x9979 (= ?x176 LayerTypeType)))
 (let (($x117390 (and $x9979 $x5613)))
 (let (($x120501 (and $x117390 $x9705)))
 (=> (and $x120501 (or $x219515 (and $x154819 (and $x155249 (and $x153321 $x219025))))) (and (and $x205130 (=> $x153415 (and $x155255 $x206574))) $x140195)))))))))))))))))))))))))))))) :pattern ( (PivotBetree.Path.Substitute ($LS $ly@@28) this@@172 |replacement#0@@14|) ) :qid PivotBetreeidfy.527:14!213))
 ))
 (let (($x154845 (<= 62 $FunctionContextHeight)))
 (=> $x154845 $x139383))))
(assert
 (let (($x156009 (forall ((this@@166 T@U) (|replacement#0@@8| T@U) )(! (let ((?x10306 ($LS $LZ)))
 (let ((?x155933 (PivotBetree.Path.Target ?x10306 this@@166)))
 (let ((?x155929 (PivotBetree.BetreeNode.MyDomain ?x155933)))
 (let ((?x217823 (PivotBetree.BetreeNode.MyDomain |replacement#0@@8|)))
 (let (($x155961 (|DomainMod.Domain#Equal| ?x217823 ?x155929)))
 (let (($x230355 (PivotBetree.BetreeNode.BetreeNode_q |replacement#0@@8|)))
 (let (($x227942 (PivotBetree.BetreeNode.WF ?x10306 |replacement#0@@8|)))
 (let (($x210047 (and $x227942 $x230355)))
 (let (($x154871 (PivotBetree.Path.ValidReplacement this@@166 |replacement#0@@8|)))
 (let (($x155881 (|PivotBetree.BetreeNode.MyDomain#canCall| ?x155933)))
 (let (($x153173 (|PivotBetree.Path.Target#canCall| this@@166)))
 (let (($x227367 (|PivotBetree.BetreeNode.MyDomain#canCall| |replacement#0@@8|)))
 (let (($x155965 (and (and (|$IsA#DomainMod.Domain| ?x217823) (|$IsA#DomainMod.Domain| ?x155929)) (and $x227367 (and $x153173 $x155881)))))
 (let (($x229310 (|PivotBetree.BetreeNode.WF#canCall| |replacement#0@@8|)))
 (let (($x153161 (PivotBetree.Path.Valid ?x10306 this@@166)))
 (let (($x229968 ($Is |replacement#0@@8| Tclass.PivotBetree.BetreeNode)))
 (let (($x207855 ($Is this@@166 Tclass.PivotBetree.Path)))
 (let (($x154865 (and $x207855 $x229968)))
 (let (($x155797 (not (= 61 $FunctionContextHeight))))
 (let (($x155773 (|PivotBetree.Path.ValidReplacement#canCall| this@@166 |replacement#0@@8|)))
 (let ((?x63 (type |replacement#0@@8|)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type this@@166)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x9771 (and $x9722 $x5613)))
 (let (($x155789 (and $x9771 (or $x155773 (and $x155797 (and $x154865 $x153161))))))
 (=> $x155789 (and (and $x229310 (=> (and $x227942 $x230355) $x155965)) (= $x154871 (and $x210047 $x155961)))))))))))))))))))))))))))))) :pattern ( (PivotBetree.Path.ValidReplacement this@@166 |replacement#0@@8|) ) :qid PivotBetreeidfy.519:15!151))
 ))
 (let (($x155775 (<= 61 $FunctionContextHeight)))
 (=> $x155775 $x156009))))
(assert
 (forall ((|a#7#0#0@@3| T@U) (|a#7#1#0@@3| T@U) (|a#7#2#0@@0| Int) )(! (let (($x153865 (= (PivotBetree.Path.key (|#PivotBetree.Path.Path| |a#7#0#0@@3| |a#7#1#0@@3| |a#7#2#0@@0|)) |a#7#1#0@@3|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x176 (type |a#7#1#0@@3|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let ((?x174 (type |a#7#0#0@@3|)))
 (let (($x9705 (= ?x174 DatatypeTypeType)))
 (let (($x119750 (and $x9705 $x5299)))
 (=> $x119750 $x153865)))))))) :pattern ( (|#PivotBetree.Path.Path| |a#7#0#0@@3| |a#7#1#0@@3| |a#7#2#0@@0|) ) :qid PivotBetreeidfy.462:24!2762))
 )
(assert
 (forall ((arg0@@429 T@U) (arg1@@172 T@U) (arg2@@85 T@U) )(! (let ((?x5070 (SeqType BoxType)))
 (= (type (PivotBetree.Path.ReplacedChildren arg0@@429 arg1@@172 arg2@@85)) ?x5070)) :pattern ( (PivotBetree.Path.ReplacedChildren arg0@@429 arg1@@172 arg2@@85) ) :qid funType:PivotBetree.Path.ReplacedChildren))
 )
(assert
 (let (($x156015 (forall (($ly@@19 T@U) (this@@159 T@U) (|replacement#0@@1| T@U) )(! (let ((?x230281 (TSeq Tclass.PivotBetree.BetreeNode)))
 (let ((?x154771 (PivotBetree.Path.ReplacedChildren $ly@@19 this@@159 |replacement#0@@1|)))
 (let (($x154921 (and (PivotBetree.Path.ChildrenHaveMatchingDomains this@@159 ?x154771) ($Is ?x154771 ?x230281))))
 (let ((?x154261 (PivotBetree.Path.depth this@@159)))
 (let (($x178788 (INTERNAL_lt_boogie 0 ?x154261)))
 (let (($x154871 (PivotBetree.Path.ValidReplacement this@@159 |replacement#0@@1|)))
 (let ((?x10306 ($LS $LZ)))
 (let (($x153161 (PivotBetree.Path.Valid ?x10306 this@@159)))
 (let (($x154877 (and $x153161 $x154871)))
 (let (($x154885 (and $x154877 $x178788)))
 (let (($x229968 ($Is |replacement#0@@1| Tclass.PivotBetree.BetreeNode)))
 (let (($x207855 ($Is this@@159 Tclass.PivotBetree.Path)))
 (let (($x154865 (and $x207855 $x229968)))
 (let (($x154829 (= 62 $FunctionContextHeight)))
 (let (($x154819 (not $x154829)))
 (let (($x154841 (|PivotBetree.Path.ReplacedChildren#canCall| this@@159 |replacement#0@@1|)))
 (let ((?x63 (type |replacement#0@@1|)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type this@@159)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let ((?x174 (type $ly@@19)))
 (let (($x10022 (= ?x174 LayerTypeType)))
 (let (($x120284 (and (and $x10022 $x9722) $x5613)))
 (let (($x154929 (and $x120284 (or $x154841 (and $x154819 (and $x154865 $x154885))))))
 (=> $x154929 $x154921))))))))))))))))))))))))) :pattern ( (PivotBetree.Path.ReplacedChildren $ly@@19 this@@159 |replacement#0@@1|) ) :qid PivotBetreeidfy.505:14!44))
 ))
 (let (($x154845 (<= 62 $FunctionContextHeight)))
 (=> $x154845 $x156015))))
(assert
 (let (($x234333 (forall ((this@@155 T@U) (|otherChildren#0@@1| T@U) )(! (let (($x241097 (forall ((|i#0@@28| Int) )(! (let ((?x153895 (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@155)) |i#0@@28|)))
 (let ((?x153905 ($Unbox DatatypeTypeType ?x153895)))
 (let ((?x153885 (PivotBetree.BetreeNode.MyDomain ?x153905)))
 (let ((?x5293 (|Seq#Index| |otherChildren#0@@1| |i#0@@28|)))
 (let ((?x112246 ($Unbox DatatypeTypeType ?x5293)))
 (let ((?x153887 (PivotBetree.BetreeNode.MyDomain ?x112246)))
 (let (($x154111 (|DomainMod.Domain#Equal| ?x153887 ?x153885)))
 (let (($x153859 (PivotBetree.BetreeNode.BetreeNode_q ?x112246)))
 (let ((?x10306 ($LS $LZ)))
 (let (($x153851 (PivotBetree.BetreeNode.WF ?x10306 ?x112246)))
 (let ((?x153797 (PivotBetree.Path.node this@@155)))
 (let (($x153825 (PivotBetree.BetreeNode.ValidChildIndex ?x153797 |i#0@@28|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@28|)))
 (let (($x154077 (and $x9901 $x153825)))
 (=> $x154077 (and (and $x153851 $x153859) $x154111)))))))))))))))) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node this@@155) |i#0@@28|) ) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@155)) |i#0@@28|)) ) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |otherChildren#0@@1| |i#0@@28|)) ) :qid PivotBetreeidfy.498:18!2963))
 ))
 (let ((?x6717 (|Seq#Length| |otherChildren#0@@1|)))
 (let (($x153819 (= ?x6717 (|Seq#Length| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@155))))))
 (let ((?x10306 ($LS $LZ)))
 (let (($x153809 (PivotBetree.__default.WFChildren ?x10306 |otherChildren#0@@1|)))
 (let (($x153715 (PivotBetree.Path.ChildrenHaveMatchingDomains this@@155 |otherChildren#0@@1|)))
 (let (($x237733 (forall ((|i#0@@27| Int) )(! (let ((?x153895 (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@155)) |i#0@@27|)))
 (let ((?x153905 ($Unbox DatatypeTypeType ?x153895)))
 (let (($x153921 (|PivotBetree.BetreeNode.MyDomain#canCall| ?x153905)))
 (let (($x153801 (PivotBetree.Path.Path_q this@@155)))
 (let ((?x5293 (|Seq#Index| |otherChildren#0@@1| |i#0@@27|)))
 (let ((?x112246 ($Unbox DatatypeTypeType ?x5293)))
 (let (($x153925 (|PivotBetree.BetreeNode.MyDomain#canCall| ?x112246)))
 (let ((?x153885 (PivotBetree.BetreeNode.MyDomain ?x153905)))
 (let (($x153881 (|$IsA#DomainMod.Domain| ?x153885)))
 (let ((?x153887 (PivotBetree.BetreeNode.MyDomain ?x112246)))
 (let (($x153891 (|$IsA#DomainMod.Domain| ?x153887)))
 (let (($x153859 (PivotBetree.BetreeNode.BetreeNode_q ?x112246)))
 (let ((?x10306 ($LS $LZ)))
 (let (($x153851 (PivotBetree.BetreeNode.WF ?x10306 ?x112246)))
 (let (($x153941 (=> (and $x153851 $x153859) (and (and $x153891 $x153881) (and $x153925 (and $x153801 $x153921))))))
 (let (($x153841 (|PivotBetree.BetreeNode.WF#canCall| ?x112246)))
 (let ((?x153797 (PivotBetree.Path.node this@@155)))
 (let (($x153825 (PivotBetree.BetreeNode.ValidChildIndex ?x153797 |i#0@@27|)))
 (let (($x153957 (and (and $x153801 (|PivotBetree.BetreeNode.ValidChildIndex#canCall| ?x153797 |i#0@@27|)) (=> $x153825 (and $x153841 $x153941)))))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@27|)))
 (=> $x9901 $x153957))))))))))))))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@155)) |i#0@@27|)) ) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node this@@155) |i#0@@27|) ) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |otherChildren#0@@1| |i#0@@27|)) ) :qid PivotBetreeidfy.498:18!2955))
 ))
 (let (($x154027 (PivotBetree.Path.Path_q this@@155)))
 (let (($x153805 (|PivotBetree.__default.WFChildren#canCall| |otherChildren#0@@1|)))
 (let (($x232575 (and (and $x153805 (=> $x153809 (and $x154027 (=> $x153819 $x237733)))) (= $x153715 (and (and $x153809 $x153819) $x241097)))))
 (let ((?x154261 (PivotBetree.Path.depth this@@155)))
 (let (($x178788 (INTERNAL_lt_boogie 0 ?x154261)))
 (let (($x153161 (PivotBetree.Path.Valid ?x10306 this@@155)))
 (let (($x153691 (and $x153161 $x178788)))
 (let ((?x230281 (TSeq Tclass.PivotBetree.BetreeNode)))
 (let (($x230279 ($Is |otherChildren#0@@1| ?x230281)))
 (let (($x207855 ($Is this@@155 Tclass.PivotBetree.Path)))
 (let (($x153695 (and $x207855 $x230279)))
 (let (($x153637 (not (= 60 $FunctionContextHeight))))
 (let (($x153609 (|PivotBetree.Path.ChildrenHaveMatchingDomains#canCall| this@@155 |otherChildren#0@@1|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |otherChildren#0@@1|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type this@@155)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x117741 (and $x9722 $x7226)))
 (let (($x153719 (and $x117741 (or $x153609 (and $x153637 (and $x153695 $x153691))))))
 (=> $x153719 $x232575)))))))))))))))))))))))))))) :pattern ( (PivotBetree.Path.ChildrenHaveMatchingDomains this@@155 |otherChildren#0@@1|) ) :qid PivotBetreeidfy.491:15!2965))
 ))
 (let (($x153601 (<= 60 $FunctionContextHeight)))
 (=> $x153601 $x234333))))
(assert
 (forall (($ly@@11 T@U) (this@@147 T@U) )(! (let ((?x153839 (PivotBetree.Path.Target $ly@@11 this@@147)))
 (let ((?x9982 ($LS $ly@@11)))
 (let ((?x155899 (PivotBetree.Path.Target ?x9982 this@@147)))
 (let (($x155895 (= ?x155899 ?x153839)))
 (let ((?x63 (type this@@147)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type $ly@@11)))
 (let (($x9979 (= ?x176 LayerTypeType)))
 (let (($x117390 (and $x9979 $x5613)))
 (=> $x117390 $x155895)))))))))) :pattern ( (PivotBetree.Path.Target ($LS $ly@@11) this@@147) ) :qid PivotBetreeidfy.480:14))
 )
(assert
 (let (($x231623 (forall ((this@@145 T@U) ($ly@@9 T@U) )(! (let ((?x154529 (PivotBetree.Path.Subpath this@@145)))
 (let (($x153005 (PivotBetree.Path.Valid $ly@@9 ?x154529)))
 (let ((?x154261 (PivotBetree.Path.depth this@@145)))
 (let (($x178788 (INTERNAL_lt_boogie 0 ?x154261)))
 (let ((?x155475 (PivotBetree.Path.node this@@145)))
 (let (($x154081 (PivotBetree.BetreeNode.IsIndex ?x155475)))
 (let (($x219024 (=> $x178788 $x154081)))
 (let ((?x154167 (PivotBetree.Path.key this@@145)))
 (let (($x155353 (PivotBetree.BetreeNode.KeyInDomain ?x155475 ?x154167)))
 (let ((?x10306 ($LS $LZ)))
 (let (($x154567 (PivotBetree.BetreeNode.WF ?x10306 ?x155475)))
 (let ((?x5834 ($LS $ly@@9)))
 (let (($x154295 (PivotBetree.Path.Valid ?x5834 this@@145)))
 (let (($x208070 (|PivotBetree.Path.Subpath#canCall| this@@145)))
 (let (($x153247 (and $x208070 (|PivotBetree.Path.Valid#canCall| ?x154529))))
 (let (($x154027 (PivotBetree.Path.Path_q this@@145)))
 (let (($x153487 (and $x154027 (=> $x178788 (and $x154027 (|PivotBetree.BetreeNode.IsIndex#canCall| ?x155475))))))
 (let (($x154941 (|PivotBetree.BetreeNode.KeyInDomain#canCall| ?x155475 ?x154167)))
 (let (($x178720 (and $x154027 $x154027)))
 (let (($x153289 (and (and $x178720 $x154941) (=> $x155353 (and $x153487 (=> $x219024 (and $x154027 (=> $x178788 $x153247))))))))
 (let (($x155303 (and (and (and $x154027 (|PivotBetree.BetreeNode.WF#canCall| ?x155475)) (=> $x154567 $x153289)) (= $x154295 (and (and (and $x154567 $x155353) $x219024) (=> $x178788 $x153005))))))
 (let (($x207855 ($Is this@@145 Tclass.PivotBetree.Path)))
 (let (($x215610 (not (= 58 $FunctionContextHeight))))
 (let (($x154085 (|PivotBetree.Path.Valid#canCall| this@@145)))
 (let ((?x176 (type this@@145)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let ((?x63 (type $ly@@9)))
 (let (($x5829 (= ?x63 LayerTypeType)))
 (let (($x117381 (and $x5829 $x9722)))
 (=> (and $x117381 (or $x154085 (and $x215610 $x207855))) $x155303)))))))))))))))))))))))))))))) :pattern ( (PivotBetree.Path.Valid ($LS $ly@@9) this@@145) ) :qid PivotBetreeidfy.471:15!2851))
 ))
 (let (($x155935 (<= 58 $FunctionContextHeight)))
 (=> $x155935 $x231623))))
(assert
 (let (($x150029 (forall (($ly@@15 T@U) (this@@151 T@U) )(! (let ((?x155081 (PivotBetree.Path.node this@@151)))
 (let ((?x155105 (PivotBetree.Path.depth this@@151)))
 (let ((?x10057 (LitInt 0)))
 (let (($x153395 (= ?x10057 ?x155105)))
 (let ((?x153383 (ite $x153395 ?x155081 (PivotBetree.Path.Target $ly@@15 (PivotBetree.Path.Subpath this@@151)))))
 (let ((?x9982 ($LS $ly@@15)))
 (let ((?x155899 (PivotBetree.Path.Target ?x9982 this@@151)))
 (let (($x153703 (= ?x155899 ?x153383)))
 (let (($x155225 (|PivotBetree.Path.Subpath#canCall| this@@151)))
 (let (($x153419 (and $x155225 (|PivotBetree.Path.Target#canCall| (PivotBetree.Path.Subpath this@@151)))))
 (let (($x153415 (not $x153395)))
 (let (($x205130 (PivotBetree.Path.Path_q this@@151)))
 (let ((?x10306 ($LS $LZ)))
 (let (($x153321 (PivotBetree.Path.Valid ?x10306 this@@151)))
 (let (($x155307 ($Is this@@151 Tclass.PivotBetree.Path)))
 (let (($x153165 (not (= 59 $FunctionContextHeight))))
 (let (($x153341 (|PivotBetree.Path.Target#canCall| this@@151)))
 (let ((?x63 (type this@@151)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type $ly@@15)))
 (let (($x9979 (= ?x176 LayerTypeType)))
 (let (($x117390 (and $x9979 $x5613)))
 (=> (and $x117390 (or $x153341 (and $x153165 (and $x155307 $x153321)))) (and (and (and $x205130 (=> $x153395 $x205130)) (=> $x153415 $x153419)) $x153703)))))))))))))))))))))))) :pattern ( (PivotBetree.Path.Target ($LS $ly@@15) this@@151) ) :qid PivotBetreeidfy.480:14!2905))
 ))
 (let (($x153177 (<= 59 $FunctionContextHeight)))
 (=> $x153177 $x150029))))
(assert
 (forall ((|a#8#0#0@@3| T@U) (|a#8#1#0@@3| T@U) (|a#8#2#0@@0| Int) )(! (let (($x219638 (= (PivotBetree.Path.depth (|#PivotBetree.Path.Path| |a#8#0#0@@3| |a#8#1#0@@3| |a#8#2#0@@0|)) |a#8#2#0@@0|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x176 (type |a#8#1#0@@3|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let ((?x174 (type |a#8#0#0@@3|)))
 (let (($x9705 (= ?x174 DatatypeTypeType)))
 (let (($x119750 (and $x9705 $x5299)))
 (=> $x119750 $x219638)))))))) :pattern ( (|#PivotBetree.Path.Path| |a#8#0#0@@3| |a#8#1#0@@3| |a#8#2#0@@0|) ) :qid PivotBetreeidfy.462:24!2767))
 )
(assert
 (forall ((arg0@@427 T@U) )(! (= (type (PivotBetree.Path.Subpath arg0@@427)) DatatypeTypeType) :pattern ( (PivotBetree.Path.Subpath arg0@@427) ) :qid funType:PivotBetree.Path.Subpath))
 )
(assert
 (let (($x178740 (forall ((this@@137 T@U) )(! (let ((?x225735 (PivotBetree.Path.Subpath this@@137)))
 (let (($x139394 ($Is ?x225735 Tclass.PivotBetree.Path)))
 (let ((?x154153 (PivotBetree.Path.key this@@137)))
 (let ((?x155081 (PivotBetree.Path.node this@@137)))
 (let (($x178834 (PivotBetree.BetreeNode.KeyInDomain ?x155081 ?x154153)))
 (let ((?x155105 (PivotBetree.Path.depth this@@137)))
 (let (($x222869 (INTERNAL_lt_boogie 0 ?x155105)))
 (let (($x223639 (and $x222869 $x178834)))
 (let (($x155307 ($Is this@@137 Tclass.PivotBetree.Path)))
 (let (($x154021 (not (= 57 $FunctionContextHeight))))
 (let (($x155225 (|PivotBetree.Path.Subpath#canCall| this@@137)))
 (let ((?x63 (type this@@137)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x218736 (and $x5613 (or $x155225 (and $x154021 (and $x155307 $x223639))))))
 (=> $x218736 $x139394))))))))))))))) :pattern ( (PivotBetree.Path.Subpath this@@137) ) :qid PivotBetreeidfy.464:14))
 ))
 (let (($x153017 (<= 57 $FunctionContextHeight)))
 (=> $x153017 $x178740))))
(assert
 (let (($x210043 (forall ((this@@139 T@U) )(! (let ((?x154153 (PivotBetree.Path.key this@@139)))
 (let ((?x155809 (|#PivotBetree.Path.Path| (PivotBetree.BetreeNode.Child (PivotBetree.Path.node this@@139) ?x154153) ?x154153 (INTERNAL_sub_boogie (PivotBetree.Path.depth this@@139) 1))))
 (let ((?x225735 (PivotBetree.Path.Subpath this@@139)))
 (let (($x155527 (= ?x225735 ?x155809)))
 (let (($x205130 (PivotBetree.Path.Path_q this@@139)))
 (let ((?x155081 (PivotBetree.Path.node this@@139)))
 (let (($x154073 (|PivotBetree.BetreeNode.Child#canCall| ?x155081 ?x154153)))
 (let (($x155255 (and $x205130 $x205130)))
 (let (($x178834 (PivotBetree.BetreeNode.KeyInDomain ?x155081 ?x154153)))
 (let ((?x155105 (PivotBetree.Path.depth this@@139)))
 (let (($x222869 (INTERNAL_lt_boogie 0 ?x155105)))
 (let (($x223639 (and $x222869 $x178834)))
 (let (($x155307 ($Is this@@139 Tclass.PivotBetree.Path)))
 (let (($x154021 (not (= 57 $FunctionContextHeight))))
 (let (($x155225 (|PivotBetree.Path.Subpath#canCall| this@@139)))
 (let ((?x63 (type this@@139)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x218736 (and $x5613 (or $x155225 (and $x154021 (and $x155307 $x223639))))))
 (=> $x218736 (and (and (and (and $x155255 $x154073) $x205130) $x205130) $x155527)))))))))))))))))))) :pattern ( (PivotBetree.Path.Subpath this@@139) ) :qid PivotBetreeidfy.464:14!2807))
 ))
 (let (($x153017 (<= 57 $FunctionContextHeight)))
 (=> $x153017 $x210043))))
(assert
 (forall (($ly@@5 T@U) (this@@141 T@U) )(! (let (($x218203 (PivotBetree.Path.Valid $ly@@5 this@@141)))
 (let ((?x9982 ($LS $ly@@5)))
 (let (($x154589 (PivotBetree.Path.Valid ?x9982 this@@141)))
 (let (($x155013 (= $x154589 $x218203)))
 (let ((?x63 (type this@@141)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type $ly@@5)))
 (let (($x9979 (= ?x176 LayerTypeType)))
 (let (($x117390 (and $x9979 $x5613)))
 (=> $x117390 $x155013)))))))))) :pattern ( (PivotBetree.Path.Valid ($LS $ly@@5) this@@141) ) :qid PivotBetreeidfy.471:15))
 )
(assert
 (forall ((|a#5#0#0@@3| T@U) (|a#5#1#0@@3| T@U) (|a#5#2#0@@0| Int) )(! (let (($x153643 (= (PivotBetree.Path.node (|#PivotBetree.Path.Path| |a#5#0#0@@3| |a#5#1#0@@3| |a#5#2#0@@0|)) |a#5#0#0@@3|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x176 (type |a#5#1#0@@3|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let ((?x174 (type |a#5#0#0@@3|)))
 (let (($x9705 (= ?x174 DatatypeTypeType)))
 (let (($x119750 (and $x9705 $x5299)))
 (=> $x119750 $x153643)))))))) :pattern ( (|#PivotBetree.Path.Path| |a#5#0#0@@3| |a#5#1#0@@3| |a#5#2#0@@0|) ) :qid PivotBetreeidfy.462:24!2754))
 )
(assert
 (forall ((|a#2#1#0@@3| T@U) (|a#2#2#0@@0| Int) (|a#2#0#0@@3| T@U) )(! (let ((?x112180 (int_2_U |a#2#2#0@@0|)))
 (let (($x153511 ($Is ?x112180 Tclass._System.nat)))
 (let (($x118748 ($Is |a#2#1#0@@3| Tclass.KeyType.Key)))
 (let (($x229968 ($Is |a#2#0#0@@3| Tclass.PivotBetree.BetreeNode)))
 (let ((?x153295 (|#PivotBetree.Path.Path| |a#2#0#0@@3| |a#2#1#0@@3| |a#2#2#0@@0|)))
 (let (($x178866 ($Is ?x153295 Tclass.PivotBetree.Path)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x174 (type |a#2#1#0@@3|)))
 (let (($x5357 (= ?x174 ?x5070)))
 (let ((?x63 (type |a#2#0#0@@3|)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x230110 (and $x5613 $x5357)))
 (=> $x230110 (= $x178866 (and (and $x229968 $x118748) $x153511))))))))))))))) :pattern ( ($Is (|#PivotBetree.Path.Path| |a#2#0#0@@3| |a#2#1#0@@3| |a#2#2#0@@0|) Tclass.PivotBetree.Path) ) :qid PivotBetreeidfy.462:24!2718))
 )
(assert
 (forall ((d@@63 T@U) )(! (let (($x232945 (exists ((|a#1#1#0@@3| T@U) (|a#1#2#0@@0| Int) (|a#1#0#0@@3| T@U) )(! (let ((?x153295 (|#PivotBetree.Path.Path| |a#1#0#0@@3| |a#1#1#0@@3| |a#1#2#0@@0|)))
 (let (($x153489 (= d@@63 ?x153295)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x174 (type |a#1#1#0@@3|)))
 (let (($x5357 (= ?x174 ?x5070)))
 (let ((?x63 (type |a#1#0#0@@3|)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x230110 (and $x5613 $x5357)))
 (and $x230110 $x153489))))))))) :qid PivotBetreeidfy.462:24!2702))
 ))
 (let (($x205130 (PivotBetree.Path.Path_q d@@63)))
 (let ((?x63 (type d@@63)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x153299 (and $x5613 $x205130)))
 (=> $x153299 $x232945)))))) :pattern ( (PivotBetree.Path.Path_q d@@63) ) :qid unknown.0:0!2704))
 )
(assert
 (let (($x234687 (forall ((|key#0@@6| T@U) (this@@91 T@U) )(! (let ((?x212507 (PivotBetree.BetreeNode.pivotTable this@@91)))
 (let ((?x230168 (PivotBetree.BetreeNode.children this@@91)))
 (let ((?x225822 ($Unbox DatatypeTypeType (|Seq#Index| ?x230168 (BoundedPivotsLib.__default.Route ?x212507 |key#0@@6|)))))
 (let ((?x225835 (PivotBetree.BetreeNode.Child this@@91 |key#0@@6|)))
 (let (($x225830 (and (|BoundedPivotsLib.__default.Route#canCall| ?x212507 |key#0@@6|) (= ?x225835 ?x225822))))
 (let (($x225873 (PivotBetree.BetreeNode.KeyInDomain this@@91 |key#0@@6|)))
 (let (($x230355 (PivotBetree.BetreeNode.BetreeNode_q this@@91)))
 (let ((?x10306 ($LS $LZ)))
 (let (($x227942 (PivotBetree.BetreeNode.WF ?x10306 this@@91)))
 (let (($x210047 (and $x227942 $x230355)))
 (let (($x116879 ($Is |key#0@@6| Tclass.KeyType.Key)))
 (let (($x229968 ($Is this@@91 Tclass.PivotBetree.BetreeNode)))
 (let (($x225871 (and $x229968 $x116879)))
 (let (($x214538 (not (= 40 $FunctionContextHeight))))
 (let (($x138844 (|PivotBetree.BetreeNode.Child#canCall| this@@91 |key#0@@6|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x176 (type |key#0@@6|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let ((?x63 (type this@@91)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x117762 (and $x5613 $x5299)))
 (=> (and $x117762 (or $x138844 (and $x214538 (and $x225871 (and $x210047 $x225873))))) $x225830)))))))))))))))))))))) :pattern ( (PivotBetree.BetreeNode.Child this@@91 |key#0@@6|) ) :qid PivotBetreeidfy.286:14!1763))
 ))
 (let (($x225900 (<= 40 $FunctionContextHeight)))
 (=> $x225900 $x234687))))
(assert
 (let (($x291222 (forall ((this@@83 T@U) (|key#0@@1| T@U) )(! (let ((?x230181 (PivotBetree.BetreeNode.pivotTable this@@83)))
 (let (($x217353 (BoundedPivotsLib.__default.BoundedKey ?x230181 |key#0@@1|)))
 (let (($x230231 (PivotBetree.BetreeNode.BetreeNode_q this@@83)))
 (let ((?x10306 ($LS $LZ)))
 (let (($x221586 (PivotBetree.BetreeNode.WF ?x10306 this@@83)))
 (let (($x229034 (and $x221586 $x230231)))
 (let (($x226013 (PivotBetree.BetreeNode.KeyInDomain this@@83 |key#0@@1|)))
 (let (($x217357 (=> (and $x221586 $x230231) (|BoundedPivotsLib.__default.BoundedKey#canCall| ?x230181 |key#0@@1|))))
 (let (($x216237 (|PivotBetree.BetreeNode.WF#canCall| this@@83)))
 (let (($x117424 ($Is |key#0@@1| Tclass.KeyType.Key)))
 (let (($x212224 ($Is this@@83 Tclass.PivotBetree.BetreeNode)))
 (let (($x228600 (and $x212224 $x117424)))
 (let (($x226026 (and (not (= 38 $FunctionContextHeight)) $x228600)))
 (let (($x210142 (|PivotBetree.BetreeNode.KeyInDomain#canCall| this@@83 |key#0@@1|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |key#0@@1|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type this@@83)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x117741 (and $x9722 $x7226)))
 (let (($x216607 (and $x117741 (or $x210142 $x226026))))
 (=> $x216607 (and (and $x216237 $x217357) (= $x226013 (and $x229034 $x217353))))))))))))))))))))))))) :pattern ( (PivotBetree.BetreeNode.KeyInDomain this@@83 |key#0@@1|) ) :qid PivotBetreeidfy.271:15!1660))
 ))
 (let (($x216605 (<= 38 $FunctionContextHeight)))
 (=> $x216605 $x291222))))
(assert
 (forall ((arg0@@407 T@U) (arg1@@162 T@U) )(! (= (type (PivotBetree.BetreeNode.Child arg0@@407 arg1@@162)) DatatypeTypeType) :pattern ( (PivotBetree.BetreeNode.Child arg0@@407 arg1@@162) ) :qid funType:PivotBetree.BetreeNode.Child))
 )
(assert
 (let (($x226609 (forall ((this@@59 T@U) )(! (let ((?x212507 (PivotBetree.BetreeNode.pivotTable this@@59)))
 (let ((?x226577 (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element ?x212507)))
 (let ((?x226608 (|#DomainMod.Domain.Domain| ($Unbox DatatypeTypeType (|Seq#Index| ?x212507 (LitInt 0))) ($Unbox DatatypeTypeType ?x226577))))
 (let ((?x217823 (PivotBetree.BetreeNode.MyDomain this@@59)))
 (let (($x220273 (|Sequences.__default.Last#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element ?x212507)))
 (let (($x226567 (and $x220273 (= ?x217823 ?x226608))))
 (let (($x230355 (PivotBetree.BetreeNode.BetreeNode_q this@@59)))
 (let (($x229945 (PivotBetree.BetreeNode.LocalStructure this@@59)))
 (let (($x226648 (and $x229945 $x230355)))
 (let (($x229968 ($Is this@@59 Tclass.PivotBetree.BetreeNode)))
 (let (($x117834 (not (= 16 $FunctionContextHeight))))
 (let (($x227367 (|PivotBetree.BetreeNode.MyDomain#canCall| this@@59)))
 (let ((?x63 (type this@@59)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x220473 (and $x5613 (or $x227367 (and $x117834 (and $x229968 $x226648))))))
 (=> $x220473 $x226567)))))))))))))))) :pattern ( (PivotBetree.BetreeNode.MyDomain this@@59) ) :qid PivotBetreeidfy.223:14!1438))
 ))
 (let (($x117831 (<= 16 $FunctionContextHeight)))
 (=> $x117831 $x226609))))
(assert
 (let (($x294039 (forall ((this@@63 T@U) (|childIdx#0@@5| Int) )(! (let ((?x119190 (INTERNAL_add_boogie |childIdx#0@@5| 1)))
 (let ((?x230181 (PivotBetree.BetreeNode.pivotTable this@@63)))
 (let ((?x211246 ($Unbox DatatypeTypeType (|Seq#Index| ?x230181 |childIdx#0@@5|))))
 (let ((?x226525 (|#DomainMod.Domain.Domain| ?x211246 ($Unbox DatatypeTypeType (|Seq#Index| ?x230181 ?x119190)))))
 (let ((?x229631 (PivotBetree.BetreeNode.DomainRoutedToChild this@@63 |childIdx#0@@5|)))
 (let (($x226513 (= ?x229631 ?x226525)))
 (let (($x215035 (PivotBetree.BetreeNode.ValidChildIndex this@@63 |childIdx#0@@5|)))
 (let (($x230231 (PivotBetree.BetreeNode.BetreeNode_q this@@63)))
 (let (($x225711 (PivotBetree.BetreeNode.LocalStructure this@@63)))
 (let (($x226550 (and (and $x225711 $x230231) $x215035)))
 (let (($x9901 (INTERNAL_le_boogie 0 |childIdx#0@@5|)))
 (let (($x212224 ($Is this@@63 Tclass.PivotBetree.BetreeNode)))
 (let (($x229793 (and $x212224 $x9901)))
 (let (($x226559 (not (= 17 $FunctionContextHeight))))
 (let (($x221050 (|PivotBetree.BetreeNode.DomainRoutedToChild#canCall| this@@63 |childIdx#0@@5|)))
 (let ((?x176 (type this@@63)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x226546 (and $x9722 (or $x221050 (and $x226559 (and $x229793 $x226550))))))
 (=> $x226546 $x226513))))))))))))))))))) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild this@@63 |childIdx#0@@5|) ) :qid PivotBetreeidfy.230:14!1483))
 ))
 (let (($x226574 (<= 17 $FunctionContextHeight)))
 (=> $x226574 $x294039))))
(assert
 (let (($x231413 (forall ((this@@27 T@U) )(! (let (($x228691 (forall ((|i#0@@1| Int) )(! (let ((?x230151 (PivotBetree.BetreeNode.children this@@27)))
 (let ((?x229594 (|Seq#Index| ?x230151 |i#0@@1|)))
 (let ((?x229584 ($Unbox DatatypeTypeType ?x229594)))
 (let (($x229572 (PivotBetree.BetreeNode.BetreeNode_q ?x229584)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@1|)))
 (let (($x228715 (and $x9901 (INTERNAL_lt_boogie |i#0@@1| (|Seq#Length| ?x230151)))))
 (=> $x228715 $x229572))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children this@@27) |i#0@@1|)) ) :qid PivotBetreeidfy.99:18))
 ))
 (let (($x230355 (PivotBetree.BetreeNode.BetreeNode_q this@@27)))
 (let (($x228725 (PivotBetree.BetreeNode.IsIndex this@@27)))
 (let (($x229968 ($Is this@@27 Tclass.PivotBetree.BetreeNode)))
 (let (($x228745 (and (not (= 24 $FunctionContextHeight)) $x229968)))
 (let (($x228747 (|PivotBetree.BetreeNode.IsIndex#canCall| this@@27)))
 (let ((?x63 (type this@@27)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x228740 (and $x5613 (or $x228747 $x228745))))
 (=> $x228740 (= $x228725 (and $x230355 $x228691)))))))))))) :pattern ( (PivotBetree.BetreeNode.IsIndex this@@27) ) :qid PivotBetreeidfy.96:15!841))
 ))
 (let (($x118649 (<= 24 $FunctionContextHeight)))
 (=> $x118649 $x231413))))
(assert
 (let (($x233787 (forall (($ly@@3 T@U) (this@@15 T@U) )(! (let (($x229632 (PivotBetree.BetreeNode.LinkedChildren this@@15)))
 (let ((?x230168 (PivotBetree.BetreeNode.children this@@15)))
 (let (($x229261 (PivotBetree.__default.WFChildren $ly@@3 ?x230168)))
 (let (($x214951 (and $x229261 $x229632)))
 (let (($x230355 (PivotBetree.BetreeNode.BetreeNode_q this@@15)))
 (let (($x229945 (PivotBetree.BetreeNode.LocalStructure this@@15)))
 (let ((?x9982 ($LS $ly@@3)))
 (let (($x229352 (PivotBetree.BetreeNode.WF ?x9982 this@@15)))
 (let (($x217845 (|PivotBetree.__default.WFChildren#canCall| ?x230168)))
 (let (($x229256 (=> $x230355 (and $x217845 (=> $x229261 (|PivotBetree.BetreeNode.LinkedChildren#canCall| this@@15))))))
 (let (($x229935 (|PivotBetree.BetreeNode.LocalStructure#canCall| this@@15)))
 (let (($x229968 ($Is this@@15 Tclass.PivotBetree.BetreeNode)))
 (let (($x229049 (not (= 19 $FunctionContextHeight))))
 (let (($x229284 (and $x229049 $x229968)))
 (let (($x229310 (|PivotBetree.BetreeNode.WF#canCall| this@@15)))
 (let ((?x63 (type this@@15)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type $ly@@3)))
 (let (($x9979 (= ?x176 LayerTypeType)))
 (let (($x117390 (and $x9979 $x5613)))
 (let (($x229293 (and $x117390 (or $x229310 $x229284))))
 (=> $x229293 (and (and $x229935 (=> (and $x229945 $x230355) (and $x217845 (=> $x229261 (|PivotBetree.BetreeNode.LinkedChildren#canCall| this@@15))))) (= $x229352 (and $x229945 (=> $x230355 $x214951)))))))))))))))))))))))))) :pattern ( (PivotBetree.BetreeNode.WF ($LS $ly@@3) this@@15) ) :qid PivotBetreeidfy.73:15!731))
 ))
 (let (($x228304 (<= 19 $FunctionContextHeight)))
 (=> $x228304 $x233787))))
(assert
 (let ((?x9994 (type $LZ)))
 (let (($x9995 (= ?x9994 LayerTypeType)))
 (let (($x211945 (forall ((arg0@@377 T@U) )(! (= (type (AsFuelBottom arg0@@377)) LayerTypeType) :pattern ( (AsFuelBottom arg0@@377) ) :qid funType:AsFuelBottom))
 ))
 (and $x211945 $x9995)))))
(assert
 (let (($x155299 (forall ((this@@9 T@U) )(! (let (($x239551 (forall ((|i#0@@0| Int) )(! (let ((?x229631 (PivotBetree.BetreeNode.DomainRoutedToChild this@@9 |i#0@@0|)))
 (let ((?x230151 (PivotBetree.BetreeNode.children this@@9)))
 (let ((?x229594 (|Seq#Index| ?x230151 |i#0@@0|)))
 (let ((?x229584 ($Unbox DatatypeTypeType ?x229594)))
 (let ((?x229519 (PivotBetree.BetreeNode.MyDomain ?x229584)))
 (let (($x229501 (|DomainMod.Domain#Equal| ?x229519 ?x229631)))
 (let (($x221240 (PivotBetree.BetreeNode.LocalStructure ?x229584)))
 (let (($x229572 (PivotBetree.BetreeNode.BetreeNode_q ?x229584)))
 (let (($x215035 (PivotBetree.BetreeNode.ValidChildIndex this@@9 |i#0@@0|)))
 (let (($x229554 (and (and $x215035 $x229572) $x221240)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@0|)))
 (=> (and $x9901 $x229554) $x229501)))))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children this@@9) |i#0@@0|)) ) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild this@@9 |i#0@@0|) ) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex this@@9 |i#0@@0|) ) :qid PivotBetreeidfy.66:17!679))
 ))
 (let (($x230355 (PivotBetree.BetreeNode.BetreeNode_q this@@9)))
 (let (($x229632 (PivotBetree.BetreeNode.LinkedChildren this@@9)))
 (let (($x214548 (forall ((|i#0| Int) )(! (let (($x221050 (|PivotBetree.BetreeNode.DomainRoutedToChild#canCall| this@@9 |i#0|)))
 (let ((?x230151 (PivotBetree.BetreeNode.children this@@9)))
 (let ((?x229594 (|Seq#Index| ?x230151 |i#0|)))
 (let ((?x229584 ($Unbox DatatypeTypeType ?x229594)))
 (let (($x221052 (|PivotBetree.BetreeNode.MyDomain#canCall| ?x229584)))
 (let ((?x229631 (PivotBetree.BetreeNode.DomainRoutedToChild this@@9 |i#0|)))
 (let (($x229530 (|$IsA#DomainMod.Domain| ?x229631)))
 (let ((?x229519 (PivotBetree.BetreeNode.MyDomain ?x229584)))
 (let (($x221045 (|$IsA#DomainMod.Domain| ?x229519)))
 (let (($x221240 (PivotBetree.BetreeNode.LocalStructure ?x229584)))
 (let (($x229572 (PivotBetree.BetreeNode.BetreeNode_q ?x229584)))
 (let (($x215035 (PivotBetree.BetreeNode.ValidChildIndex this@@9 |i#0|)))
 (let (($x229554 (and (and $x215035 $x229572) $x221240)))
 (let (($x229718 (|PivotBetree.BetreeNode.ValidChildIndex#canCall| this@@9 |i#0|)))
 (let (($x229566 (and $x229718 (=> (and $x215035 $x229572) (|PivotBetree.BetreeNode.LocalStructure#canCall| ?x229584)))))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0|)))
 (=> $x9901 (and $x229566 (=> $x229554 (and (and $x221045 $x229530) (and $x221052 $x221050))))))))))))))))))))) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild this@@9 |i#0|) ) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children this@@9) |i#0|)) ) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex this@@9 |i#0|) ) :qid PivotBetreeidfy.66:17))
 ))
 (let (($x229945 (PivotBetree.BetreeNode.LocalStructure this@@9)))
 (let (($x229968 ($Is this@@9 Tclass.PivotBetree.BetreeNode)))
 (let (($x229655 (not (= 18 $FunctionContextHeight))))
 (let (($x229659 (|PivotBetree.BetreeNode.LinkedChildren#canCall| this@@9)))
 (let ((?x63 (type this@@9)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x229716 (and $x5613 (or $x229659 (and $x229655 (and $x229968 $x229945))))))
 (=> $x229716 (and (=> $x230355 $x214548) (= $x229632 (=> $x230355 $x239551))))))))))))))) :pattern ( (PivotBetree.BetreeNode.LinkedChildren this@@9) ) :qid PivotBetreeidfy.62:15!682))
 ))
 (let (($x229662 (<= 18 $FunctionContextHeight)))
 (=> $x229662 $x155299))))
(assert
 (forall (($ly T@U) (this@@11 T@U) )(! (let (($x229357 (PivotBetree.BetreeNode.WF $ly this@@11)))
 (let ((?x9982 ($LS $ly)))
 (let (($x229352 (PivotBetree.BetreeNode.WF ?x9982 this@@11)))
 (let (($x221273 (= $x229352 $x229357)))
 (let ((?x63 (type this@@11)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type $ly)))
 (let (($x9979 (= ?x176 LayerTypeType)))
 (let (($x117390 (and $x9979 $x5613)))
 (=> $x117390 $x221273)))))))))) :pattern ( (PivotBetree.BetreeNode.WF ($LS $ly) this@@11) ) :qid PivotBetreeidfy.73:15))
 )
(assert
 (let (($x229633 (forall ((arg0@@376 T@U) )(! (= (type (PivotBetree.BetreeNode.MyDomain arg0@@376)) DatatypeTypeType) :pattern ( (PivotBetree.BetreeNode.MyDomain arg0@@376) ) :qid funType:PivotBetree.BetreeNode.MyDomain))
 ))
 (let (($x229601 (forall ((arg0@@375 T@U) (arg1@@146 Int) )(! (= (type (PivotBetree.BetreeNode.DomainRoutedToChild arg0@@375 arg1@@146)) DatatypeTypeType) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild arg0@@375 arg1@@146) ) :qid funType:PivotBetree.BetreeNode.DomainRoutedToChild))
 ))
 (and $x229601 $x229633))))
(assert
 (let (($x238113 (forall ((this@@5 T@U) (|childIdx#0@@1| Int) )(! (let ((?x230181 (PivotBetree.BetreeNode.pivotTable this@@5)))
 (let (($x230231 (PivotBetree.BetreeNode.BetreeNode_q this@@5)))
 (let (($x215021 (and $x230231 (INTERNAL_lt_boogie |childIdx#0@@1| (BoundedPivotsLib.__default.NumBuckets ?x230181)))))
 (let (($x215035 (PivotBetree.BetreeNode.ValidChildIndex this@@5 |childIdx#0@@1|)))
 (let (($x215018 (= $x215035 $x215021)))
 (let (($x9901 (INTERNAL_le_boogie 0 |childIdx#0@@1|)))
 (let (($x212224 ($Is this@@5 Tclass.PivotBetree.BetreeNode)))
 (let (($x229793 (and $x212224 $x9901)))
 (let (($x212249 (and (not (= 13 $FunctionContextHeight)) $x229793)))
 (let (($x229718 (|PivotBetree.BetreeNode.ValidChildIndex#canCall| this@@5 |childIdx#0@@1|)))
 (let ((?x176 (type this@@5)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x215041 (and $x9722 (or $x229718 $x212249))))
 (=> $x215041 (and (=> $x230231 (|BoundedPivotsLib.__default.NumBuckets#canCall| ?x230181)) $x215018))))))))))))))) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex this@@5 |childIdx#0@@1|) ) :qid PivotBetreeidfy.56:15!637))
 ))
 (let (($x121412 (<= 13 $FunctionContextHeight)))
 (=> $x121412 $x238113))))
(assert
 (let (($x235967 (forall ((this@@1 T@U) )(! (let ((?x212507 (PivotBetree.BetreeNode.pivotTable this@@1)))
 (let ((?x230168 (PivotBetree.BetreeNode.children this@@1)))
 (let ((?x229871 (|Seq#Length| ?x230168)))
 (let (($x229868 (BoundedPivotsLib.__default.WFPivots ?x212507)))
 (let (($x229848 (and $x229868 (= ?x229871 (BoundedPivotsLib.__default.NumBuckets ?x212507)))))
 (let (($x230355 (PivotBetree.BetreeNode.BetreeNode_q this@@1)))
 (let (($x229945 (PivotBetree.BetreeNode.LocalStructure this@@1)))
 (let (($x229901 (|BoundedPivotsLib.__default.WFPivots#canCall| ?x212507)))
 (let (($x229886 (=> $x230355 (and $x229901 (=> $x229868 (|BoundedPivotsLib.__default.NumBuckets#canCall| ?x212507))))))
 (let (($x117698 (U_2_bool (Lit (bool_2_U true)))))
 (let (($x229968 ($Is this@@1 Tclass.PivotBetree.BetreeNode)))
 (let (($x229910 (and (not (= 14 $FunctionContextHeight)) $x229968)))
 (let (($x229935 (|PivotBetree.BetreeNode.LocalStructure#canCall| this@@1)))
 (let ((?x63 (type this@@1)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x229928 (and $x5613 (or $x229935 $x229910))))
 (=> $x229928 (and (=> (and $x117698 $x230355) (and $x229901 (=> $x229868 (|BoundedPivotsLib.__default.NumBuckets#canCall| ?x212507)))) (= $x229945 (and true (=> $x230355 $x229848))))))))))))))))))))) :pattern ( (PivotBetree.BetreeNode.LocalStructure this@@1) ) :qid PivotBetreeidfy.48:15!605))
 ))
 (let (($x229929 (<= 14 $FunctionContextHeight)))
 (=> $x229929 $x235967))))
(assert
 (forall ((|a#71#2#0| T@U) (|a#71#0#0| T@U) (|a#71#1#0| T@U) )(! (let ((?x224028 (|#PivotBetree.BetreeNode.BetreeNode| |a#71#0#0| |a#71#1#0| |a#71#2#0|)))
 (let (($x230077 (= (PivotBetree.BetreeNode.children ?x224028) |a#71#2#0|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x174 (type |a#71#2#0|)))
 (let (($x5357 (= ?x174 ?x5070)))
 (let ((?x63 (type |a#71#1#0|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type |a#71#0#0|)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x117741 (and $x9722 $x7226)))
 (let (($x119784 (and $x117741 $x5357)))
 (=> $x119784 $x230077)))))))))))) :pattern ( (|#PivotBetree.BetreeNode.BetreeNode| |a#71#0#0| |a#71#1#0| |a#71#2#0|) ) :qid PivotBetreeidfy.44:5!540))
 )
(assert
 (forall ((|a#66#0#0| T@U) (|a#66#1#0| T@U) (|a#66#2#0| T@U) )(! (let ((?x230380 (|#PivotBetree.BetreeNode.BetreeNode| |a#66#0#0| |a#66#1#0| |a#66#2#0|)))
 (let (($x229637 (= (PivotBetree.BetreeNode.buffers ?x230380) |a#66#0#0|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |a#66#2#0|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type |a#66#1#0|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let ((?x174 (type |a#66#0#0|)))
 (let (($x9705 (= ?x174 DatatypeTypeType)))
 (let (($x119750 (and $x9705 $x5299)))
 (let (($x119751 (and $x119750 $x7226)))
 (=> $x119751 $x229637)))))))))))) :pattern ( (|#PivotBetree.BetreeNode.BetreeNode| |a#66#0#0| |a#66#1#0| |a#66#2#0|) ) :qid PivotBetreeidfy.44:5!506))
 )
(assert
 (forall ((|a#68#0#0| T@U) (|a#68#1#0| T@U) (|a#68#2#0| T@U) )(! (let ((?x230380 (|#PivotBetree.BetreeNode.BetreeNode| |a#68#0#0| |a#68#1#0| |a#68#2#0|)))
 (let (($x230068 (= (PivotBetree.BetreeNode.pivotTable ?x230380) |a#68#1#0|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |a#68#2#0|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type |a#68#1#0|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let ((?x174 (type |a#68#0#0|)))
 (let (($x9705 (= ?x174 DatatypeTypeType)))
 (let (($x119750 (and $x9705 $x5299)))
 (let (($x119751 (and $x119750 $x7226)))
 (=> $x119751 $x230068)))))))))))) :pattern ( (|#PivotBetree.BetreeNode.BetreeNode| |a#68#0#0| |a#68#1#0| |a#68#2#0|) ) :qid PivotBetreeidfy.44:5!520))
 )
(assert
 (forall ((arg0@@373 T@U) )(! (let ((?x5070 (SeqType BoxType)))
 (= (type (PivotBetree.BetreeNode.pivotTable arg0@@373)) ?x5070)) :pattern ( (PivotBetree.BetreeNode.pivotTable arg0@@373) ) :qid funType:PivotBetree.BetreeNode.pivotTable))
 )
(assert
 (forall ((arg0@@374 T@U) )(! (let ((?x5070 (SeqType BoxType)))
 (= (type (PivotBetree.BetreeNode.children arg0@@374)) ?x5070)) :pattern ( (PivotBetree.BetreeNode.children arg0@@374) ) :qid funType:PivotBetree.BetreeNode.children))
 )
(assert
 (forall ((|a#63#0#0| T@U) (|a#63#1#0| T@U) (|a#63#2#0| T@U) )(! (let ((?x230281 (TSeq Tclass.PivotBetree.BetreeNode)))
 (let (($x230279 ($Is |a#63#2#0| ?x230281)))
 (let ((?x212568 (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let (($x148584 ($Is |a#63#1#0| ?x212568)))
 (let (($x133954 ($Is |a#63#0#0| Tclass.Buffers.BufferStack)))
 (let ((?x230380 (|#PivotBetree.BetreeNode.BetreeNode| |a#63#0#0| |a#63#1#0| |a#63#2#0|)))
 (let (($x230242 ($Is ?x230380 Tclass.PivotBetree.BetreeNode)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |a#63#2#0|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type |a#63#1#0|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let ((?x174 (type |a#63#0#0|)))
 (let (($x9705 (= ?x174 DatatypeTypeType)))
 (let (($x119750 (and $x9705 $x5299)))
 (let (($x119751 (and $x119750 $x7226)))
 (=> $x119751 (= $x230242 (and (and $x133954 $x148584) $x230279))))))))))))))))))) :pattern ( ($Is (|#PivotBetree.BetreeNode.BetreeNode| |a#63#0#0| |a#63#1#0| |a#63#2#0|) Tclass.PivotBetree.BetreeNode) ) :qid PivotBetreeidfy.44:5!456))
 )
(assert
 (forall ((bx@@113 T@U) )(! (let ((?x7383 ($Unbox DatatypeTypeType bx@@113)))
 (let (($x9675 (= ($Box ?x7383) bx@@113)))
 (let (($x224602 (and $x9675 ($Is ?x7383 Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))
 (let (($x230288 ($IsBox bx@@113 Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let ((?x63 (type bx@@113)))
 (let (($x4926 (= ?x63 BoxType)))
 (let (($x230300 (and $x4926 $x230288)))
 (=> $x230300 $x224602)))))))) :pattern ( ($IsBox bx@@113 Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ) :qid unknown.0:0!445))
 )
(assert
 (let ((?x230318 (type Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (= ?x230318 TyType)))
(assert
 (forall ((d@@36 T@U) )(! (let (($x230355 (PivotBetree.BetreeNode.BetreeNode_q d@@36)))
 (let (($x224039 (= $x230355 (= (DatatypeCtorId d@@36) |##PivotBetree.BetreeNode.BetreeNode|))))
 (let ((?x63 (type d@@36)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (=> $x5613 $x224039))))) :pattern ( (PivotBetree.BetreeNode.BetreeNode_q d@@36) ) :qid unknown.0:0!423))
 )
(assert
 (forall ((d@@37 T@U) )(! (let (($x237235 (exists ((|a#62#2#0| T@U) (|a#62#0#0| T@U) (|a#62#1#0| T@U) )(! (let ((?x224028 (|#PivotBetree.BetreeNode.BetreeNode| |a#62#0#0| |a#62#1#0| |a#62#2#0|)))
 (let (($x215110 (= d@@37 ?x224028)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x174 (type |a#62#2#0|)))
 (let (($x5357 (= ?x174 ?x5070)))
 (let ((?x63 (type |a#62#1#0|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type |a#62#0#0|)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x117741 (and $x9722 $x7226)))
 (let (($x119784 (and $x117741 $x5357)))
 (and $x119784 $x215110)))))))))))) :qid PivotBetreeidfy.44:5!432))
 ))
 (let (($x230355 (PivotBetree.BetreeNode.BetreeNode_q d@@37)))
 (let ((?x63 (type d@@37)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x230339 (and $x5613 $x230355)))
 (=> $x230339 $x237235)))))) :pattern ( (PivotBetree.BetreeNode.BetreeNode_q d@@37) ) :qid unknown.0:0!433))
 )
(assert
 (forall ((|a#61#0#0| T@U) (|a#61#1#0| T@U) (|a#61#2#0| T@U) )(! (let (($x230321 (= (DatatypeCtorId (|#PivotBetree.BetreeNode.BetreeNode| |a#61#0#0| |a#61#1#0| |a#61#2#0|)) |##PivotBetree.BetreeNode.BetreeNode|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |a#61#2#0|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type |a#61#1#0|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let ((?x174 (type |a#61#0#0|)))
 (let (($x9705 (= ?x174 DatatypeTypeType)))
 (let (($x119750 (and $x9705 $x5299)))
 (let (($x119751 (and $x119750 $x7226)))
 (=> $x119751 $x230321))))))))))) :pattern ( (|#PivotBetree.BetreeNode.BetreeNode| |a#61#0#0| |a#61#1#0| |a#61#2#0|) ) :qid PivotBetreeidfy.44:5))
 )
(assert
 (forall ((bx@@110 T@U) )(! (let (($x9675 (= ($Box ($Unbox DatatypeTypeType bx@@110)) bx@@110)))
 (let (($x215598 (and $x9675 ($Is ($Unbox DatatypeTypeType bx@@110) Tclass.PivotBetree.BetreeNode))))
 (let (($x230813 ($IsBox bx@@110 Tclass.PivotBetree.BetreeNode)))
 (let ((?x63 (type bx@@110)))
 (let (($x4926 (= ?x63 BoxType)))
 (let (($x230817 (and $x4926 $x230813)))
 (=> $x230817 $x215598))))))) :pattern ( ($IsBox bx@@110 Tclass.PivotBetree.BetreeNode) ) :qid unknown.0:0!268))
 )
(assert
 (= (type Tclass.PivotBetree.BetreeNode) TyType))
(assert
 (let (($x111776 (= (type StartFuelAssert_DomainMod.Domain.SaneKeys) LayerTypeType)))
 (let (($x60612 (= (type StartFuelAssert_BoundedPivotsLib._default.CutoffForRight) LayerTypeType)))
 (let (($x61044 (= (type StartFuelAssert_BoundedPivotsLib._default.CutoffForLeft) LayerTypeType)))
 (let ((?x170921 (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt)))
 (let (($x170939 (= ?x170921 LayerTypeType)))
 (let (($x170931 (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)))
 (let ((?x170941 (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximum)))
 (let (($x170953 (= ?x170941 LayerTypeType)))
 (let ((?x170947 (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt)))
 (let (($x170955 (= ?x170947 LayerTypeType)))
 (let (($x170965 (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)))
 (let ((?x170999 (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimum)))
 (let (($x171009 (= ?x170999 LayerTypeType)))
 (let ((?x170993 (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap)))
 (let (($x170991 (= ?x170993 LayerTypeType)))
 (let ((?x59929 (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap)))
 (let (($x59928 (= ?x59929 LayerTypeType)))
 (let ((?x60578 (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum)))
 (let (($x60577 (= ?x60578 LayerTypeType)))
 (let ((?x171025 (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let (($x60585 (= ?x171025 LayerTypeType)))
 (let ((?x171029 (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let (($x171007 (= ?x171029 LayerTypeType)))
 (let ((?x171039 (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x171027 (= ?x171039 LayerTypeType)))
 (let ((?x171053 (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x171059 (= ?x171053 LayerTypeType)))
 (let ((?x171065 (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x171069 (= ?x171065 LayerTypeType)))
 (let ((?x171093 (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x171091 (= ?x171093 LayerTypeType)))
 (let (($x171085 (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType)))
 (let (($x171097 (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)))
 (let (($x171105 (= (type StartFuel_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)))
 (let (($x59913 (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximum) LayerTypeType)))
 (let (($x59908 (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)))
 (let (($x59920 (= (type StartFuel_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)))
 (let (($x59839 (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimum) LayerTypeType)))
 (let (($x59848 (= (type StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)))
 (let (($x59857 (= (type StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)))
 (let (($x59866 (= (type StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)))
 (let ((?x170081 (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let (($x171151 (= ?x170081 LayerTypeType)))
 (let ((?x59828 (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let (($x171159 (= ?x59828 LayerTypeType)))
 (let ((?x59826 (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x59825 (= ?x59826 LayerTypeType)))
 (let ((?x59836 (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x59835 (= ?x59836 LayerTypeType)))
 (let ((?x170103 (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x170101 (= ?x170103 LayerTypeType)))
 (let ((?x171181 (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x171179 (= ?x171181 LayerTypeType)))
 (let (($x171195 (= (type StartFuelAssert_Byte_Order._default.IsStrictlySorted) LayerTypeType)))
 (let (($x59802 (= (type StartFuelAssert_Byte_Order._default.maximumOpt) LayerTypeType)))
 (let (($x59810 (= (type StartFuel_Byte_Order._default.maximumOpt) LayerTypeType)))
 (let (($x59777 (= (type StartFuelAssert_Byte_Order._default.maximum) LayerTypeType)))
 (let (($x59785 (= (type StartFuelAssert_Byte_Order._default.minimumOpt) LayerTypeType)))
 (let (($x59720 (= (type StartFuel_Byte_Order._default.minimumOpt) LayerTypeType)))
 (let (($x59760 (= (type StartFuelAssert_Byte_Order._default.minimum) LayerTypeType)))
 (let (($x59665 (= (type StartFuelAssert_Byte_Order._default.SortedSeqForMap) LayerTypeType)))
 (let (($x59679 (= (type StartFuel_Byte_Order._default.SortedSeqForMap) LayerTypeType)))
 (let (($x4980 (= (type StartFuelAssert_Byte_Order._default.NotMinimum) LayerTypeType)))
 (let (($x111682 (= (type StartFuel_Byte_Order._default.NotMinimum) LayerTypeType)))
 (let (($x111723 (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)))
 (let (($x111714 (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)))
 (let ((?x171329 (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x171327 (= ?x171329 LayerTypeType)))
 (let ((?x171307 (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x171305 (= ?x171307 LayerTypeType)))
 (let (($x171335 (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)))
 (let (($x171349 (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)))
 (let (($x171347 (= (type StartFuelAssert_Byte_Order._default.lte) LayerTypeType)))
 (let (($x171377 (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType)))
 (let (($x136774 (= (type StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet) LayerTypeType)))
 (let (($x136770 (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)))
 (let (($x136766 (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)))
 (let (($x136762 (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)))
 (let (($x136758 (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)))
 (let (($x136754 (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)))
 (let (($x136750 (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)))
 (let (($x136746 (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)))
 (let (($x136742 (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)))
 (let (($x136738 (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)))
 (let (($x136734 (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)))
 (let (($x136730 (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)))
 (let (($x136726 (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)))
 (let (($x136722 (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)))
 (let (($x136718 (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)))
 (let (($x136714 (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)))
 (let (($x136710 (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)))
 (let (($x136706 (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)))
 (let (($x136702 (= (type StartFuelAssert_Maps._default.IMapInvert) LayerTypeType)))
 (let (($x136698 (= (type StartFuel_Maps._default.IMapInvert) LayerTypeType)))
 (let (($x136694 (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)))
 (let (($x136690 (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)))
 (let (($x136686 (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)))
 (let (($x136682 (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)))
 (let (($x136678 (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)))
 (let (($x136674 (= (type StartFuel_Sequences._default.fill) LayerTypeType)))
 (let (($x136670 (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType)))
 (let (($x136666 (= (type StartFuel_Sequences._default.seqMax) LayerTypeType)))
 (let (($x136662 (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)))
 (let (($x136658 (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)))
 (let (($x136654 (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)))
 (let (($x136646 (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)))
 (let (($x136642 (= (type StartFuel_Sequences._default.Zip) LayerTypeType)))
 (let (($x136638 (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)))
 (let (($x136634 (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)))
 (let (($x136630 (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)))
 (let (($x136626 (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)))
 (let (($x136622 (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)))
 (let (($x136618 (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)))
 (let (($x136614 (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)))
 (let (($x136610 (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)))
 (let (($x136606 (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)))
 (let (($x136602 (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)))
 (let (($x136598 (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)))
 (let (($x136594 (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)))
 (let (($x136590 (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)))
 (let (($x136586 (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)))
 (let (($x136582 (= (type StartFuel_Sequences._default.concat3) LayerTypeType)))
 (let (($x136578 (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)))
 (let (($x136574 (= (type StartFuel_Sequences._default.concat) LayerTypeType)))
 (let (($x136570 (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)))
 (let (($x136566 (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)))
 (let (($x136562 (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)))
 (let (($x136554 (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)))
 (let (($x136546 (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType)))
 (let (($x136542 (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType)))
 (let (($x136538 (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)))
 (let (($x136534 (= (type StartFuel_Sequences._default.remove) LayerTypeType)))
 (let (($x136530 (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)))
 (let (($x136526 (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)))
 (let (($x136522 (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)))
 (let (($x136518 (= (type StartFuel_Sequences._default.Range) LayerTypeType)))
 (let ((?x5070 (SeqType BoxType)))
 (let (($x233337 (= (type |##key#0@0|) ?x5070)))
 (let (($x220002 (= (type |##pt#0@0|) ?x5070)))
 (let (($x231507 (= (type |##children#1@0|) ?x5070)))
 (let (($x111798 (= (type |##children#0@0|) ?x5070)))
 (let (($x240747 (= (type |let#0#0#0|) DatatypeTypeType)))
 (let ((?x134985 (MapType6Type refType boolType)))
 (let (($x111808 (= (type $_Frame@0@@0) ?x134985)))
 (let (($x5429 (= (type |newChild#Z#0@0|) DatatypeTypeType)))
 (let (($x136501 (= (type $_Frame@0) ?x134985)))
 (let ((?x111919 (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted)))
 (let (($x8802 (= ?x111919 LayerTypeType)))
 (let (($x286469 (= (type |out#0@@6|) ?x5070)))
 (let ((?x5185 (MapType0Type refType MapType1Type)))
 (let (($x5685 (= (type $Heap@@108) ?x5185)))
 (let (($x219009 (= (type |replacement#0@@17|) DatatypeTypeType)))
 (let ((?x111801 (type this@@325)))
 (let (($x111800 (= ?x111801 DatatypeTypeType)))
 (let (($x240743 (and (and (and (and (and (and $x111800 $x219009) $x5685) $x286469) $x8802) $x136501) $x5429)))
 (let (($x280920 (and (and (and (and (and (and $x240743 $x111808) $x240747) $x111798) $x231507) $x220002) $x233337)))
 (let (($x151149 (and (and (and (and (and (and $x280920 $x136518) $x136522) $x136526) $x136530) $x136534) $x136538)))
 (let (($x206680 (and (and (and (and (and (and $x151149 $x136542) $x136546) $x136554) $x136562) $x136566) $x136570)))
 (let (($x208490 (and (and (and (and (and (and $x206680 $x136574) $x136578) $x136582) $x136586) $x136590) $x136594)))
 (let (($x286338 (and (and (and (and (and (and $x208490 $x136598) $x136602) $x136606) $x136610) $x136614) $x136618)))
 (let (($x237467 (and (and (and (and (and (and $x286338 $x136622) $x136626) $x136630) $x136634) $x136638) $x136642)))
 (let (($x154777 (and (and (and (and (and (and $x237467 $x136646) $x136654) $x136658) $x136662) $x136666) $x136670)))
 (let (($x155313 (and (and (and (and (and (and $x154777 $x136674) $x136678) $x136682) $x136686) $x136690) $x136694)))
 (let (($x64209 (and (and (and (and (and (and $x155313 $x136698) $x136702) $x136706) $x136710) $x136714) $x136718)))
 (let (($x238531 (and (and (and (and (and (and $x64209 $x136722) $x136726) $x136730) $x136734) $x136738) $x136742)))
 (let (($x148106 (and (and (and (and (and (and $x238531 $x136746) $x136750) $x136754) $x136758) $x136762) $x136766)))
 (let (($x207293 (and (and (and (and (and (and $x148106 $x136770) $x136774) $x171377) $x171347) $x171349) $x171335)))
 (let (($x231409 (and (and (and (and (and (and $x207293 $x171305) $x171327) $x111714) $x111723) $x111682) $x4980)))
 (let (($x240073 (and (and (and (and (and (and $x231409 $x59679) $x59665) $x59760) $x59720) $x59785) $x59777)))
 (let (($x208452 (and (and (and (and (and (and $x240073 $x59810) $x59802) $x171195) $x171179) $x170101) $x59835)))
 (let (($x284740 (and (and (and (and (and (and $x208452 $x59825) $x171159) $x171151) $x59866) $x59857) $x59848)))
 (let (($x206714 (and (and (and (and (and (and $x284740 $x59839) $x59920) $x59908) $x59913) $x171105) $x171097)))
 (let (($x272186 (and (and (and (and (and (and $x206714 $x171085) $x171091) $x171069) $x171059) $x171027) $x171007)))
 (let (($x225286 (and (and (and (and (and (and $x272186 $x60585) $x60577) $x59928) $x170991) $x171009) $x170965)))
 (let (($x193142 (and (and (and (and (and (and $x225286 $x170955) $x170953) $x170931) $x170939) $x61044) $x60612)))
 (and $x193142 $x111776)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(assert
 (forall ((|a#10#1#0@@1| T@U) (|a#10#0#0@@3| T@U) )(! (let (($x259454 (= (DomainMod.Domain.start (|#DomainMod.Domain.Domain| |a#10#0#0@@3| |a#10#1#0@@1|)) |a#10#0#0@@3|)))
 (let ((?x176 (type |a#10#1#0@@1|)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let ((?x63 (type |a#10#0#0@@3|)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let (($x117525 (and $x5613 $x9722)))
 (=> $x117525 $x259454))))))) :pattern ( (|#DomainMod.Domain.Domain| |a#10#0#0@@3| |a#10#1#0@@1|) ) :qid Domainidfy.17:42!1440))
 )
(assert
 (forall ((arg0@@645 T@U) )(! (= (type (BoundedPivotsLib.__default.KeyToElement arg0@@645)) DatatypeTypeType) :pattern ( (BoundedPivotsLib.__default.KeyToElement arg0@@645) ) :qid funType:BoundedPivotsLib.__default.KeyToElement))
 )
(assert
 (let (($x288794 (forall ((|pt#0@@5| T@U) )(! (let ((?x6717 (|Seq#Length| |pt#0@@5|)))
 (let (($x242934 (INTERNAL_ge_boogie ?x6717 2)))
 (let (($x242843 (BoundedPivotsLib.__default.ElementsAreKeys |pt#0@@5|)))
 (let (($x147709 (forall ((|i#0@@174| Int) )(! (let ((?x5293 (|Seq#Index| |pt#0@@5| |i#0@@174|)))
 (let ((?x112246 ($Unbox DatatypeTypeType ?x5293)))
 (let (($x242850 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x112246)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@174|)))
 (let (($x242926 (and $x9901 (INTERNAL_lt_boogie |i#0@@174| (BoundedPivotsLib.__default.NumBuckets |pt#0@@5|)))))
 (=> $x242926 $x242850)))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@5| |i#0@@174|)) ) :qid BoundedPivotsLibidfy.56:16!570))
 ))
 (let (($x258644 (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted |pt#0@@5|)))
 (let (($x258639 (BoundedPivotsLib.__default.WFPivots |pt#0@@5|)))
 (let (($x258548 (|BoundedPivotsLib.__default.ElementsAreKeys#canCall| |pt#0@@5|)))
 (let (($x271767 (forall ((|i#0@@173| Int) )(! (let ((?x5293 (|Seq#Index| |pt#0@@5| |i#0@@173|)))
 (let ((?x112246 ($Unbox DatatypeTypeType ?x5293)))
 (let (($x242850 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x112246)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@173|)))
 (let (($x242926 (and $x9901 (INTERNAL_lt_boogie |i#0@@173| (BoundedPivotsLib.__default.NumBuckets |pt#0@@5|)))))
 (=> $x242926 $x242850)))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@5| |i#0@@173|)) ) :qid BoundedPivotsLibidfy.56:16!565))
 ))
 (let (($x237347 (forall ((|i#0@@172| Int) )(! (let (($x258643 (|BoundedPivotsLib.__default.NumBuckets#canCall| |pt#0@@5|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@172|)))
 (=> $x9901 $x258643))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@5| |i#0@@172|)) ) :qid BoundedPivotsLibidfy.56:16!561))
 ))
 (let (($x254333 (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |pt#0@@5|)))
 (let (($x207015 (and (and $x254333 (=> $x258644 (and $x237347 (=> $x271767 $x258548)))) (= $x258639 (and (and (and $x258644 $x147709) $x242843) $x242934)))))
 (let ((?x212568 (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let (($x257137 ($Is |pt#0@@5| ?x212568)))
 (let (($x258636 (|BoundedPivotsLib.__default.WFPivots#canCall| |pt#0@@5|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |pt#0@@5|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let (($x258635 (and $x7226 (or $x258636 $x257137))))
 (=> $x258635 $x207015))))))))))))))))))) :pattern ( (BoundedPivotsLib.__default.WFPivots |pt#0@@5|) ) :qid BoundedPivotsLibidfy.53:22!574))
 ))
 (=> true $x288794)))
(assert
 (forall ((a@@172 T@U) (b@@121 T@U) )(! (let (($x5003 (= a@@172 b@@121)))
 (let (($x243553 (|DomainMod.Domain#Equal| a@@172 b@@121)))
 (let (($x259482 (= $x243553 $x5003)))
 (let ((?x63 (type b@@121)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type a@@172)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x9771 (and $x9722 $x5613)))
 (=> $x9771 $x259482))))))))) :pattern ( (|DomainMod.Domain#Equal| a@@172 b@@121) ) :qid unknown.0:0!1486))
 )
(assert
 (forall ((|a#12#0#0@@1| T@U) (|a#12#1#0@@0| T@U) )(! (let (($x259459 (= (DomainMod.Domain.end (|#DomainMod.Domain.Domain| |a#12#0#0@@1| |a#12#1#0@@0|)) |a#12#1#0@@0|)))
 (let ((?x63 (type |a#12#1#0@@0|)))
 (let (($x5613 (= ?x63 DatatypeTypeType)))
 (let ((?x176 (type |a#12#0#0@@1|)))
 (let (($x9722 (= ?x176 DatatypeTypeType)))
 (let (($x9771 (and $x9722 $x5613)))
 (=> $x9771 $x259459))))))) :pattern ( (|#DomainMod.Domain.Domain| |a#12#0#0@@1| |a#12#1#0@@0|) ) :qid Domainidfy.17:42!1448))
 )
(assert
 (let (($x239847 (forall ((|pt#0@@33| T@U) )(! (let ((?x6717 (|Seq#Length| |pt#0@@33|)))
 (let ((?x125564 (INTERNAL_sub_boogie ?x6717 1)))
 (let ((?x258926 (BoundedPivotsLib.__default.NumBuckets |pt#0@@33|)))
 (let (($x256428 (= ?x258926 ?x125564)))
 (let ((?x212568 (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let (($x257137 ($Is |pt#0@@33| ?x212568)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |pt#0@@33|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let (($x254613 (and $x7226 (or (|BoundedPivotsLib.__default.NumBuckets#canCall| |pt#0@@33|) $x257137))))
 (=> $x254613 $x256428))))))))))) :pattern ( (BoundedPivotsLib.__default.NumBuckets |pt#0@@33|) ) :qid BoundedPivotsLibidfy.199:23!851))
 ))
 (=> true $x239847)))
(assert
 (let (($x254326 (forall (($ly@@699 T@U) (|run#0@@213| T@U) )(! (let (($x257197 (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@213|)))
 (let (($x258258 (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@699 |run#0@@213|)))
 (let (($x254330 (and (=> (= (|Seq#Length| |run#0@@213|) (LitInt 0)) $x258258) (=> (= (|Seq#Length| |run#0@@213|) (LitInt 1)) $x258258))))
 (let ((?x212568 (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let (($x257137 ($Is |run#0@@213| ?x212568)))
 (let (($x254333 (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@213|)))
 (let (($x258270 (or $x254333 $x257137)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |run#0@@213|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type $ly@@699)))
 (let (($x9979 (= ?x176 LayerTypeType)))
 (let (($x129308 (and $x9979 $x7226)))
 (let (($x254332 (and $x129308 $x258270)))
 (=> $x254332 (and $x254330 (=> $x258258 $x257197))))))))))))))))) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@699 |run#0@@213|) ) :qid totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.85:23!140))
 ))
 (=> true $x254326)))
(assert
 (let (($x210961 (forall ((|pt#0@@37| T@U) (|key#0@@211| T@U) )(! (let ((?x251316 (BoundedPivotsLib.__default.KeyToElement |key#0@@211|)))
 (let ((?x259010 (BoundedPivotsLib.__default.Route |pt#0@@37| |key#0@@211|)))
 (let (($x254670 (= ?x259010 (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte |pt#0@@37| ?x251316))))
 (let (($x259028 (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| |pt#0@@37| ?x251316)))
 (let (($x258582 (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@211|)))
 (let (($x243014 (BoundedPivotsLib.__default.BoundedKey |pt#0@@37| |key#0@@211|)))
 (let (($x258735 (BoundedPivotsLib.__default.WFPivots |pt#0@@37|)))
 (let (($x259004 (and $x258735 $x243014)))
 (let (($x117424 ($Is |key#0@@211| Tclass.KeyType.Key)))
 (let ((?x212568 (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let (($x148584 ($Is |pt#0@@37| ?x212568)))
 (let (($x258781 (and $x148584 $x117424)))
 (let (($x259003 (and $x258781 $x259004)))
 (let (($x259005 (|BoundedPivotsLib.__default.Route#canCall| |pt#0@@37| |key#0@@211|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |key#0@@211|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type |pt#0@@37|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let (($x116827 (and $x5299 $x7226)))
 (let (($x243187 (and $x116827 (or $x259005 $x259003))))
 (=> $x243187 (and (and $x258582 $x259028) $x254670))))))))))))))))))))))) :pattern ( (BoundedPivotsLib.__default.Route |pt#0@@37| |key#0@@211|) ) :qid BoundedPivotsLibidfy.231:18!961))
 ))
 (=> true $x210961)))
(assert
 (let ((?x253904 (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted)))
 (= ?x253904 LayerTypeType)))
(assert
 (let (($x258587 (forall ((|key#0@@193| T@U) )(! (let ((?x251316 (BoundedPivotsLib.__default.KeyToElement |key#0@@193|)))
 (let (($x258589 ($Is ?x251316 Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let (($x117424 ($Is |key#0@@193| Tclass.KeyType.Key)))
 (let (($x258582 (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@193|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |key#0@@193|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let (($x242862 (and $x7226 (or $x258582 $x117424))))
 (=> $x242862 $x258589))))))))) :pattern ( (BoundedPivotsLib.__default.KeyToElement |key#0@@193|) ) :qid BoundedPivotsLibidfy.42:25))
 ))
 (=> true $x258587)))
(assert
 (let (($x235313 (forall ((|pt#0@@35| T@U) (|key#0@@209| T@U) )(! (let ((?x243195 (|Seq#Index| |pt#0@@35| (INTERNAL_add_boogie (BoundedPivotsLib.__default.Route |pt#0@@35| |key#0@@209|) 1))))
 (let ((?x259014 ($Unbox DatatypeTypeType ?x243195)))
 (let ((?x259011 ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@35| (BoundedPivotsLib.__default.Route |pt#0@@35| |key#0@@209|)))))
 (let (($x259019 (BoundedPivotsLib.__default.InBetween ?x259011 ?x259014 |key#0@@209|)))
 (let (($x259013 (Upperbounded__Lexicographic__Byte__Order.__default.lt ?x259011 ?x259014)))
 (let ((?x6786 (|Seq#Length| |pt#0@@35|)))
 (let ((?x129620 (INTERNAL_sub_boogie ?x6786 1)))
 (let ((?x259010 (BoundedPivotsLib.__default.Route |pt#0@@35| |key#0@@209|)))
 (let (($x243192 (INTERNAL_lt_boogie ?x259010 ?x129620)))
 (let (($x259009 (INTERNAL_le_boogie 0 ?x259010)))
 (let (($x243014 (BoundedPivotsLib.__default.BoundedKey |pt#0@@35| |key#0@@209|)))
 (let (($x258735 (BoundedPivotsLib.__default.WFPivots |pt#0@@35|)))
 (let (($x259004 (and $x258735 $x243014)))
 (let (($x117424 ($Is |key#0@@209| Tclass.KeyType.Key)))
 (let ((?x212568 (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let (($x148584 ($Is |pt#0@@35| ?x212568)))
 (let (($x258781 (and $x148584 $x117424)))
 (let (($x259003 (and $x258781 $x259004)))
 (let (($x259005 (|BoundedPivotsLib.__default.Route#canCall| |pt#0@@35| |key#0@@209|)))
 (let ((?x5070 (SeqType BoxType)))
 (let ((?x63 (type |key#0@@209|)))
 (let (($x7226 (= ?x63 ?x5070)))
 (let ((?x176 (type |pt#0@@35|)))
 (let (($x5299 (= ?x176 ?x5070)))
 (let (($x116827 (and $x5299 $x7226)))
 (let (($x243187 (and $x116827 (or $x259005 $x259003))))
 (=> $x243187 (and (and (and $x259009 $x243192) $x259013) $x259019)))))))))))))))))))))))))))) :pattern ( (BoundedPivotsLib.__default.Route |pt#0@@35| |key#0@@209|) ) :qid BoundedPivotsLibidfy.231:18!1093))
 ))
 (=> true $x235313)))
(assert
 (let (($x237205 (forall ((|i#1@@74| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x193306 (|Seq#Index| ?x193240 |i#1@@74|)))
 (let ((?x193304 ($Unbox DatatypeTypeType ?x193306)))
 (let ((?x221626 (PivotBetree.BetreeNode.MyDomain ?x193304)))
 (let ((?x234253 (|Seq#Index| |out#0@@6| |i#1@@74|)))
 (let ((?x70646 ($Unbox DatatypeTypeType ?x234253)))
 (let (($x238317 (|DomainMod.Domain#Equal| (PivotBetree.BetreeNode.MyDomain ?x70646) ?x221626)))
 (let (($x237463 (PivotBetree.BetreeNode.BetreeNode_q ?x70646)))
 (let ((?x10306 ($LS $LZ)))
 (let ((?x10439 ($LS ?x10306)))
 (let (($x150345 (PivotBetree.BetreeNode.WF ?x10439 ?x70646)))
 (let (($x221603 (PivotBetree.BetreeNode.ValidChildIndex ?x193028 |i#1@@74|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#1@@74|)))
 (let (($x237011 (and $x9901 $x221603)))
 (=> $x237011 (and (and $x150345 $x237463) $x238317))))))))))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |out#0@@6| |i#1@@74|)) ) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@325)) |i#1@@74|)) ) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node this@@325) |i#1@@74|) ) :qid PivotBetreeidfy.498:18!1335))
 ))
 (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x10306 ($LS $LZ)))
 (let (($x249333 (PivotBetree.__default.WFChildren ?x10306 ?x193240)))
 (let (($x249348 (PivotBetree.Path.ChildrenHaveMatchingDomains this@@325 |out#0@@6|)))
 (let (($x234769 (|PivotBetree.Path.ChildrenHaveMatchingDomains#canCall| this@@325 |out#0@@6|)))
 (let (($x235653 (=> (and (= (ControlFlow 0 668927) (- 0 686523)) $x234769) (or $x249348 (=> $x249333 $x237205)))))
 (let (($x232815 (=> $x234769 (or $x249348 (=> $x249333 (= (|Seq#Length| |out#0@@6|) (|Seq#Length| ?x193240)))))))
 (let (($x274212 (and (=> (and (= (ControlFlow 0 668927) (- 0 686479)) $x234769) (or $x249348 (=> $x249333 (= (|Seq#Length| |out#0@@6|) (|Seq#Length| ?x193240))))) (=> (and $x232815 (= (ControlFlow 0 668927) (- 0 686523)) $x234769) (or $x249348 (=> $x249333 $x237205))))))
 (let (($x274868 (forall ((|i#0@@185| Int) )(! (let ((?x234253 (|Seq#Index| |out#0@@6| |i#0@@185|)))
 (let ((?x70646 ($Unbox DatatypeTypeType ?x234253)))
 (let ((?x10306 ($LS $LZ)))
 (let ((?x10439 ($LS ?x10306)))
 (let (($x150345 (PivotBetree.BetreeNode.WF ?x10439 ?x70646)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@185|)))
 (let (($x273165 (and $x9901 (INTERNAL_lt_boogie |i#0@@185| (|Seq#Length| |out#0@@6|)))))
 (=> $x273165 $x150345)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |out#0@@6| |i#0@@185|)) ) :qid PivotBetreeidfy.40:16!1321))
 ))
 (let (($x240545 (PivotBetree.__default.WFChildren ?x10306 |out#0@@6|)))
 (let (($x208516 (|PivotBetree.__default.WFChildren#canCall| |out#0@@6|)))
 (let (($x237561 (forall ((|i#0@@184| Int) )(! (let ((?x234253 (|Seq#Index| |out#0@@6| |i#0@@184|)))
 (let ((?x70646 ($Unbox DatatypeTypeType ?x234253)))
 (let ((?x10306 ($LS $LZ)))
 (let ((?x10439 ($LS ?x10306)))
 (let (($x150345 (PivotBetree.BetreeNode.WF ?x10439 ?x70646)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#0@@184|)))
 (let (($x273165 (and $x9901 (INTERNAL_lt_boogie |i#0@@184| (|Seq#Length| |out#0@@6|)))))
 (=> $x273165 $x150345)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |out#0@@6| |i#0@@184|)) ) :qid PivotBetreeidfy.40:16!1318))
 ))
 (let (($x213969 (=> (and (= (ControlFlow 0 668927) (- 0 686383)) $x234769) (or $x249348 (=> (and $x249333 $x208516) (or $x240545 $x237561))))))
 (let (($x234489 (and $x213969 (=> (=> $x234769 (or $x249348 (=> (and $x249333 $x208516) (or $x240545 $x274868)))) $x274212))))
 (let (($x236407 (or $x249348 (=> (and $x249333 $x208516) (or $x240545 (U_2_bool (Lit (bool_2_U true))))))))
 (let (($x225534 (=> $x234769 $x236407)))
 (let (($x149905 (and (=> (and (= (ControlFlow 0 668927) (- 0 686333)) $x234769) $x236407) (=> $x225534 $x234489))))
 (let ((?x201644 (ControlFlow 0 186530)))
 (let (($x214113 (= ?x201644 668927)))
 (let (($x224990 (and (=> (= ?x201644 (- 0 686332)) |b$reqreads#4@0|) (=> (and |b$reqreads#4@0| $x214113) $x149905))))
 (let (($x239917 (and (=> (= ?x201644 (- 0 686331)) |b$reqreads#3@0|) (=> |b$reqreads#3@0| $x224990))))
 (let (($x224922 (and (=> (= ?x201644 (- 0 686330)) |b$reqreads#2@0|) (=> |b$reqreads#2@0| $x239917))))
 (let ((?x61514 (PivotBetree.Path.ReplacedChildren ?x10306 this@@325 |replacement#0@@17|)))
 (let (($x149201 (= ?x61514 |out#0@@6|)))
 (let ((?x230281 (TSeq Tclass.PivotBetree.BetreeNode)))
 (let (($x137474 ($Is ?x61514 ?x230281)))
 (let ((?x48196 (PivotBetree.Path.key this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let (($x211784 (|BoundedPivotsLib.__default.Route#canCall| ?x103079 ?x48196)))
 (let (($x137451 (PivotBetree.Path.Path_q this@@325)))
 (let (($x215964 (=> (and (and $x137451 (and (and $x137451 $x137451) $x211784)) (and $x137474 $x149201)) $x224922)))
 (let ((?x232969 (BoundedPivotsLib.__default.Route ?x103079 ?x48196)))
 (let (($x226288 (= ?x61514 (|Seq#Update| ?x193240 ?x232969 ($Box |newChild#Z#0@0|)))))
 (let (($x236411 (and (<= 0 ?x232969) (< ?x232969 (|Seq#Length| ?x193240)))))
 (let (($x192742 (forall (($o@@197 T@U) ($f@@127 T@U) )(! (let ((?x63 (type $f@@127)))
 (let ((?x5145 (FieldTypeInv0 ?x63)))
 (let ((?x5870 (FieldType ?x5145)))
 (let (($x6005 (= ?x63 ?x5870)))
 (let ((?x176 (type $o@@197)))
 (let (($x5963 (= ?x176 refType)))
 (let (($x6006 (and $x5963 $x6005)))
 (=> (and $x6006 false) (U_2_bool (MapType6Select $_Frame@0@@0 $o@@197 $f@@127)))))))))) :qid PivotBetreeidfy.516:21))
 ))
 (let (($x285480 (=> (and (= |b$reqreads#4@0| $x192742) $x211784) (and (=> (= ?x201644 (- 0 686195)) $x236411) (=> (and $x236411 $x226288 (and (and $x137451 (and (and $x137451 $x137451) $x211784)) (and $x137474 $x149201))) $x224922)))))
 (let (($x238669 (BoundedPivotsLib.__default.BoundedKey |##pt#0@0| |##key#0@0|)))
 (let ((?x250495 ($Unbox DatatypeTypeType (|Seq#Index| |##pt#0@0| (INTERNAL_sub_boogie (|Seq#Length| |##pt#0@0|) 1)))))
 (let ((?x238937 (BoundedPivotsLib.__default.KeyToElement |##key#0@0|)))
 (let (($x214159 (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ?x238937 ?x250495))))
 (let (($x292115 (Upperbounded__Lexicographic__Byte__Order.__default.lt ?x238937 ?x250495)))
 (let (($x213896 (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ?x238937 ?x250495)))
 (let (($x270717 (|BoundedPivotsLib.__default.BoundedKey#canCall| |##pt#0@0| |##key#0@0|)))
 (let (($x240613 (=> (and (= ?x201644 (- 0 686084)) $x270717) (or $x238669 (=> $x213896 (or $x292115 $x214159))))))
 (let ((?x245221 (Upperbounded__Lexicographic__Byte__Order.Element.e ?x238937)))
 (let (($x147957 (Lexicographic__Byte__Order.__default.lte ?x245221 (Upperbounded__Lexicographic__Byte__Order.Element.e ?x250495))))
 (let (($x283730 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x250495)))
 (let (($x211758 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x238937)))
 (let (($x281401 (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q ?x250495)))
 (let (($x232765 (Upperbounded__Lexicographic__Byte__Order.__default.lte ?x238937 ?x250495)))
 (let (($x238987 (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ?x238937 ?x250495)))
 (let (($x259947 (=> $x213896 (or $x292115 (=> $x238987 (or $x232765 (or $x281401 (and (and $x211758 $x283730) $x147957))))))))
 (let (($x179038 (and (=> (and (= ?x201644 (- 0 685922)) $x270717) (or $x238669 $x259947)) (and $x240613 (=> (and $x238669 (and (= |b$reqreads#4@0| $x192742) $x211784)) (and (=> (= ?x201644 (- 0 686195)) $x236411) (=> (and $x236411 $x226288 (and (and $x137451 (and (and $x137451 $x137451) $x211784)) (and $x137474 $x149201))) $x224922)))))))
 (let ((?x213933 ($Unbox DatatypeTypeType (|Seq#Index| |##pt#0@0| (LitInt 0)))))
 (let (($x147389 (Lexicographic__Byte__Order.__default.lte (Upperbounded__Lexicographic__Byte__Order.Element.e ?x213933) ?x245221)))
 (let (($x238933 (and (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x213933) $x211758) $x147389)))
 (let (($x233799 (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q ?x238937)))
 (let (($x233809 (Upperbounded__Lexicographic__Byte__Order.__default.lte ?x213933 ?x238937)))
 (let (($x237383 (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ?x213933 ?x238937)))
 (let (($x218506 (=> (and (= ?x201644 (- 0 685825)) $x270717) (or $x238669 (=> $x237383 (or $x233809 (or $x233799 $x238933)))))))
 (let (($x294730 (BoundedPivotsLib.__default.WFPivots |##pt#0@0|)))
 (let (($x209315 (|BoundedPivotsLib.__default.WFPivots#canCall| |##pt#0@0|)))
 (let (($x278486 (=> (and (= ?x201644 (- 0 685805)) $x209315) (or $x294730 (INTERNAL_ge_boogie (|Seq#Length| |##pt#0@0|) 2)))))
 (let (($x166345 (forall ((|i#35| Int) )(! (let ((?x218553 (|Seq#Index| |##pt#0@0| |i#35|)))
 (let ((?x214861 ($Unbox DatatypeTypeType ?x218553)))
 (let (($x237573 (BoundedPivotsLib.__default.ElementIsKey ?x214861)))
 (let (($x239075 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x214861)))
 (let ((?x6174 (|Seq#Length| |##pt#0@0|)))
 (let (($x212015 (INTERNAL_lt_boogie |i#35| ?x6174)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#35|)))
 (=> (and (and $x9901 $x212015) $x239075) $x237573)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |##pt#0@0| |i#35|)) ) :qid BoundedPivotsLibidfy.39:16!1792))
 ))
 (let (($x155443 (BoundedPivotsLib.__default.ElementsAreKeys |##pt#0@0|)))
 (let (($x208009 (|BoundedPivotsLib.__default.ElementsAreKeys#canCall| |##pt#0@0|)))
 (let (($x209511 (=> (and (= ?x201644 (- 0 685731)) $x209315) (or $x294730 (=> $x208009 (or $x155443 $x166345))))))
 (let (($x147568 (=> $x209315 (or $x294730 (=> $x208009 (or $x155443 (U_2_bool (Lit (bool_2_U true)))))))))
 (let (($x278932 (and (=> (and (= ?x201644 (- 0 685707)) $x209315) (or $x294730 (=> $x208009 (or $x155443 (U_2_bool (Lit (bool_2_U true))))))) (and $x209511 (and $x278486 (=> $x294730 (and $x218506 $x179038)))))))
 (let (($x149737 (forall ((|i#34| Int) )(! (let ((?x218553 (|Seq#Index| |##pt#0@0| |i#34|)))
 (let ((?x214861 ($Unbox DatatypeTypeType ?x218553)))
 (let (($x239075 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x214861)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#34|)))
 (let (($x153319 (and $x9901 (INTERNAL_lt_boogie |i#34| (BoundedPivotsLib.__default.NumBuckets |##pt#0@0|)))))
 (=> $x153319 $x239075)))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |##pt#0@0| |i#34|)) ) :qid BoundedPivotsLibidfy.56:16!1778))
 ))
 (let (($x238895 (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted |##pt#0@0|)))
 (let (($x293563 (and (=> (and (= ?x201644 (- 0 685641)) $x209315) (or $x294730 $x238895)) (and (=> (and (= ?x201644 (- 0 685656)) $x209315) (or $x294730 $x149737)) $x278932))))
 (let (($x147513 ($IsAlloc |##key#0@0| Tclass.KeyType.Key $Heap@@108)))
 (let (($x231921 (= |##key#0@0| ?x48196)))
 (let ((?x212568 (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))
 (let (($x240733 ($IsAlloc |##pt#0@0| ?x212568 $Heap@@108)))
 (let (($x233749 (= |##pt#0@0| ?x103079)))
 (let (($x193044 (PivotBetree.BetreeNode.BetreeNode_q ?x193028)))
 (let (($x178852 (and (=> (= ?x201644 (- 0 685593)) $x193044) (=> (and $x193044 $x137451 (and (and $x233749 $x240733) (and $x231921 $x147513))) $x293563))))
 (let ((?x10439 ($LS ?x10306)))
 (let (($x193266 (PivotBetree.__default.WFChildren ?x10439 ?x193240)))
 (let (($x208799 (and $x193266 $x137451)))
 (let (($x235491 (=> $x208799 (and (=> (= ?x201644 (- 0 685583)) $x193044) (=> (and $x193044 $x137451) $x178852)))))
 (let (($x219011 (forall ((|i#33| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x193306 (|Seq#Index| ?x193240 |i#33|)))
 (let ((?x193304 ($Unbox DatatypeTypeType ?x193306)))
 (let ((?x10306 ($LS $LZ)))
 (let ((?x10439 ($LS ?x10306)))
 (let (($x232213 (PivotBetree.BetreeNode.WF ?x10439 ?x193304)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#33|)))
 (let (($x60098 (and $x9901 (INTERNAL_lt_boogie |i#33| (|Seq#Length| ?x193240)))))
 (=> $x60098 $x232213)))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@325)) |i#33|)) ) :qid PivotBetreeidfy.40:16!1765))
 ))
 (let (($x281300 (|PivotBetree.__default.WFChildren#canCall| ?x193240)))
 (let (($x245914 (=> (and (= ?x201644 (- 0 685451)) $x281300) (or $x249333 (U_2_bool (Lit (bool_2_U true)))))))
 (let (($x155447 (and $x245914 (and (=> (and (= ?x201644 (- 0 685479)) $x281300) (or $x249333 $x219011)) $x235491))))
 (let (($x249522 (and (and ($IsAlloc |##children#1@0| ?x230281 $Heap@@108) $x281300) (and $x137451 $x281300))))
 (let (($x225347 (= |##children#1@0| ?x193240)))
 (let (($x259819 (and (=> (= ?x201644 (- 0 685402)) $x193044) (=> (and $x193044 $x225347 $x249522) $x155447))))
 (let ((?x61480 (PivotBetree.Path.Subpath this@@325)))
 (let ((?x117593 (PivotBetree.Path.node ?x61480)))
 (let ((?x62846 (PivotBetree.BetreeNode.children ?x117593)))
 (let (($x239715 (PivotBetree.__default.WFChildren ?x10439 ?x62846)))
 (let (($x276808 (and $x239715 $x137451)))
 (let (($x233877 (forall ((|i#32| Int) )(! (let ((?x61480 (PivotBetree.Path.Subpath this@@325)))
 (let ((?x117593 (PivotBetree.Path.node ?x61480)))
 (let ((?x62846 (PivotBetree.BetreeNode.children ?x117593)))
 (let ((?x221022 (|Seq#Index| ?x62846 |i#32|)))
 (let ((?x221023 ($Unbox DatatypeTypeType ?x221022)))
 (let ((?x10306 ($LS $LZ)))
 (let ((?x10439 ($LS ?x10306)))
 (let (($x218032 (PivotBetree.BetreeNode.WF ?x10439 ?x221023)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#32|)))
 (let (($x9237 (and $x9901 (INTERNAL_lt_boogie |i#32| (|Seq#Length| ?x62846)))))
 (=> $x9237 $x218032))))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325))) |i#32|)) ) :qid PivotBetreeidfy.40:16!1748))
 ))
 (let (($x228271 (PivotBetree.__default.WFChildren ?x10306 ?x62846)))
 (let (($x232895 (|PivotBetree.__default.WFChildren#canCall| ?x62846)))
 (let (($x239637 (and (=> (and (= ?x201644 (- 0 685286)) $x232895) (or $x228271 $x233877)) (=> $x276808 $x259819))))
 (let (($x208694 (=> (and (= ?x201644 (- 0 685254)) $x232895) (or $x228271 (U_2_bool (Lit (bool_2_U true)))))))
 (let (($x62708 (PivotBetree.Path.Path_q ?x61480)))
 (let (($x62707 (|PivotBetree.Path.Subpath#canCall| this@@325)))
 (let (($x65717 (and $x62707 $x62708)))
 (let (($x147891 (and ($IsAlloc |##children#0@0| ?x230281 $Heap@@108) $x232895)))
 (let (($x239325 (= |##children#0@0| ?x62846)))
 (let (($x62740 (PivotBetree.BetreeNode.BetreeNode_q ?x117593)))
 (let (($x203088 (and (=> (= ?x201644 (- 0 685189)) $x62740) (=> (and $x62740 $x239325 $x147891 (and $x65717 $x232895)) (and $x208694 $x239637)))))
 (let ((?x59999 ($Unbox DatatypeTypeType (|Seq#Index| ?x103079 (INTERNAL_sub_boogie (|Seq#Length| ?x103079) 1)))))
 (let ((?x137539 (BoundedPivotsLib.__default.KeyToElement ?x48196)))
 (let (($x137576 (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ?x137539 ?x59999))))
 (let (($x60001 (Upperbounded__Lexicographic__Byte__Order.__default.lt ?x137539 ?x59999)))
 (let (($x60000 (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ?x137539 ?x59999)))
 (let (($x61531 (BoundedPivotsLib.__default.BoundedKey ?x103079 ?x48196)))
 (let (($x61528 (|BoundedPivotsLib.__default.BoundedKey#canCall| ?x103079 ?x48196)))
 (let (($x59716 (PivotBetree.BetreeNode.KeyInDomain ?x193028 ?x48196)))
 (let (($x29694 (|PivotBetree.BetreeNode.KeyInDomain#canCall| ?x193028 ?x48196)))
 (let (($x60115 (=> $x29694 (or $x59716 (=> $x61528 (or $x61531 (=> $x60000 (or $x60001 $x137576))))))))
 (let (($x238725 (and (=> (and (= ?x201644 (- 0 685019)) $x29694) (or $x59716 (=> $x61528 (or $x61531 (=> $x60000 (or $x60001 $x137576)))))) (=> (and $x62707 (and $x62708 $x62708)) $x203088))))
 (let ((?x184903 (Upperbounded__Lexicographic__Byte__Order.Element.e ?x137539)))
 (let (($x120553 (Lexicographic__Byte__Order.__default.lte ?x184903 (Upperbounded__Lexicographic__Byte__Order.Element.e ?x59999))))
 (let (($x59995 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x59999)))
 (let (($x59952 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x137539)))
 (let (($x202534 (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q ?x59999)))
 (let (($x202532 (Upperbounded__Lexicographic__Byte__Order.__default.lte ?x137539 ?x59999)))
 (let (($x59990 (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ?x137539 ?x59999)))
 (let (($x60037 (=> $x60000 (or $x60001 (=> $x59990 (or $x202532 (or $x202534 (and (and $x59952 $x59995) $x120553))))))))
 (let (($x137599 (=> $x29694 (or $x59716 (=> $x61528 (or $x61531 $x60037))))))
 (let ((?x61539 ($Unbox DatatypeTypeType (|Seq#Index| ?x103079 (LitInt 0)))))
 (let (($x248286 (Lexicographic__Byte__Order.__default.lte (Upperbounded__Lexicographic__Byte__Order.Element.e ?x61539) ?x184903)))
 (let (($x137250 (and (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x61539) $x59952) $x248286)))
 (let (($x122902 (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q ?x137539)))
 (let (($x59747 (Upperbounded__Lexicographic__Byte__Order.__default.lte ?x61539 ?x137539)))
 (let (($x59950 (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ?x61539 ?x137539)))
 (let (($x137653 (=> $x29694 (or $x59716 (=> $x61528 (or $x61531 (=> $x59950 (or $x59747 (or $x122902 $x137250)))))))))
 (let (($x220940 (and (=> (and (= ?x201644 (- 0 684557)) $x29694) (or $x59716 (=> $x61528 (or $x61531 (=> $x59950 (or $x59747 (or $x122902 $x137250))))))) (and (=> (and (= ?x201644 (- 0 684729)) $x29694) (or $x59716 (=> $x61528 (or $x61531 $x60037)))) $x238725))))
 (let (($x154263 (forall ((|i#31| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x59682 (PivotBetree.BetreeNode.DomainRoutedToChild ?x193028 |i#31|)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x193306 (|Seq#Index| ?x193240 |i#31|)))
 (let ((?x193304 ($Unbox DatatypeTypeType ?x193306)))
 (let ((?x221626 (PivotBetree.BetreeNode.MyDomain ?x193304)))
 (let (($x221635 (|DomainMod.Domain#Equal| ?x221626 ?x59682)))
 (let (($x202802 (PivotBetree.BetreeNode.LocalStructure ?x193304)))
 (let (($x193302 (PivotBetree.BetreeNode.BetreeNode_q ?x193304)))
 (let (($x221603 (PivotBetree.BetreeNode.ValidChildIndex ?x193028 |i#31|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#31|)))
 (=> (and $x9901 (and (and $x221603 $x193302) $x202802)) $x221635)))))))))))) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild (PivotBetree.Path.node this@@325) |i#31|) ) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@325)) |i#31|)) ) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node this@@325) |i#31|) ) :qid PivotBetreeidfy.66:17!1728))
 ))
 (let (($x221602 (PivotBetree.BetreeNode.LinkedChildren ?x193028)))
 (let (($x193288 (|PivotBetree.BetreeNode.LinkedChildren#canCall| ?x193028)))
 (let (($x137956 (PivotBetree.BetreeNode.WF ?x10306 ?x193028)))
 (let (($x193020 (|PivotBetree.BetreeNode.WF#canCall| ?x193028)))
 (let (($x235627 (or $x59716 (=> $x193020 (or $x137956 (=> (and $x193044 $x193288) (or $x221602 (=> $x193044 $x154263))))))))
 (let (($x221566 (and (=> (and (= ?x201644 (- 0 684333)) $x29694) $x235627) (and (=> (and (= ?x201644 (- 0 684527)) $x29694) (or $x59716 $x193044)) $x220940))))
 (let (($x55066 (=> $x29694 (or $x59716 (=> $x193020 (or $x137956 (=> $x193044 $x193266)))))))
 (let ((?x229366 (BoundedPivotsLib.__default.NumBuckets ?x103079)))
 (let ((?x137822 (|Seq#Length| ?x193240)))
 (let (($x193220 (= ?x137822 ?x229366)))
 (let (($x192618 (PivotBetree.BetreeNode.LocalStructure ?x193028)))
 (let (($x192636 (|PivotBetree.BetreeNode.LocalStructure#canCall| ?x193028)))
 (let (($x193244 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (=> $x193044 $x193220)))))))
 (let (($x217792 (=> $x29694 (or $x59716 $x193244))))
 (let (($x62646 (and (=> (and (= ?x201644 (- 0 684181)) $x29694) (or $x59716 $x193244)) (and (=> (and (= ?x201644 (- 0 684267)) $x29694) (or $x59716 (=> $x193020 (or $x137956 (=> $x193044 $x193266))))) $x221566))))
 (let ((?x199540 (|Seq#Length| ?x103079)))
 (let (($x193174 (INTERNAL_ge_boogie ?x199540 2)))
 (let (($x229334 (BoundedPivotsLib.__default.WFPivots ?x103079)))
 (let (($x193010 (|BoundedPivotsLib.__default.WFPivots#canCall| ?x103079)))
 (let (($x193194 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 $x193174))))))))
 (let (($x217789 (=> $x29694 (or $x59716 $x193194))))
 (let (($x220520 (forall ((|i#30| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#30|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193182 (BoundedPivotsLib.__default.ElementIsKey ?x229364)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let ((?x199540 (|Seq#Length| ?x103079)))
 (let (($x221003 (INTERNAL_lt_boogie |i#30| ?x199540)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#30|)))
 (=> (and (and $x9901 $x221003) $x193082) $x193182)))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#30|)) ) :qid BoundedPivotsLibidfy.39:16!1708))
 ))
 (let (($x193148 (BoundedPivotsLib.__default.ElementsAreKeys ?x103079)))
 (let (($x229380 (|BoundedPivotsLib.__default.ElementsAreKeys#canCall| ?x103079)))
 (let (($x289054 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 (=> $x229380 (or $x193148 $x220520))))))))
 (let (($x211986 (=> (and (= ?x201644 (- 0 683899)) $x29694) (or $x59716 (=> $x193020 (or $x137956 $x289054))))))
 (let (($x203006 (=> $x193010 (or $x229334 (=> $x229380 (or $x193148 (U_2_bool (Lit (bool_2_U true)))))))))
 (let (($x203002 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 (=> $x229380 (or $x193148 (U_2_bool (Lit (bool_2_U true)))))))))))))
 (let (($x248280 (=> $x29694 (or $x59716 $x203002))))
 (let (($x137775 (and (=> (and (= ?x201644 (- 0 683787)) $x29694) (or $x59716 $x203002)) (and $x211986 (and (=> (and (= ?x201644 (- 0 684081)) $x29694) (or $x59716 $x193194)) $x62646)))))
 (let (($x206920 (forall ((|i#29| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#29|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#29|)))
 (let (($x193084 (and $x9901 (INTERNAL_lt_boogie |i#29| (BoundedPivotsLib.__default.NumBuckets ?x103079)))))
 (=> $x193084 $x193082)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#29|)) ) :qid BoundedPivotsLibidfy.56:16!1695))
 ))
 (let (($x166249 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 $x206920))))))))
 (let (($x229344 (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted ?x103079)))
 (let (($x193076 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 $x229344))))))))
 (let (($x248278 (=> $x29694 (or $x59716 $x193076))))
 (let (($x193320 (and (=> (and (= ?x201644 (- 0 683545)) $x29694) (or $x59716 $x193076)) (and (=> (and (= ?x201644 (- 0 683643)) $x29694) (or $x59716 $x166249)) $x137775))))
 (let (($x193050 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (U_2_bool (Lit (bool_2_U true)))))))))
 (let (($x202770 (=> $x29694 (or $x59716 $x193050))))
 (let ((?x202366 (PivotBetree.Path.depth this@@325)))
 (let (($x202364 (INTERNAL_lt_boogie 0 ?x202366)))
 (let (($x193322 (and (=> (= ?x201644 (- 0 683473)) $x202364) (and (=> (and (= ?x201644 (- 0 683481)) $x29694) (or $x59716 $x193050)) $x193320))))
 (let (($x193328 ($IsAlloc this@@325 Tclass.PivotBetree.Path $Heap@@108)))
 (let (($x248958 (= |newChild#Z#0@0| |let#0#0#0|)))
 (let (($x248962 ($Is |let#0#0#0| Tclass.PivotBetree.BetreeNode)))
 (let (($x248960 (and (and $x62707 (|PivotBetree.Path.Substitute#canCall| ?x61480 |replacement#0@@17|)) $x248962)))
 (let (($x248871 (= |let#0#0#0| (PivotBetree.Path.Substitute ?x10306 ?x61480 |replacement#0@@17|))))
 (let (($x248875 (|PivotBetree.Path.Substitute#canCall| ?x61480 |replacement#0@@17|)))
 (let (($x248873 (and $x248875 $x248871)))
 (let ((?x200704 (PivotBetree.Path.depth ?x61480)))
 (let (($x35182 (= ?x200704 ?x202366)))
 (let (($x128843 (< ?x200704 ?x202366)))
 (let (($x248883 (or $x128843 (and $x35182 (< (LitInt 1) (LitInt 0))))))
 (let (($x103632 (and (=> (= ?x201644 (- 0 683378)) $x248883) (=> (and $x248883 $x248873 (and $x248960 (and $x248958 $x193328))) $x193322))))
 (let ((?x10057 (LitInt 0)))
 (let ((?x119943 (LitInt 1)))
 (let (($x248905 (= ?x119943 ?x10057)))
 (let (($x248903 (or (or (<= 0 ?x10057) $x128843) $x248905)))
 (let (($x63191 (or (<= 0 ?x202366) $x35182)))
 (let (($x59673 (and (=> (= ?x201644 (- 0 683322)) $x63191) (=> $x63191 (and (=> (= ?x201644 (- 0 683344)) $x248903) (=> $x248903 $x103632))))))
 (let (($x35630 (forall (($o@@196 T@U) ($f@@126 T@U) )(! (let ((?x63 (type $f@@126)))
 (let ((?x5145 (FieldTypeInv0 ?x63)))
 (let ((?x5870 (FieldType ?x5145)))
 (let (($x6005 (= ?x63 ?x5870)))
 (let ((?x176 (type $o@@196)))
 (let (($x5963 (= ?x176 refType)))
 (let (($x6006 (and $x5963 $x6005)))
 (=> (and $x6006 false) (U_2_bool (MapType6Select $_Frame@0@@0 $o@@196 $f@@126)))))))))) :qid PivotBetreeidfy.512:33))
 ))
 (let (($x221999 (PivotBetree.Path.ValidReplacement ?x61480 |replacement#0@@17|)))
 (let (($x201270 (|DomainMod.Domain#Equal| (PivotBetree.BetreeNode.MyDomain |replacement#0@@17|) (PivotBetree.BetreeNode.MyDomain (PivotBetree.Path.Target ?x10439 ?x61480)))))
 (let (($x200860 (|PivotBetree.Path.ValidReplacement#canCall| ?x61480 |replacement#0@@17|)))
 (let (($x215352 (and (=> (and (= ?x201644 (- 0 683258)) $x200860) (or $x221999 $x201270)) (=> (and $x221999 (= |b$reqreads#3@0| $x35630)) $x59673))))
 (let (($x116550 (=> $x200860 (or $x221999 (PivotBetree.BetreeNode.BetreeNode_q |replacement#0@@17|)))))
 (let (($x13874 (forall ((|i#28| Int) )(! (let ((?x223897 (PivotBetree.BetreeNode.DomainRoutedToChild |replacement#0@@17| |i#28|)))
 (let ((?x9483 (PivotBetree.BetreeNode.children |replacement#0@@17|)))
 (let ((?x63228 (|Seq#Index| ?x9483 |i#28|)))
 (let ((?x222014 ($Unbox DatatypeTypeType ?x63228)))
 (let (($x223891 (|DomainMod.Domain#Equal| (PivotBetree.BetreeNode.MyDomain ?x222014) ?x223897)))
 (let (($x223893 (PivotBetree.BetreeNode.LocalStructure ?x222014)))
 (let (($x143069 (PivotBetree.BetreeNode.BetreeNode_q ?x222014)))
 (let (($x9610 (PivotBetree.BetreeNode.ValidChildIndex |replacement#0@@17| |i#28|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#28|)))
 (=> (and $x9901 (and (and $x9610 $x143069) $x223893)) $x223891)))))))))) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex |replacement#0@@17| |i#28|) ) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild |replacement#0@@17| |i#28|) ) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children |replacement#0@@17|) |i#28|)) ) :qid PivotBetreeidfy.66:17!1654))
 ))
 (let (($x115929 (PivotBetree.BetreeNode.BetreeNode_q |replacement#0@@17|)))
 (let (($x116303 (PivotBetree.BetreeNode.LinkedChildren |replacement#0@@17|)))
 (let (($x116306 (|PivotBetree.BetreeNode.LinkedChildren#canCall| |replacement#0@@17|)))
 (let (($x200874 (PivotBetree.BetreeNode.WF ?x10306 |replacement#0@@17|)))
 (let (($x200890 (|PivotBetree.BetreeNode.WF#canCall| |replacement#0@@17|)))
 (let (($x201180 (or $x221999 (=> $x200890 (or $x200874 (=> (and $x115929 $x116306) (or $x116303 (=> $x115929 $x13874))))))))
 (let (($x229468 (and (=> (and (= ?x201644 (- 0 683091)) $x200860) $x201180) (and (=> (and (= ?x201644 (- 0 683237)) $x200860) (or $x221999 $x115929)) $x215352))))
 (let ((?x9483 (PivotBetree.BetreeNode.children |replacement#0@@17|)))
 (let (($x9578 (PivotBetree.__default.WFChildren ?x10439 ?x9483)))
 (let (($x116225 (=> (and (= ?x201644 (- 0 683043)) $x200860) (or $x221999 (=> $x200890 (or $x200874 (=> $x115929 $x9578)))))))
 (let ((?x115930 (PivotBetree.BetreeNode.pivotTable |replacement#0@@17|)))
 (let ((?x14694 (BoundedPivotsLib.__default.NumBuckets ?x115930)))
 (let (($x218144 (= (|Seq#Length| ?x9483) ?x14694)))
 (let (($x200812 (PivotBetree.BetreeNode.LocalStructure |replacement#0@@17|)))
 (let (($x200826 (|PivotBetree.BetreeNode.LocalStructure#canCall| |replacement#0@@17|)))
 (let (($x143093 (=> $x200860 (or $x221999 (=> $x200890 (or $x200874 (=> $x200826 (or $x200812 (=> $x115929 $x218144)))))))))
 (let ((?x201014 (|Seq#Length| ?x115930)))
 (let (($x63239 (INTERNAL_ge_boogie ?x201014 2)))
 (let (($x143097 (BoundedPivotsLib.__default.WFPivots ?x115930)))
 (let (($x143098 (|BoundedPivotsLib.__default.WFPivots#canCall| ?x115930)))
 (let (($x14894 (=> $x200890 (or $x200874 (=> $x200826 (or $x200812 (=> (and $x115929 $x143098) (or $x143097 $x63239))))))))
 (let (($x193326 (and (=> (and (= ?x201644 (- 0 682914)) $x200860) (or $x221999 $x14894)) (and (=> (and (= ?x201644 (- 0 682984)) $x200860) (or $x221999 (=> $x200890 (or $x200874 (=> $x200826 (or $x200812 (=> $x115929 $x218144))))))) (and $x116225 $x229468)))))
 (let (($x222005 (forall ((|i#27| Int) )(! (let ((?x115930 (PivotBetree.BetreeNode.pivotTable |replacement#0@@17|)))
 (let ((?x64581 (|Seq#Index| ?x115930 |i#27|)))
 (let ((?x64588 ($Unbox DatatypeTypeType ?x64581)))
 (let (($x219861 (BoundedPivotsLib.__default.ElementIsKey ?x64588)))
 (let (($x35504 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x64588)))
 (let ((?x201014 (|Seq#Length| ?x115930)))
 (let (($x201024 (INTERNAL_lt_boogie |i#27| ?x201014)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#27|)))
 (=> (and (and $x9901 $x201024) $x35504) $x219861))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable |replacement#0@@17|) |i#27|)) ) :qid BoundedPivotsLibidfy.39:16!1629))
 ))
 (let (($x14624 (BoundedPivotsLib.__default.ElementsAreKeys ?x115930)))
 (let (($x200942 (|BoundedPivotsLib.__default.ElementsAreKeys#canCall| ?x115930)))
 (let (($x201074 (=> $x200826 (or $x200812 (=> (and $x115929 $x143098) (or $x143097 (=> $x200942 (or $x14624 $x222005))))))))
 (let (($x143080 (=> (and (= ?x201644 (- 0 682777)) $x200860) (or $x221999 (=> $x200890 (or $x200874 $x201074))))))
 (let (($x200940 (=> $x143098 (or $x143097 (=> $x200942 (or $x14624 (U_2_bool (Lit (bool_2_U true)))))))))
 (let (($x223901 (=> $x200860 (or $x221999 (=> $x200890 (or $x200874 (=> $x200826 (or $x200812 (=> (and $x115929 $x143098) (or $x143097 (=> $x200942 (or $x14624 (U_2_bool (Lit (bool_2_U true)))))))))))))))
 (let (($x64587 (forall ((|i#26| Int) )(! (let ((?x115930 (PivotBetree.BetreeNode.pivotTable |replacement#0@@17|)))
 (let ((?x64581 (|Seq#Index| ?x115930 |i#26|)))
 (let ((?x64588 ($Unbox DatatypeTypeType ?x64581)))
 (let (($x35504 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x64588)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#26|)))
 (let (($x218169 (and $x9901 (INTERNAL_lt_boogie |i#26| (BoundedPivotsLib.__default.NumBuckets ?x115930)))))
 (=> $x218169 $x35504))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable |replacement#0@@17|) |i#26|)) ) :qid BoundedPivotsLibidfy.56:16!1614))
 ))
 (let (($x9447 (=> $x200890 (or $x200874 (=> $x200826 (or $x200812 (=> (and $x115929 $x143098) (or $x143097 $x64587))))))))
 (let (($x193352 (and (=> (and (= ?x201644 (- 0 682590)) $x200860) (or $x221999 $x9447)) (and (=> (and (= ?x201644 (- 0 682698)) $x200860) (or $x221999 (=> $x200890 (or $x200874 (=> $x200826 (or $x200812 (=> (and $x115929 $x143098) (or $x143097 (=> $x200942 (or $x14624 (U_2_bool (Lit (bool_2_U true))))))))))))) (and $x143080 $x193326)))))
 (let (($x143095 (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted ?x115930)))
 (let (($x215659 (=> $x200890 (or $x200874 (=> $x200826 (or $x200812 (=> (and $x115929 $x143098) (or $x143097 $x143095))))))))
 (let (($x200876 (=> $x200890 (or $x200874 (=> $x200826 (or $x200812 (U_2_bool (Lit (bool_2_U true)))))))))
 (let (($x193324 (and (=> (and (= ?x201644 (- 0 682476)) $x200860) (or $x221999 $x200876)) (and (=> (and (= ?x201644 (- 0 682522)) $x200860) (or $x221999 $x215659)) $x193352))))
 (let (($x201524 (PivotBetree.Path.Valid ?x10306 ?x61480)))
 (let (($x64161 (PivotBetree.Path.Valid ?x10439 (PivotBetree.Path.Subpath ?x61480))))
 (let (($x200870 (INTERNAL_lt_boogie 0 ?x200704)))
 (let (($x209583 (|PivotBetree.Path.Valid#canCall| ?x61480)))
 (let (($x123793 (and (=> (and (= ?x201644 (- 0 682420)) $x209583) (or $x201524 (=> $x200870 $x64161))) (=> $x201524 $x193324))))
 (let (($x200742 (forall ((|i#25| Int) )(! (let ((?x61480 (PivotBetree.Path.Subpath this@@325)))
 (let ((?x117593 (PivotBetree.Path.node ?x61480)))
 (let ((?x62846 (PivotBetree.BetreeNode.children ?x117593)))
 (let ((?x221022 (|Seq#Index| ?x62846 |i#25|)))
 (let ((?x221023 ($Unbox DatatypeTypeType ?x221022)))
 (let (($x63074 (PivotBetree.BetreeNode.BetreeNode_q ?x221023)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#25|)))
 (let (($x9237 (and $x9901 (INTERNAL_lt_boogie |i#25| (|Seq#Length| ?x62846)))))
 (=> $x9237 $x63074))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325))) |i#25|)) ) :qid PivotBetreeidfy.99:18!1590))
 ))
 (let (($x115557 (PivotBetree.BetreeNode.IsIndex ?x117593)))
 (let (($x64427 (|PivotBetree.BetreeNode.IsIndex#canCall| ?x117593)))
 (let (($x64185 (=> (and (= ?x201644 (- 0 682306)) $x209583) (or $x201524 (=> (and $x200870 $x64427) (or $x115557 $x200742))))))
 (let (($x9250 (=> (and (= ?x201644 (- 0 682246)) $x209583) (or $x201524 (=> (and $x200870 $x64427) (or $x115557 $x62740))))))
 (let ((?x62741 (PivotBetree.BetreeNode.pivotTable ?x117593)))
 (let ((?x73049 (|Seq#Length| ?x62741)))
 (let ((?x221047 ($Unbox DatatypeTypeType (|Seq#Index| ?x62741 (INTERNAL_sub_boogie ?x73049 1)))))
 (let ((?x248596 (PivotBetree.Path.key ?x61480)))
 (let ((?x229534 (BoundedPivotsLib.__default.KeyToElement ?x248596)))
 (let (($x200668 (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ?x229534 ?x221047))))
 (let (($x143132 (Upperbounded__Lexicographic__Byte__Order.__default.lt ?x229534 ?x221047)))
 (let (($x9103 (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ?x229534 ?x221047)))
 (let (($x64426 (BoundedPivotsLib.__default.BoundedKey ?x62741 ?x248596)))
 (let (($x64425 (|BoundedPivotsLib.__default.BoundedKey#canCall| ?x62741 ?x248596)))
 (let (($x248622 (PivotBetree.BetreeNode.KeyInDomain ?x117593 ?x248596)))
 (let (($x248600 (|PivotBetree.BetreeNode.KeyInDomain#canCall| ?x117593 ?x248596)))
 (let (($x64422 (or $x201524 (=> $x248600 (or $x248622 (=> $x64425 (or $x64426 (=> $x9103 (or $x143132 $x200668)))))))))
 (let (($x219775 (and (=> (and (= ?x201644 (- 0 682038)) $x209583) $x64422) (and $x9250 (and $x64185 $x123793)))))
 (let ((?x200586 (Upperbounded__Lexicographic__Byte__Order.Element.e ?x229534)))
 (let (($x64387 (Lexicographic__Byte__Order.__default.lte ?x200586 (Upperbounded__Lexicographic__Byte__Order.Element.e ?x221047))))
 (let (($x64396 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x221047)))
 (let (($x219881 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229534)))
 (let (($x200644 (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q ?x221047)))
 (let (($x200634 (Upperbounded__Lexicographic__Byte__Order.__default.lte ?x229534 ?x221047)))
 (let (($x115457 (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ?x229534 ?x221047)))
 (let (($x200674 (=> $x9103 (or $x143132 (=> $x115457 (or $x200634 (or $x200644 (and (and $x219881 $x64396) $x64387))))))))
 (let (($x215360 (=> (and (= ?x201644 (- 0 681672)) $x209583) (or $x201524 (=> $x248600 (or $x248622 (=> $x64425 (or $x64426 $x200674))))))))
 (let ((?x64205 ($Unbox DatatypeTypeType (|Seq#Index| ?x62741 ?x10057))))
 (let (($x221951 (Lexicographic__Byte__Order.__default.lte (Upperbounded__Lexicographic__Byte__Order.Element.e ?x64205) ?x200586)))
 (let (($x200582 (and (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x64205) $x219881) $x221951)))
 (let (($x143151 (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q ?x229534)))
 (let (($x64201 (Upperbounded__Lexicographic__Byte__Order.__default.lte ?x64205 ?x229534)))
 (let (($x24569 (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ?x64205 ?x229534)))
 (let (($x64203 (=> $x248600 (or $x248622 (=> $x64425 (or $x64426 (=> $x24569 (or $x64201 (or $x143151 $x200582)))))))))
 (let (($x224026 (and (=> (and (= ?x201644 (- 0 681446)) $x209583) (or $x201524 $x64203)) (and $x215360 $x219775))))
 (let (($x64419 (=> (and (= ?x201644 (- 0 681386)) $x209583) (or $x201524 (=> $x248600 (or $x248622 $x62740))))))
 (let (($x64468 (forall ((|i#24| Int) )(! (let ((?x61480 (PivotBetree.Path.Subpath this@@325)))
 (let ((?x117593 (PivotBetree.Path.node ?x61480)))
 (let ((?x248499 (PivotBetree.BetreeNode.DomainRoutedToChild ?x117593 |i#24|)))
 (let ((?x62846 (PivotBetree.BetreeNode.children ?x117593)))
 (let ((?x221022 (|Seq#Index| ?x62846 |i#24|)))
 (let ((?x221023 ($Unbox DatatypeTypeType ?x221022)))
 (let (($x248501 (|DomainMod.Domain#Equal| (PivotBetree.BetreeNode.MyDomain ?x221023) ?x248499)))
 (let (($x248476 (PivotBetree.BetreeNode.LocalStructure ?x221023)))
 (let (($x63074 (PivotBetree.BetreeNode.BetreeNode_q ?x221023)))
 (let (($x229521 (PivotBetree.BetreeNode.ValidChildIndex ?x117593 |i#24|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#24|)))
 (=> (and $x9901 (and (and $x229521 $x63074) $x248476)) $x248501)))))))))))) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325)) |i#24|) ) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325))) |i#24|)) ) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325)) |i#24|) ) :qid PivotBetreeidfy.66:17!1551))
 ))
 (let (($x193412 (PivotBetree.BetreeNode.LinkedChildren ?x117593)))
 (let (($x74237 (|PivotBetree.BetreeNode.LinkedChildren#canCall| ?x117593)))
 (let (($x239163 (PivotBetree.BetreeNode.WF ?x10306 ?x117593)))
 (let (($x235709 (|PivotBetree.BetreeNode.WF#canCall| ?x117593)))
 (let (($x64431 (or $x248622 (=> $x235709 (or $x239163 (=> (and $x62740 $x74237) (or $x193412 (=> $x62740 $x64468))))))))
 (let (($x215646 (and (=> (and (= ?x201644 (- 0 681136)) $x209583) (or $x201524 (=> $x248600 $x64431))) (and $x64419 $x224026))))
 (let (($x64474 (=> $x209583 (or $x201524 (=> $x248600 (or $x248622 (=> $x235709 (or $x239163 (=> $x62740 $x239715)))))))))
 (let ((?x143056 (BoundedPivotsLib.__default.NumBuckets ?x62741)))
 (let ((?x62834 (|Seq#Length| ?x62846)))
 (let (($x62847 (= ?x62834 ?x143056)))
 (let (($x248428 (PivotBetree.BetreeNode.LocalStructure ?x117593)))
 (let (($x207995 (|PivotBetree.BetreeNode.LocalStructure#canCall| ?x117593)))
 (let (($x62857 (=> $x235709 (or $x239163 (=> $x207995 (or $x248428 (=> $x62740 $x62847)))))))
 (let (($x64524 (=> (and (= ?x201644 (- 0 680906)) $x209583) (or $x201524 (=> $x248600 (or $x248622 $x62857))))))
 (let (($x62797 (INTERNAL_ge_boogie ?x73049 2)))
 (let (($x62742 (BoundedPivotsLib.__default.WFPivots ?x62741)))
 (let (($x62748 (|BoundedPivotsLib.__default.WFPivots#canCall| ?x62741)))
 (let (($x62774 (=> $x235709 (or $x239163 (=> $x207995 (or $x248428 (=> (and $x62740 $x62748) (or $x62742 $x62797))))))))
 (let (($x64520 (=> (and (= ?x201644 (- 0 680762)) $x209583) (or $x201524 (=> $x248600 (or $x248622 $x62774))))))
 (let (($x64605 (forall ((|i#23| Int) )(! (let ((?x61480 (PivotBetree.Path.Subpath this@@325)))
 (let ((?x117593 (PivotBetree.Path.node ?x61480)))
 (let ((?x62741 (PivotBetree.BetreeNode.pivotTable ?x117593)))
 (let ((?x62730 (|Seq#Index| ?x62741 |i#23|)))
 (let ((?x62809 ($Unbox DatatypeTypeType ?x62730)))
 (let (($x118744 (BoundedPivotsLib.__default.ElementIsKey ?x62809)))
 (let (($x198734 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x62809)))
 (let ((?x73049 (|Seq#Length| ?x62741)))
 (let (($x62793 (INTERNAL_lt_boogie |i#23| ?x73049)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#23|)))
 (=> (and (and $x9901 $x62793) $x198734) $x118744))))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325))) |i#23|)) ) :qid BoundedPivotsLibidfy.39:16!1532))
 ))
 (let (($x62778 (BoundedPivotsLib.__default.ElementsAreKeys ?x62741)))
 (let (($x201436 (|BoundedPivotsLib.__default.ElementsAreKeys#canCall| ?x62741)))
 (let (($x64558 (=> $x207995 (or $x248428 (=> (and $x62740 $x62748) (or $x62742 (=> $x201436 (or $x62778 $x64605))))))))
 (let (($x35270 (=> (and (= ?x201644 (- 0 680526)) $x209583) (or $x201524 (=> $x248600 (or $x248622 (=> $x235709 (or $x239163 $x64558))))))))
 (let (($x59744 (and $x35270 (and $x64520 (and $x64524 (and (=> (and (= ?x201644 (- 0 681034)) $x209583) (or $x201524 (=> $x248600 (or $x248622 (=> $x235709 (or $x239163 (=> $x62740 $x239715))))))) $x215646))))))
 (let (($x117106 (=> $x62748 (or $x62742 (=> $x201436 (or $x62778 (U_2_bool (Lit (bool_2_U true)))))))))
 (let (($x198728 (=> $x235709 (or $x239163 (=> $x207995 (or $x248428 (=> (and $x62740 $x62748) (or $x62742 (=> $x201436 (or $x62778 (U_2_bool (Lit (bool_2_U true)))))))))))))
 (let (($x64614 (=> (and (= ?x201644 (- 0 680368)) $x209583) (or $x201524 (=> $x248600 (or $x248622 $x198728))))))
 (let (($x201322 (forall ((|i#22| Int) )(! (let ((?x61480 (PivotBetree.Path.Subpath this@@325)))
 (let ((?x117593 (PivotBetree.Path.node ?x61480)))
 (let ((?x62741 (PivotBetree.BetreeNode.pivotTable ?x117593)))
 (let ((?x62730 (|Seq#Index| ?x62741 |i#22|)))
 (let ((?x62809 ($Unbox DatatypeTypeType ?x62730)))
 (let (($x198734 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x62809)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#22|)))
 (let (($x31592 (and $x9901 (INTERNAL_lt_boogie |i#22| (BoundedPivotsLib.__default.NumBuckets ?x62741)))))
 (=> $x31592 $x198734))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325))) |i#22|)) ) :qid BoundedPivotsLibidfy.56:16!1520))
 ))
 (let (($x248835 (=> $x235709 (or $x239163 (=> $x207995 (or $x248428 (=> (and $x62740 $x62748) (or $x62742 $x201322))))))))
 (let (($x248817 (=> (and (= ?x201644 (- 0 680176)) $x209583) (or $x201524 (=> $x248600 (or $x248622 $x248835))))))
 (let (($x62743 (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted ?x62741)))
 (let (($x62747 (=> $x235709 (or $x239163 (=> $x207995 (or $x248428 (=> (and $x62740 $x62748) (or $x62742 $x62743))))))))
 (let (($x248742 (=> (and (= ?x201644 (- 0 680034)) $x209583) (or $x201524 (=> $x248600 (or $x248622 $x62747))))))
 (let (($x248444 (=> $x235709 (or $x239163 (=> $x207995 (or $x248428 (U_2_bool (Lit (bool_2_U true)))))))))
 (let (($x248638 (=> (and (= ?x201644 (- 0 679934)) $x209583) (or $x201524 (=> $x248600 (or $x248622 $x248444))))))
 (let (($x248526 (forall ((|i#21| Int) )(! (let ((?x61480 (PivotBetree.Path.Subpath this@@325)))
 (let ((?x117593 (PivotBetree.Path.node ?x61480)))
 (let ((?x248499 (PivotBetree.BetreeNode.DomainRoutedToChild ?x117593 |i#21|)))
 (let ((?x62846 (PivotBetree.BetreeNode.children ?x117593)))
 (let ((?x221022 (|Seq#Index| ?x62846 |i#21|)))
 (let ((?x221023 ($Unbox DatatypeTypeType ?x221022)))
 (let (($x248501 (|DomainMod.Domain#Equal| (PivotBetree.BetreeNode.MyDomain ?x221023) ?x248499)))
 (let (($x248476 (PivotBetree.BetreeNode.LocalStructure ?x221023)))
 (let (($x63074 (PivotBetree.BetreeNode.BetreeNode_q ?x221023)))
 (let (($x229521 (PivotBetree.BetreeNode.ValidChildIndex ?x117593 |i#21|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#21|)))
 (=> (and $x9901 (and (and $x229521 $x63074) $x248476)) $x248501)))))))))))) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325)) |i#21|) ) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325))) |i#21|)) ) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325)) |i#21|) ) :qid PivotBetreeidfy.66:17!1505))
 ))
 (let (($x248560 (or $x201524 (=> $x235709 (or $x239163 (=> (and $x62740 $x74237) (or $x193412 (=> $x62740 $x248526))))))))
 (let (($x123461 (and (=> (and (= ?x201644 (- 0 679716)) $x209583) $x248560) (and $x248638 (and $x248742 (and $x248817 (and $x64614 $x59744)))))))
 (let (($x218219 (=> (and (= ?x201644 (- 0 679646)) $x209583) (or $x201524 (=> $x235709 (or $x239163 (=> $x62740 $x239715)))))))
 (let (($x59735 (and (=> (and (= ?x201644 (- 0 679550)) $x209583) (or $x201524 $x62857)) (and $x218219 $x123461))))
 (let (($x62801 (forall ((|i#20| Int) )(! (let ((?x61480 (PivotBetree.Path.Subpath this@@325)))
 (let ((?x117593 (PivotBetree.Path.node ?x61480)))
 (let ((?x62741 (PivotBetree.BetreeNode.pivotTable ?x117593)))
 (let ((?x62730 (|Seq#Index| ?x62741 |i#20|)))
 (let ((?x62809 ($Unbox DatatypeTypeType ?x62730)))
 (let (($x118744 (BoundedPivotsLib.__default.ElementIsKey ?x62809)))
 (let (($x198734 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x62809)))
 (let ((?x73049 (|Seq#Length| ?x62741)))
 (let (($x62793 (INTERNAL_lt_boogie |i#20| ?x73049)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#20|)))
 (=> (and (and $x9901 $x62793) $x198734) $x118744))))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325))) |i#20|)) ) :qid BoundedPivotsLibidfy.39:16!1476))
 ))
 (let (($x62818 (=> $x207995 (or $x248428 (=> (and $x62740 $x62748) (or $x62742 (=> $x201436 (or $x62778 $x62801))))))))
 (let (($x62798 (=> (and (= ?x201644 (- 0 679234)) $x209583) (or $x201524 (=> $x235709 (or $x239163 $x62818))))))
 (let (($x59738 (and $x62798 (and (=> (and (= ?x201644 (- 0 679438)) $x209583) (or $x201524 $x62774)) $x59735))))
 (let (($x62766 (forall ((|i#19| Int) )(! (let ((?x61480 (PivotBetree.Path.Subpath this@@325)))
 (let ((?x117593 (PivotBetree.Path.node ?x61480)))
 (let ((?x62741 (PivotBetree.BetreeNode.pivotTable ?x117593)))
 (let ((?x62730 (|Seq#Index| ?x62741 |i#19|)))
 (let ((?x62809 ($Unbox DatatypeTypeType ?x62730)))
 (let (($x198734 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x62809)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#19|)))
 (let (($x31592 (and $x9901 (INTERNAL_lt_boogie |i#19| (BoundedPivotsLib.__default.NumBuckets ?x62741)))))
 (=> $x31592 $x198734))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node (PivotBetree.Path.Subpath this@@325))) |i#19|)) ) :qid BoundedPivotsLibidfy.56:16!1460))
 ))
 (let (($x10002 (=> $x235709 (or $x239163 (=> $x207995 (or $x248428 (=> (and $x62740 $x62748) (or $x62742 $x62766))))))))
 (let (($x59739 (and (=> (and (= ?x201644 (- 0 678948)) $x209583) (or $x201524 $x10002)) (and (=> (and (= ?x201644 (- 0 679108)) $x209583) (or $x201524 $x198728)) $x59738))))
 (let (($x202746 (and (=> (and (= ?x201644 (- 0 678770)) $x209583) (or $x201524 $x248444)) (and (=> (and (= ?x201644 (- 0 678838)) $x209583) (or $x201524 $x62747)) $x59739))))
 (let (($x203172 ($IsAlloc |replacement#0@@17| Tclass.PivotBetree.BetreeNode $Heap@@108)))
 (let (($x62706 ($IsAlloc ?x61480 Tclass.PivotBetree.Path $Heap@@108)))
 (let (($x62717 (forall (($o@@195 T@U) ($f@@125 T@U) )(! (let ((?x63 (type $f@@125)))
 (let ((?x5145 (FieldTypeInv0 ?x63)))
 (let ((?x5870 (FieldType ?x5145)))
 (let (($x6005 (= ?x63 ?x5870)))
 (let ((?x176 (type $o@@195)))
 (let (($x5963 (= ?x176 refType)))
 (let (($x6006 (and $x5963 $x6005)))
 (=> (and $x6006 false) (U_2_bool (MapType6Select $_Frame@0@@0 $o@@195 $f@@125)))))))))) :qid PivotBetreeidfy.512:23))
 ))
 (let (($x61493 (=> (and (and $x59716 (= |b$reqreads#2@0| $x62717)) (and $x65717 (and $x62706 $x203172))) $x202746)))
 (let (($x60070 (and (=> (and (= ?x201644 (- 0 678266)) $x29694) (or $x59716 (=> $x61528 (or $x61531 $x60037)))) (and (=> (and (= ?x201644 (- 0 678556)) $x29694) (or $x59716 (=> $x61528 (or $x61531 (=> $x60000 (or $x60001 $x137576)))))) $x61493))))
 (let (($x59945 (and (=> (and (= ?x201644 (- 0 678064)) $x29694) (or $x59716 $x193044)) (and (=> (and (= ?x201644 (- 0 678094)) $x29694) (or $x59716 (=> $x61528 (or $x61531 (=> $x59950 (or $x59747 (or $x122902 $x137250))))))) $x60070))))
 (let (($x248365 (forall ((|i#18| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x59682 (PivotBetree.BetreeNode.DomainRoutedToChild ?x193028 |i#18|)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x193306 (|Seq#Index| ?x193240 |i#18|)))
 (let ((?x193304 ($Unbox DatatypeTypeType ?x193306)))
 (let ((?x221626 (PivotBetree.BetreeNode.MyDomain ?x193304)))
 (let (($x221635 (|DomainMod.Domain#Equal| ?x221626 ?x59682)))
 (let (($x202802 (PivotBetree.BetreeNode.LocalStructure ?x193304)))
 (let (($x193302 (PivotBetree.BetreeNode.BetreeNode_q ?x193304)))
 (let (($x221603 (PivotBetree.BetreeNode.ValidChildIndex ?x193028 |i#18|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#18|)))
 (=> (and $x9901 (and (and $x221603 $x193302) $x202802)) $x221635)))))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@325)) |i#18|)) ) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node this@@325) |i#18|) ) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild (PivotBetree.Path.node this@@325) |i#18|) ) :qid PivotBetreeidfy.66:17!1403))
 ))
 (let (($x64623 (or $x59716 (=> $x193020 (or $x137956 (=> (and $x193044 $x193288) (or $x221602 (=> $x193044 $x248365))))))))
 (let (($x220765 (and (=> (and (= ?x201644 (- 0 677804)) $x29694) (or $x59716 (=> $x193020 (or $x137956 (=> $x193044 $x193266))))) (and (=> (and (= ?x201644 (- 0 677870)) $x29694) $x64623) $x59945))))
 (let (($x59957 (and (=> (and (= ?x201644 (- 0 677618)) $x29694) (or $x59716 $x193194)) (and (=> (and (= ?x201644 (- 0 677718)) $x29694) (or $x59716 $x193244)) $x220765))))
 (let (($x10223 (forall ((|i#17| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#17|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193182 (BoundedPivotsLib.__default.ElementIsKey ?x229364)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let ((?x199540 (|Seq#Length| ?x103079)))
 (let (($x221003 (INTERNAL_lt_boogie |i#17| ?x199540)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#17|)))
 (=> (and (and $x9901 $x221003) $x193082) $x193182)))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#17|)) ) :qid BoundedPivotsLibidfy.39:16!1377))
 ))
 (let (($x201570 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 (=> $x229380 (or $x193148 $x10223))))))))
 (let (($x62684 (=> (and (= ?x201644 (- 0 677436)) $x29694) (or $x59716 (=> $x193020 (or $x137956 $x201570))))))
 (let (($x198716 (forall ((|i#16| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#16|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#16|)))
 (let (($x193084 (and $x9901 (INTERNAL_lt_boogie |i#16| (BoundedPivotsLib.__default.NumBuckets ?x103079)))))
 (=> $x193084 $x193082)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#16|)) ) :qid BoundedPivotsLibidfy.56:16!1359))
 ))
 (let (($x62655 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 $x198716))))))))
 (let (($x59956 (and (=> (and (= ?x201644 (- 0 677180)) $x29694) (or $x59716 $x62655)) (and (=> (and (= ?x201644 (- 0 677324)) $x29694) (or $x59716 $x203002)) (and $x62684 $x59957)))))
 (let (($x234701 (and (=> (and (= ?x201644 (- 0 677018)) $x29694) (or $x59716 $x193050)) (and (=> (and (= ?x201644 (- 0 677082)) $x29694) (or $x59716 $x193076)) $x59956))))
 (let (($x169257 ($IsAlloc |newChild#Z#0@0| Tclass.PivotBetree.BetreeNode $Heap@@108)))
 (let (($x169259 ($Is |newChild#Z#0@0| Tclass.PivotBetree.BetreeNode)))
 (let (($x282224 (=> (and (and $x169259 $x169257) $x193328) (and (=> (= ?x201644 (- 0 677002)) $x202364) (=> $x202364 $x234701)))))
 (let ((?x60019 (|lambda#82| null $Heap@@108 alloc false)))
 (let (($x60027 (= $_Frame@0 ?x60019)))
 (let ((?x229349 (ControlFlow 0 186524)))
 (let (($x62448 (= ?x229349 186530)))
 (let (($x229335 (PivotBetree.Path.Valid ?x10306 this@@325)))
 (let (($x228489 (|PivotBetree.Path.Valid#canCall| this@@325)))
 (let (($x60096 (=> $x228489 (or $x229335 (=> $x202364 (PivotBetree.Path.Valid ?x10439 ?x61480))))))
 (let (($x137239 (and (=> (and (= (ControlFlow 0 186528) (- 0 676885)) $x228489) (or $x229335 (=> $x202364 (PivotBetree.Path.Valid ?x10439 ?x61480)))) (=> (and $x229335 (= (ControlFlow 0 186528) (- 0 676931))) $x202364))))
 (let (($x61887 (forall ((|i#15| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x193306 (|Seq#Index| ?x193240 |i#15|)))
 (let ((?x193304 ($Unbox DatatypeTypeType ?x193306)))
 (let (($x193302 (PivotBetree.BetreeNode.BetreeNode_q ?x193304)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#15|)))
 (let (($x60098 (and $x9901 (INTERNAL_lt_boogie |i#15| (|Seq#Length| ?x193240)))))
 (=> $x60098 $x193302)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@325)) |i#15|)) ) :qid PivotBetreeidfy.99:18!1998))
 ))
 (let (($x60091 (PivotBetree.BetreeNode.IsIndex ?x193028)))
 (let (($x60088 (|PivotBetree.BetreeNode.IsIndex#canCall| ?x193028)))
 (let (($x137243 (=> (and (= (ControlFlow 0 186528) (- 0 676787)) $x228489) (or $x229335 (=> (and $x202364 $x60088) (or $x60091 $x61887))))))
 (let (($x60117 (=> $x228489 (or $x229335 (=> (and $x202364 $x60088) (or $x60091 $x193044))))))
 (let (($x61903 (and (=> (and (= (ControlFlow 0 186528) (- 0 676739)) $x228489) (or $x229335 (=> (and $x202364 $x60088) (or $x60091 $x193044)))) (and $x137243 $x137239))))
 (let (($x137566 (=> $x228489 (or $x229335 $x60115))))
 (let (($x60034 (=> $x228489 (or $x229335 $x137599))))
 (let (($x61916 (and (=> (and (= (ControlFlow 0 186528) (- 0 676263)) $x228489) (or $x229335 $x137599)) (and (=> (and (= (ControlFlow 0 186528) (- 0 676569)) $x228489) (or $x229335 $x60115)) $x61903))))
 (let (($x60011 (=> $x228489 (or $x229335 $x137653))))
 (let (($x219777 (=> $x228489 (or $x229335 (=> $x29694 (or $x59716 $x193044))))))
 (let (($x62376 (and (=> (and (= (ControlFlow 0 186528) (- 0 676029)) $x228489) (or $x229335 (=> $x29694 (or $x59716 $x193044)))) (and (=> (and (= (ControlFlow 0 186528) (- 0 676075)) $x228489) (or $x229335 $x137653)) $x61916))))
 (let (($x61844 (forall ((|i#14| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x59682 (PivotBetree.BetreeNode.DomainRoutedToChild ?x193028 |i#14|)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x193306 (|Seq#Index| ?x193240 |i#14|)))
 (let ((?x193304 ($Unbox DatatypeTypeType ?x193306)))
 (let ((?x221626 (PivotBetree.BetreeNode.MyDomain ?x193304)))
 (let (($x221635 (|DomainMod.Domain#Equal| ?x221626 ?x59682)))
 (let (($x202802 (PivotBetree.BetreeNode.LocalStructure ?x193304)))
 (let (($x193302 (PivotBetree.BetreeNode.BetreeNode_q ?x193304)))
 (let (($x221603 (PivotBetree.BetreeNode.ValidChildIndex ?x193028 |i#14|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#14|)))
 (=> (and $x9901 (and (and $x221603 $x193302) $x202802)) $x221635)))))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@325)) |i#14|)) ) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node this@@325) |i#14|) ) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild (PivotBetree.Path.node this@@325) |i#14|) ) :qid PivotBetreeidfy.66:17!1978))
 ))
 (let (($x32104 (or $x59716 (=> $x193020 (or $x137956 (=> (and $x193044 $x193288) (or $x221602 (=> $x193044 $x61844))))))))
 (let (($x201918 (=> (and (= (ControlFlow 0 186528) (- 0 675819)) $x228489) (or $x229335 (=> $x29694 $x32104)))))
 (let (($x193364 (=> $x228489 (or $x229335 $x55066))))
 (let (($x62378 (and (=> (and (= (ControlFlow 0 186528) (- 0 675737)) $x228489) (or $x229335 $x55066)) (and $x201918 $x62376))))
 (let (($x202658 (=> $x228489 (or $x229335 $x217792))))
 (let (($x59943 (=> $x228489 (or $x229335 $x217789))))
 (let (($x62388 (and (=> (and (= (ControlFlow 0 186528) (- 0 675519)) $x228489) (or $x229335 $x217789)) (and (=> (and (= (ControlFlow 0 186528) (- 0 675635)) $x228489) (or $x229335 $x217792)) $x62378))))
 (let (($x248310 (forall ((|i#13| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#13|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193182 (BoundedPivotsLib.__default.ElementIsKey ?x229364)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let ((?x199540 (|Seq#Length| ?x103079)))
 (let (($x221003 (INTERNAL_lt_boogie |i#13| ?x199540)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#13|)))
 (=> (and (and $x9901 $x221003) $x193082) $x193182)))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#13|)) ) :qid BoundedPivotsLibidfy.39:16!1960))
 ))
 (let (($x212845 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 (=> $x229380 (or $x193148 $x248310))))))))
 (let (($x62699 (=> (and (= (ControlFlow 0 186528) (- 0 675321)) $x228489) (or $x229335 (=> $x29694 (or $x59716 (=> $x193020 (or $x137956 $x212845))))))))
 (let (($x222165 (=> $x228489 (or $x229335 $x248280))))
 (let (($x201778 (and (=> (and (= (ControlFlow 0 186528) (- 0 675193)) $x228489) (or $x229335 $x248280)) (and $x62699 $x62388))))
 (let (($x202078 (forall ((|i#12| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#12|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#12|)))
 (let (($x193084 (and $x9901 (INTERNAL_lt_boogie |i#12| (BoundedPivotsLib.__default.NumBuckets ?x103079)))))
 (=> $x193084 $x193082)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#12|)) ) :qid BoundedPivotsLibidfy.56:16!1950))
 ))
 (let (($x64519 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 $x202078))))))))
 (let (($x61823 (=> (and (= (ControlFlow 0 186528) (- 0 675033)) $x228489) (or $x229335 (=> $x29694 (or $x59716 $x64519))))))
 (let (($x137661 (=> $x228489 (or $x229335 $x248278))))
 (let (($x62392 (and (=> (and (= (ControlFlow 0 186528) (- 0 674919)) $x228489) (or $x229335 $x248278)) (and $x61823 $x201778))))
 (let (($x29693 (=> $x228489 (or $x229335 $x202770))))
 (let (($x61760 (forall ((|i#11| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x59682 (PivotBetree.BetreeNode.DomainRoutedToChild ?x193028 |i#11|)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x193306 (|Seq#Index| ?x193240 |i#11|)))
 (let ((?x193304 ($Unbox DatatypeTypeType ?x193306)))
 (let ((?x221626 (PivotBetree.BetreeNode.MyDomain ?x193304)))
 (let (($x221635 (|DomainMod.Domain#Equal| ?x221626 ?x59682)))
 (let (($x202802 (PivotBetree.BetreeNode.LocalStructure ?x193304)))
 (let (($x193302 (PivotBetree.BetreeNode.BetreeNode_q ?x193304)))
 (let (($x221603 (PivotBetree.BetreeNode.ValidChildIndex ?x193028 |i#11|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#11|)))
 (=> (and $x9901 (and (and $x221603 $x193302) $x202802)) $x221635)))))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@325)) |i#11|)) ) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node this@@325) |i#11|) ) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild (PivotBetree.Path.node this@@325) |i#11|) ) :qid PivotBetreeidfy.66:17!1937))
 ))
 (let (($x239527 (or $x229335 (=> $x193020 (or $x137956 (=> (and $x193044 $x193288) (or $x221602 (=> $x193044 $x61760))))))))
 (let (($x201720 (and (=> (and (= (ControlFlow 0 186528) (- 0 674653)) $x228489) $x239527) (and (=> (and (= (ControlFlow 0 186528) (- 0 674839)) $x228489) (or $x229335 $x202770)) $x62392))))
 (let (($x202848 (=> $x228489 (or $x229335 (=> $x193020 (or $x137956 (=> $x193044 $x193266)))))))
 (let (($x202874 (=> $x228489 (or $x229335 $x193244))))
 (let (($x62418 (and (=> (and (= (ControlFlow 0 186528) (- 0 674517)) $x228489) (or $x229335 $x193244)) (and (=> (and (= (ControlFlow 0 186528) (- 0 674595)) $x228489) (or $x229335 (=> $x193020 (or $x137956 (=> $x193044 $x193266))))) $x201720))))
 (let (($x193196 (=> $x228489 (or $x229335 $x193194))))
 (let (($x61553 (forall ((|i#10| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#10|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193182 (BoundedPivotsLib.__default.ElementIsKey ?x229364)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let ((?x199540 (|Seq#Length| ?x103079)))
 (let (($x221003 (INTERNAL_lt_boogie |i#10| ?x199540)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#10|)))
 (=> (and (and $x9901 $x221003) $x193082) $x193182)))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#10|)) ) :qid BoundedPivotsLibidfy.39:16!1919))
 ))
 (let (($x193342 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 (=> $x229380 (or $x193148 $x61553))))))))
 (let (($x229493 (=> (and (= (ControlFlow 0 186528) (- 0 674251)) $x228489) (or $x229335 (=> $x193020 (or $x137956 $x193342))))))
 (let (($x201752 (and $x229493 (and (=> (and (= (ControlFlow 0 186528) (- 0 674425)) $x228489) (or $x229335 $x193194)) $x62418))))
 (let (($x137885 (=> $x228489 (or $x229335 $x203002))))
 (let (($x61549 (forall ((|i#9| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#9|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#9|)))
 (let (($x193084 (and $x9901 (INTERNAL_lt_boogie |i#9| (BoundedPivotsLib.__default.NumBuckets ?x103079)))))
 (=> $x193084 $x193082)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#9|)) ) :qid BoundedPivotsLibidfy.56:16))
 ))
 (let (($x202222 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 $x61549))))))))
 (let (($x61490 (=> (and (= (ControlFlow 0 186528) (- 0 674011)) $x228489) (or $x229335 $x202222))))
 (let (($x218264 (and $x61490 (and (=> (and (= (ControlFlow 0 186528) (- 0 674147)) $x228489) (or $x229335 $x203002)) $x201752))))
 (let (($x193052 (=> $x228489 (or $x229335 $x193076))))
 (let (($x229104 (=> $x228489 (or $x229335 $x193050))))
 (let (($x201642 (and (=> (and (= (ControlFlow 0 186528) (- 0 673865)) $x228489) (or $x229335 $x193050)) (and (=> (and (= (ControlFlow 0 186528) (- 0 673921)) $x228489) (or $x229335 $x193076)) $x218264))))
 (let (($x200578 (and $x193328 ($IsAlloc |out#0@@6| ?x230281 $Heap@@108))))
 (let (($x223792 (= ?x229349 186528)))
 (let (($x59980 (=> $x137451 (and (=> (and $x223792 $x137474 $x200578) $x201642) (=> (and $x62448 $x60027 (and (and $x169259 $x169257) $x193328)) (and (=> (= ?x201644 (- 0 677002)) $x202364) (=> $x202364 $x234701)))))))
 (let (($x59983 (and (=> (= ?x229349 (- 0 673824)) |b$reqreads#1@0|) (=> (and |b$reqreads#1@0| $x137451) (and (=> (and $x223792 $x137474 $x200578) $x201642) (=> (and $x62448 $x60027 (and (and $x169259 $x169257) $x193328)) (and (=> (= ?x201644 (- 0 677002)) $x202364) (=> $x202364 $x234701))))))))
 (let (($x202542 (and (=> (= ?x229349 (- 0 673823)) |b$reqreads#0@0|) (=> |b$reqreads#0@0| $x59983))))
 (let (($x202288 (PivotBetree.Path.ValidReplacement this@@325 |replacement#0@@17|)))
 (let (($x60082 (|PivotBetree.Path.ValidReplacement#canCall| this@@325 |replacement#0@@17|)))
 (let (($x60101 (forall (($o@@199 T@U) ($f@@129 T@U) )(! (let ((?x63 (type $f@@129)))
 (let ((?x5145 (FieldTypeInv0 ?x63)))
 (let ((?x5870 (FieldType ?x5145)))
 (let (($x6005 (= ?x63 ?x5870)))
 (let ((?x176 (type $o@@199)))
 (let (($x5963 (= ?x176 refType)))
 (let (($x6006 (and $x5963 $x6005)))
 (=> (and $x6006 false) (U_2_bool (MapType6Select $_Frame@0@@0 $o@@199 $f@@129)))))))))) :qid PivotBetreeidfy.507:16))
 ))
 (let (($x202522 (=> (and (and $x229335 (= |b$reqreads#1@0| $x60101)) (and (and $x60082 $x202288) (and $x137451 $x202364))) $x202542)))
 (let (($x60086 (forall ((|i#8| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x193306 (|Seq#Index| ?x193240 |i#8|)))
 (let ((?x193304 ($Unbox DatatypeTypeType ?x193306)))
 (let (($x193302 (PivotBetree.BetreeNode.BetreeNode_q ?x193304)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#8|)))
 (let (($x60098 (and $x9901 (INTERNAL_lt_boogie |i#8| (|Seq#Length| ?x193240)))))
 (=> $x60098 $x193302)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@325)) |i#8|)) ) :qid PivotBetreeidfy.99:18!2296))
 ))
 (let (($x60105 (=> (and (= ?x229349 (- 0 673635)) $x228489) (or $x229335 (=> (and $x202364 $x60088) (or $x60091 $x60086))))))
 (let (($x59993 (and (=> (and (= ?x229349 (- 0 673587)) $x228489) (or $x229335 (=> (and $x202364 $x60088) (or $x60091 $x193044)))) (and $x60105 (and (=> (and (= ?x229349 (- 0 673733)) $x228489) (or $x229335 (=> $x202364 (PivotBetree.Path.Valid ?x10439 ?x61480)))) $x202522)))))
 (let (($x222125 (and (=> (and (= ?x229349 (- 0 673111)) $x228489) (or $x229335 $x137599)) (and (=> (and (= ?x229349 (- 0 673417)) $x228489) (or $x229335 $x60115)) $x59993))))
 (let (($x202572 (and (=> (and (= ?x229349 (- 0 672877)) $x228489) (or $x229335 (=> $x29694 (or $x59716 $x193044)))) (and (=> (and (= ?x229349 (- 0 672923)) $x228489) (or $x229335 $x137653)) $x222125))))
 (let (($x202668 (forall ((|i#7| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x59682 (PivotBetree.BetreeNode.DomainRoutedToChild ?x193028 |i#7|)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x193306 (|Seq#Index| ?x193240 |i#7|)))
 (let ((?x193304 ($Unbox DatatypeTypeType ?x193306)))
 (let ((?x221626 (PivotBetree.BetreeNode.MyDomain ?x193304)))
 (let (($x221635 (|DomainMod.Domain#Equal| ?x221626 ?x59682)))
 (let (($x202802 (PivotBetree.BetreeNode.LocalStructure ?x193304)))
 (let (($x193302 (PivotBetree.BetreeNode.BetreeNode_q ?x193304)))
 (let (($x221603 (PivotBetree.BetreeNode.ValidChildIndex ?x193028 |i#7|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#7|)))
 (=> (and $x9901 (and (and $x221603 $x193302) $x202802)) $x221635)))))))))))) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild (PivotBetree.Path.node this@@325) |i#7|) ) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@325)) |i#7|)) ) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node this@@325) |i#7|) ) :qid PivotBetreeidfy.66:17!2276))
 ))
 (let (($x221632 (or $x59716 (=> $x193020 (or $x137956 (=> (and $x193044 $x193288) (or $x221602 (=> $x193044 $x202668))))))))
 (let (($x59987 (and (=> (and (= ?x229349 (- 0 672667)) $x228489) (or $x229335 (=> $x29694 $x221632))) $x202572)))
 (let (($x59989 (and (=> (and (= ?x229349 (- 0 672483)) $x228489) (or $x229335 $x217792)) (and (=> (and (= ?x229349 (- 0 672585)) $x228489) (or $x229335 $x55066)) $x59987))))
 (let (($x219774 (forall ((|i#6@@1| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#6@@1|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193182 (BoundedPivotsLib.__default.ElementIsKey ?x229364)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let ((?x199540 (|Seq#Length| ?x103079)))
 (let (($x221003 (INTERNAL_lt_boogie |i#6@@1| ?x199540)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#6@@1|)))
 (=> (and (and $x9901 $x221003) $x193082) $x193182)))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#6@@1|)) ) :qid BoundedPivotsLibidfy.39:16!2250))
 ))
 (let (($x143046 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 (=> $x229380 (or $x193148 $x219774))))))))
 (let (($x222146 (=> (and (= ?x229349 (- 0 672169)) $x228489) (or $x229335 (=> $x29694 (or $x59716 (=> $x193020 (or $x137956 $x143046))))))))
 (let (($x60025 (and (=> (and (= ?x229349 (- 0 672041)) $x228489) (or $x229335 $x248280)) (and $x222146 (and (=> (and (= ?x229349 (- 0 672367)) $x228489) (or $x229335 $x217789)) $x59989)))))
 (let (($x59711 (forall ((|i#5@@0| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#5@@0|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#5@@0|)))
 (let (($x193084 (and $x9901 (INTERNAL_lt_boogie |i#5@@0| (BoundedPivotsLib.__default.NumBuckets ?x103079)))))
 (=> $x193084 $x193082)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#5@@0|)) ) :qid BoundedPivotsLibidfy.56:16!2240))
 ))
 (let (($x143035 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 $x59711))))))))
 (let (($x137759 (=> (and (= ?x229349 (- 0 671881)) $x228489) (or $x229335 (=> $x29694 (or $x59716 $x143035))))))
 (let (($x202516 (and (=> (and (= ?x229349 (- 0 671687)) $x228489) (or $x229335 $x202770)) (and (=> (and (= ?x229349 (- 0 671767)) $x228489) (or $x229335 $x248278)) (and $x137759 $x60025)))))
 (let (($x202800 (forall ((|i#4@@3| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x59682 (PivotBetree.BetreeNode.DomainRoutedToChild ?x193028 |i#4@@3|)))
 (let ((?x193240 (PivotBetree.BetreeNode.children ?x193028)))
 (let ((?x193306 (|Seq#Index| ?x193240 |i#4@@3|)))
 (let ((?x193304 ($Unbox DatatypeTypeType ?x193306)))
 (let ((?x221626 (PivotBetree.BetreeNode.MyDomain ?x193304)))
 (let (($x221635 (|DomainMod.Domain#Equal| ?x221626 ?x59682)))
 (let (($x202802 (PivotBetree.BetreeNode.LocalStructure ?x193304)))
 (let (($x193302 (PivotBetree.BetreeNode.BetreeNode_q ?x193304)))
 (let (($x221603 (PivotBetree.BetreeNode.ValidChildIndex ?x193028 |i#4@@3|)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#4@@3|)))
 (=> (and $x9901 (and (and $x221603 $x193302) $x202802)) $x221635)))))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.children (PivotBetree.Path.node this@@325)) |i#4@@3|)) ) :pattern ( (PivotBetree.BetreeNode.DomainRoutedToChild (PivotBetree.Path.node this@@325) |i#4@@3|) ) :pattern ( (PivotBetree.BetreeNode.ValidChildIndex (PivotBetree.Path.node this@@325) |i#4@@3|) ) :qid PivotBetreeidfy.66:17!2224))
 ))
 (let (($x59674 (or $x229335 (=> $x193020 (or $x137956 (=> (and $x193044 $x193288) (or $x221602 (=> $x193044 $x202800))))))))
 (let (($x200584 (and (=> (and (= ?x229349 (- 0 671443)) $x228489) (or $x229335 (=> $x193020 (or $x137956 (=> $x193044 $x193266))))) (and (=> (and (= ?x229349 (- 0 671501)) $x228489) $x59674) $x202516))))
 (let (($x60022 (and (=> (and (= ?x229349 (- 0 671273)) $x228489) (or $x229335 $x193194)) (and (=> (and (= ?x229349 (- 0 671365)) $x228489) (or $x229335 $x193244)) $x200584))))
 (let (($x124048 (forall ((|i#3@@12| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#3@@12|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193182 (BoundedPivotsLib.__default.ElementIsKey ?x229364)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let ((?x199540 (|Seq#Length| ?x103079)))
 (let (($x221003 (INTERNAL_lt_boogie |i#3@@12| ?x199540)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#3@@12|)))
 (=> (and (and $x9901 $x221003) $x193082) $x193182)))))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#3@@12|)) ) :qid BoundedPivotsLibidfy.39:16!2210))
 ))
 (let (($x193130 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 (=> $x229380 (or $x193148 $x124048))))))))
 (let (($x222168 (=> (and (= ?x229349 (- 0 671099)) $x228489) (or $x229335 (=> $x193020 (or $x137956 $x193130))))))
 (let (($x218390 (forall ((|i#2@@21| Int) )(! (let ((?x193028 (PivotBetree.Path.node this@@325)))
 (let ((?x103079 (PivotBetree.BetreeNode.pivotTable ?x193028)))
 (let ((?x229363 (|Seq#Index| ?x103079 |i#2@@21|)))
 (let ((?x229364 ($Unbox DatatypeTypeType ?x229363)))
 (let (($x193082 (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ?x229364)))
 (let (($x9901 (INTERNAL_le_boogie 0 |i#2@@21|)))
 (let (($x193084 (and $x9901 (INTERNAL_lt_boogie |i#2@@21| (BoundedPivotsLib.__default.NumBuckets ?x103079)))))
 (=> $x193084 $x193082)))))))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (PivotBetree.BetreeNode.pivotTable (PivotBetree.Path.node this@@325)) |i#2@@21|)) ) :qid BoundedPivotsLibidfy.56:16!2200))
 ))
 (let (($x223730 (=> $x193020 (or $x137956 (=> $x192636 (or $x192618 (=> (and $x193044 $x193010) (or $x229334 $x218390))))))))
 (let (($x60065 (and (=> (and (= ?x229349 (- 0 670859)) $x228489) (or $x229335 $x223730)) (and (=> (and (= ?x229349 (- 0 670995)) $x228489) (or $x229335 $x203002)) (and $x222168 $x60022)))))
 (let (($x120547 (and (=> (and (= ?x229349 (- 0 670713)) $x228489) (or $x229335 $x193050)) (and (=> (and (= ?x229349 (- 0 670769)) $x228489) (or $x229335 $x193076)) $x60065))))
 (let (($x203192 (forall (($f@@128 T@U) ($o@@198 T@U) )(! (let ((?x176 (type $f@@128)))
 (let (($x8731 (= ?x176 (FieldType (FieldTypeInv0 ?x176)))))
 (let ((?x63 (type $o@@198)))
 (let (($x5940 (= ?x63 refType)))
 (let (($x8732 (and $x5940 $x8731)))
 (=> (and $x8732 false) (U_2_bool (MapType6Select $_Frame@0@@0 $o@@198 $f@@128)))))))) :qid PivotBetreeidfy.506:16))
 ))
 (let (($x170155 (= (AsFuelBottom StartFuelAssert_DomainMod.Domain.SaneKeys) StartFuelAssert_DomainMod.Domain.SaneKeys)))
 (let (($x170189 (= (AsFuelBottom StartFuel_DomainMod.Domain.SaneKeys) StartFuel_DomainMod.Domain.SaneKeys)))
 (let (($x203182 (and (and (and $x170189 $x170155) (and $x193328 (= |b$reqreads#0@0| $x203192))) (and (and $x228489 $x229335) (and $x193328 $x203172)))))
 (let (($x170165 (= (AsFuelBottom StartFuelAssert_BoundedPivotsLib._default.CutoffForRight) StartFuelAssert_BoundedPivotsLib._default.CutoffForRight)))
 (let (($x170205 (= (AsFuelBottom StartFuel_BoundedPivotsLib._default.CutoffForRight) StartFuel_BoundedPivotsLib._default.CutoffForRight)))
 (let (($x170215 (= (AsFuelBottom StartFuelAssert_BoundedPivotsLib._default.CutoffForLeft) StartFuelAssert_BoundedPivotsLib._default.CutoffForLeft)))
 (let (($x170353 (= (AsFuelBottom StartFuel_BoundedPivotsLib._default.CutoffForLeft) StartFuel_BoundedPivotsLib._default.CutoffForLeft)))
 (let ((?x170221 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted)))
 (let (($x170237 (= ?x170221 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted)))
 (let ((?x170253 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted)))
 (let (($x170365 (= ?x170253 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted)))
 (let ((?x170239 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted)))
 (let (($x170255 (= ?x170239 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted)))
 (let ((?x62598 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted)))
 (let (($x170249 (= ?x62598 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted)))
 (let (($x229309 (and (and (and $x170249 $x170255) (and $x170365 $x170237)) (and (and $x170353 $x170215) (and $x170205 $x170165)))))
 (let ((?x62592 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt)))
 (let (($x62591 (= ?x62592 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt)))
 (let ((?x62606 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt)))
 (let (($x62605 (= ?x62606 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt)))
 (let ((?x170257 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximum)))
 (let (($x62607 (= ?x170257 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximum)))
 (let ((?x170251 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximum)))
 (let (($x170259 (= ?x170251 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximum)))
 (let ((?x170817 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt)))
 (let (($x170279 (= ?x170817 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt)))
 (let ((?x170269 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt)))
 (let (($x170275 (= ?x170269 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt)))
 (let ((?x170285 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimum)))
 (let (($x170283 (= ?x170285 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimum)))
 (let ((?x170299 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimum)))
 (let (($x170295 (= ?x170299 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimum)))
 (let (($x193002 (and (and (and $x170295 $x170283) (and $x170275 $x170279)) (and (and $x170259 $x62607) (and $x62605 $x62591)))))
 (let ((?x170311 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap)))
 (let (($x170293 (= ?x170311 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap)))
 (let ((?x170303 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap)))
 (let (($x170335 (= ?x170303 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap)))
 (let ((?x170319 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum)))
 (let (($x170315 (= ?x170319 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum)))
 (let ((?x170333 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum)))
 (let (($x170339 (= ?x170333 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum)))
 (let ((?x170349 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let (($x170347 (= ?x170349 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let ((?x170367 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let (($x170375 (= ?x170367 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let ((?x170371 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x170369 (= ?x170371 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let ((?x62562 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x62561 (= ?x62562 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x229297 (and (and (and $x62561 $x170369) (and $x170375 $x170347)) (and (and $x170339 $x170315) (and $x170335 $x170293)))))
 (let ((?x62566 (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x62565 (= ?x62566 StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let ((?x170401 (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x170399 (= ?x170401 StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let ((?x170383 (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted)))
 (let (($x170381 (= ?x170383 StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted)))
 (let (($x170879 (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted)))
 (let (($x170405 (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted)))
 (let (($x170411 (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsSorted) StartFuel_Lexicographic_Byte_Order._default.IsSorted)))
 (let (($x170433 (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt)))
 (let (($x170439 (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximumOpt) StartFuel_Lexicographic_Byte_Order._default.maximumOpt)))
 (let (($x278253 (and (and (and $x170439 $x170433) (and $x170411 $x170405)) (and (and $x170879 $x170381) (and $x170399 $x62565)))))
 (let (($x170435 (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximum) StartFuelAssert_Lexicographic_Byte_Order._default.maximum)))
 (let (($x170459 (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximum) StartFuel_Lexicographic_Byte_Order._default.maximum)))
 (let (($x170481 (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt)))
 (let (($x170471 (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimumOpt) StartFuel_Lexicographic_Byte_Order._default.minimumOpt)))
 (let (($x170485 (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimum) StartFuelAssert_Lexicographic_Byte_Order._default.minimum)))
 (let (($x170469 (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimum) StartFuel_Lexicographic_Byte_Order._default.minimum)))
 (let ((?x170499 (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap)))
 (let (($x170519 (= ?x170499 StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap)))
 (let (($x170487 (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap)))
 (let (($x225484 (and (and (and $x170487 $x170519) (and $x170469 $x170485)) (and (and $x170471 $x170481) (and $x170459 $x170435)))))
 (let (($x170503 (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum)))
 (let (($x62537 (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.NotMinimum) StartFuel_Lexicographic_Byte_Order._default.NotMinimum)))
 (let ((?x62529 (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let (($x62528 (= ?x62529 StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let ((?x62542 (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let (($x62534 (= ?x62542 StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let ((?x62544 (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x62543 (= ?x62544 StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let ((?x62389 (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x62547 (= ?x62389 StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let ((?x62394 (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x62390 (= ?x62394 StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let ((?x62407 (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x62402 (= ?x62407 StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x192722 (and (and (and $x62402 $x62390) (and $x62547 $x62543)) (and (and $x62534 $x62528) (and $x62537 $x170503)))))
 (let (($x62413 (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Byte_Order._default.IsStrictlySorted)))
 (let (($x62455 (= (AsFuelBottom StartFuel_Byte_Order._default.IsStrictlySorted) StartFuel_Byte_Order._default.IsStrictlySorted)))
 (let (($x62461 (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsSorted) StartFuelAssert_Byte_Order._default.IsSorted)))
 (let (($x62469 (= (AsFuelBottom StartFuel_Byte_Order._default.IsSorted) StartFuel_Byte_Order._default.IsSorted)))
 (let (($x62472 (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximumOpt) StartFuelAssert_Byte_Order._default.maximumOpt)))
 (let (($x62480 (= (AsFuelBottom StartFuel_Byte_Order._default.maximumOpt) StartFuel_Byte_Order._default.maximumOpt)))
 (let (($x170563 (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximum) StartFuelAssert_Byte_Order._default.maximum)))
 (let (($x170567 (= (AsFuelBottom StartFuel_Byte_Order._default.maximum) StartFuel_Byte_Order._default.maximum)))
 (let (($x192896 (and (and (and $x170567 $x170563) (and $x62480 $x62472)) (and (and $x62469 $x62461) (and $x62455 $x62413)))))
 (let (($x193008 (and (and (and $x192896 $x192722) (and $x225484 $x278253)) (and (and $x229297 $x193002) (and $x229309 $x203182)))))
 (let (($x61958 (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimumOpt) StartFuelAssert_Byte_Order._default.minimumOpt)))
 (let (($x62374 (= (AsFuelBottom StartFuel_Byte_Order._default.minimumOpt) StartFuel_Byte_Order._default.minimumOpt)))
 (let (($x170585 (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimum) StartFuelAssert_Byte_Order._default.minimum)))
 (let (($x170579 (= (AsFuelBottom StartFuel_Byte_Order._default.minimum) StartFuel_Byte_Order._default.minimum)))
 (let (($x170597 (= (AsFuelBottom StartFuelAssert_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Byte_Order._default.SortedSeqForMap)))
 (let (($x170607 (= (AsFuelBottom StartFuel_Byte_Order._default.SortedSeqForMap) StartFuel_Byte_Order._default.SortedSeqForMap)))
 (let (($x61711 (= (AsFuelBottom StartFuelAssert_Byte_Order._default.NotMinimum) StartFuelAssert_Byte_Order._default.NotMinimum)))
 (let (($x61719 (= (AsFuelBottom StartFuel_Byte_Order._default.NotMinimum) StartFuel_Byte_Order._default.NotMinimum)))
 (let (($x259832 (and (and (and $x61719 $x61711) (and $x170607 $x170597)) (and (and $x170579 $x170585) (and $x62374 $x61958)))))
 (let ((?x61726 (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let (($x61725 (= ?x61726 StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let (($x61690 (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))
 (let ((?x61697 (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x61696 (= ?x61697 StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let ((?x61653 (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let (($x61648 (= ?x61653 StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGteWithLowerBound)))
 (let ((?x61660 (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x61654 (= ?x61660 StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x61667 (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte)))
 (let (($x61618 (= (AsFuelBottom StartFuelAssert_Byte_Order._default.ltedef) StartFuelAssert_Byte_Order._default.ltedef)))
 (let (($x61630 (= (AsFuelBottom StartFuel_Byte_Order._default.ltedef) StartFuel_Byte_Order._default.ltedef)))
 (let (($x155681 (and (and (and $x61630 $x61618) (and $x61667 $x61654)) (and (and $x61648 $x61696) (and $x61690 $x61725)))))
 (let (($x61636 (= (AsFuelBottom StartFuelAssert_Byte_Order._default.lte) StartFuelAssert_Byte_Order._default.lte)))
 (let (($x61596 (= (AsFuelBottom StartFuel_Byte_Order._default.lte) StartFuel_Byte_Order._default.lte)))
 (let (($x61602 (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte)))
 (let (($x61509 (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte)))
 (let (($x137035 (= (AsFuelBottom StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet) StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet)))
 (let (($x137030 (= (AsFuelBottom StartFuel_MsgHistoryMod.MsgHistory.LSNSet) StartFuel_MsgHistoryMod.MsgHistory.LSNSet)))
 (let (($x137028 (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3)))
 (let (($x137025 (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3)))
 (let (($x218377 (and (and (and $x137025 $x137028) (and $x137030 $x137035)) (and (and $x61509 $x61602) (and $x61596 $x61636)))))
 (let (($x137023 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion)))
 (let (($x137019 (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)))
 (let (($x137017 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB)))
 (let (($x137014 (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB)))
 (let (($x137012 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA)))
 (let (($x137006 (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA)))
 (let (($x137004 (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion)))
 (let (($x137001 (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion)))
 (let (($x192246 (and (and (and $x137001 $x137004) (and $x137006 $x137012)) (and (and $x137014 $x137017) (and $x137019 $x137023)))))
 (let (($x136999 (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB)))
 (let (($x136995 (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB)))
 (let (($x136993 (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA)))
 (let (($x136990 (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA)))
 (let (($x136988 (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion)))
 (let (($x136983 (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion)))
 (let (($x136981 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1)))
 (let (($x136978 (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1)))
 (let (($x229390 (and (and (and $x136978 $x136981) (and $x136983 $x136988)) (and (and $x136990 $x136993) (and $x136995 $x136999)))))
 (let (($x136976 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove)))
 (let (($x136972 (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)))
 (let (($x136970 (= (AsFuelBottom StartFuelAssert_Maps._default.IMapInvert) StartFuelAssert_Maps._default.IMapInvert)))
 (let (($x136967 (= (AsFuelBottom StartFuel_Maps._default.IMapInvert) StartFuel_Maps._default.IMapInvert)))
 (let (($x136965 (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong)))
 (let (($x136958 (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong)))
 (let (($x136956 (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong)))
 (let (($x136953 (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong)))
 (let (($x203418 (and (and (and $x136953 $x136956) (and $x136958 $x136965)) (and (and $x136967 $x136970) (and $x136972 $x136976)))))
 (let (($x136951 (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove)))
 (let (($x136947 (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove)))
 (let (($x136945 (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1)))
 (let (($x136942 (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1)))
 (let (($x136940 (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill)))
 (let (($x136935 (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)))
 (let (($x136933 (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax)))
 (let (($x136930 (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax)))
 (let (($x203412 (and (and (and $x136930 $x136933) (and $x136935 $x136940)) (and (and $x136942 $x136945) (and $x136947 $x136951)))))
 (let (($x136928 (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten)))
 (let (($x136924 (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)))
 (let (($x136922 (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength)))
 (let (($x136919 (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)))
 (let (($x136917 (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape)))
 (let (($x136911 (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)))
 (let (($x136909 (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip)))
 (let (($x136906 (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip)))
 (let (($x229183 (and (and (and $x136906 $x136909) (and $x136911 $x136917)) (and (and $x136919 $x136922) (and $x136924 $x136928)))))
 (let (($x233075 (and (and (and $x229183 $x203412) (and $x203418 $x229390)) (and (and $x192246 $x218377) (and $x155681 $x259832)))))
 (let (($x136904 (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip)))
 (let (($x136900 (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)))
 (let (($x136898 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate)))
 (let (($x136895 (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate)))
 (let (($x136893 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength)))
 (let (($x136888 (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)))
 (let (($x136886 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex)))
 (let (($x136883 (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex)))
 (let (($x192760 (and (and (and $x136883 $x136886) (and $x136888 $x136893)) (and (and $x136895 $x136898) (and $x136900 $x136904)))))
 (let (($x136881 (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate)))
 (let (($x136877 (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)))
 (let (($x136875 (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix)))
 (let (($x136872 (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)))
 (let (($x136870 (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix)))
 (let (($x136864 (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)))
 (let (($x136862 (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq)))
 (let (($x136859 (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq)))
 (let (($x203316 (and (and (and $x136859 $x136862) (and $x136864 $x136870)) (and (and $x136872 $x136875) (and $x136877 $x136881)))))
 (let (($x136857 (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3)))
 (let (($x136853 (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)))
 (let (($x136851 (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat)))
 (let (($x136848 (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat)))
 (let (($x136846 (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1)))
 (let (($x136841 (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)))
 (let (($x136839 (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2)))
 (let (($x136836 (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)))
 (let (($x229196 (and (and (and $x136836 $x136839) (and $x136841 $x136846)) (and (and $x136848 $x136851) (and $x136853 $x136857)))))
 (let (($x136834 (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert)))
 (let (($x136830 (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)))
 (let (($x136828 (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue)))
 (let (($x136825 (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue)))
 (let (($x136823 (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove)))
 (let (($x136818 (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)))
 (let (($x136816 (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque)))
 (let (($x136813 (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque)))
 (let (($x60100 (and (and (and $x136813 $x136816) (and $x136818 $x136823)) (and (and $x136825 $x136828) (and $x136830 $x136834)))))
 (let (($x237263 (=> (and (and (and $x60100 $x229196) (and $x203316 $x192760)) (and $x233075 $x193008)) $x120547)))
 (let (($x136811 (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range)))
 (let (($x136807 (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)))
 (let (($x136805 (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes)))
 (let (($x136802 (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes)))
 (let ((?x215783 (|lambda#81| null $Heap@@108 alloc false)))
 (let (($x193310 (= $_Frame@0@@0 ?x215783)))
 (let (($x221964 (= (ControlFlow 0 668958) 186524)))
 (let (($x154829 (= 62 $FunctionContextHeight)))
 (let (($x193336 ($Is |out#0@@6| ?x230281)))
 (let (($x123801 ($Is |replacement#0@@17| Tclass.PivotBetree.BetreeNode)))
 (let (($x193330 (and (and ($IsGoodHeap $Heap@@108) ($IsHeapAnchor $Heap@@108)) (and ($Is this@@325 Tclass.PivotBetree.Path) $x193328))))
 (let (($x202334 (=> (and (and $x193330 (and (and $x123801 $x193336) (and $x154829 $x221964))) $x193310 (and (and $x136802 $x136805) (and $x136807 $x136811)) (and (and $x60100 $x229196) (and $x203316 $x192760)) (and $x233075 $x193008)) $x120547)))
 (let (($x206521 (= (ControlFlow 0 0) 668958)))
 (not (=> (and $x206521 (and $x193330 (and (and $x123801 $x193336) (and $x154829 $x221964))) $x193310 (and (and $x136802 $x136805) (and $x136807 $x136811)) (and (and $x60100 $x229196) (and $x203316 $x192760)) (and $x233075 $x193008)) $x120547)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
(check-sat)

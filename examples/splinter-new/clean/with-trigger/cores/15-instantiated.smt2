(set-info :smt-lib-version |2.6|)
(set-info :category |"industrial"|)
(set-info :boogie-vc-id CheckWellformed$$PagedBetree.BetreeNode.Child)
(set-option :print-success false)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(declare-sort T@T 0)
(declare-sort T@U 0)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun Lit (T@U) T@U)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun PagedBetree.ChildMap.mapp (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun PagedBetree.ChildMap.WF (T@U T@U) Bool)
(declare-fun DatatypeTypeType () T@T)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun PagedBetree.BetreeNode.WF (T@U T@U) Bool)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun |k#0@@0!1333!0| (T@U T@U) T@U)
(declare-fun Buffers.__default.AnyKey (T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun Buffers.__default.Total (T@U) Bool)
(declare-fun |PagedBetree.BetreeNode.WF#canCall| (T@U) Bool)
(declare-fun PagedBetree.ChildMap.ChildMap_q (T@U) Bool)
(declare-fun |Buffers.__default.AnyKey#canCall| (T@U) Bool)
(declare-fun |Buffers.__default.Total#canCall| (T@U) Bool)
(declare-fun Tclass.PagedBetree.ChildMap () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |PagedBetree.ChildMap.WF#canCall| (T@U) Bool)
(declare-fun PagedBetree.BetreeNode.BetreeNode_q (T@U) Bool)
(declare-fun |#PagedBetree.BetreeNode.BetreeNode| (T@U T@U) T@U)
(declare-fun |a#6#1#0@@0!1349!1| (T@U) T@U)
(declare-fun |a#6#0#0@@0!1349!2| (T@U) T@U)
(declare-fun PagedBetree.BetreeNode.children (T@U) T@U)
(declare-fun Tclass.PagedBetree.BetreeNode () T@U)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun TotalKMMapMod.__default.DefaultV () T@U)
(declare-fun TotalKMMapMod.__default.TerminalValue (T@U) Bool)
(declare-fun |k#0@@82!3099!3| (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun refType () T@T)
(declare-fun $_Frame@0 () T@U)
(declare-fun MapType1Type () T@T)
(declare-fun $Heap@@50 () T@U)
(declare-fun this@@248 () T@U)
(declare-fun |key#0@@61| () T@U)
(declare-fun $_Frame@0@@0 () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapInvert () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapInvert () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet () T@U)
(declare-fun StartFuel_PagedBetree.Path.ReplacedChildren () T@U)
(declare-fun StartFuelAssert_PagedBetree.Path.ReplacedChildren () T@U)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun alloc () T@U)
(declare-fun null () T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_MsgHistoryMod.MsgHistory.LSNSet () T@U)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $f@@91!1377!4 () T@U)
(declare-fun $o@@141!1377!5 () T@U)
(declare-fun |k#0@@84!1378!6| () T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(assert (= (Ctor intType) 0))
(assert (= (Ctor realType) 1))
(assert (= (Ctor boolType) 2))
(assert (= (Ctor rmodeType) 3))
(assert (= (Ctor stringType) 4))
(assert (= (Ctor regexType) 5))
(assert (forall ((arg0 Int)) (! (= (U_2_int (int_2_U arg0)) arg0) :pattern ((int_2_U arg0)) :qid |typeInv:U_2_int|)))
(assert (forall ((x T@U)) (! (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :pattern ((U_2_int x)) :qid |cast:U_2_int|)))
(assert (forall ((arg0@@0 Int)) (! (= (type (int_2_U arg0@@0)) intType) :pattern ((int_2_U arg0@@0)) :qid |funType:int_2_U|)))
(assert (forall ((arg0@@1 Real)) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :pattern ((real_2_U arg0@@1)) :qid |typeInv:U_2_real|)))
(assert (forall ((x@@0 T@U)) (! (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :pattern ((U_2_real x@@0)) :qid |cast:U_2_real|)))
(assert (forall ((arg0@@2 Real)) (! (= (type (real_2_U arg0@@2)) realType) :pattern ((real_2_U arg0@@2)) :qid |funType:real_2_U|)))
(assert (forall ((arg0@@3 Bool)) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :pattern ((bool_2_U arg0@@3)) :qid |typeInv:U_2_bool|)))
(assert (forall ((x@@1 T@U)) (! (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :pattern ((U_2_bool x@@1)) :qid |cast:U_2_bool|)))
(assert (forall ((arg0@@4 Bool)) (! (= (type (bool_2_U arg0@@4)) boolType) :pattern ((bool_2_U arg0@@4)) :qid |funType:bool_2_U|)))
(assert (forall ((arg0@@5 RoundingMode)) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :pattern ((rmode_2_U arg0@@5)) :qid |typeInv:U_2_rmode|)))
(assert (forall ((x@@2 T@U)) (! (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :pattern ((U_2_rmode x@@2)) :qid |cast:U_2_rmode|)))
(assert (forall ((arg0@@6 RoundingMode)) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :pattern ((rmode_2_U arg0@@6)) :qid |funType:rmode_2_U|)))
(assert (forall ((arg0@@7 String)) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :pattern ((string_2_U arg0@@7)) :qid |typeInv:U_2_string|)))
(assert (forall ((x@@3 T@U)) (! (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :pattern ((U_2_string x@@3)) :qid |cast:U_2_string|)))
(assert (forall ((arg0@@8 String)) (! (= (type (string_2_U arg0@@8)) stringType) :pattern ((string_2_U arg0@@8)) :qid |funType:string_2_U|)))
(assert (forall ((arg0@@9 (RegEx String))) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :pattern ((regex_2_U arg0@@9)) :qid |typeInv:U_2_regex|)))
(assert (forall ((x@@4 T@U)) (! (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :pattern ((U_2_regex x@@4)) :qid |cast:U_2_regex|)))
(assert (forall ((arg0@@10 (RegEx String))) (! (= (type (regex_2_U arg0@@10)) regexType) :pattern ((regex_2_U arg0@@10)) :qid |funType:regex_2_U|)))
(assert (forall ((arg0@@29 T@U)) (! (= (type (Lit arg0@@29)) (type arg0@@29)) :pattern ((Lit arg0@@29)) :qid |funType:Lit|)))
(assert (forall ((x@@8 T@U)) (! (= (Lit x@@8) x@@8) :pattern ((Lit x@@8)) :skolemid |362| :qid |DafnyPreludebpl.89:29|)))
(assert (forall ((arg0@@45 T@T)(arg1@@11 T@T)) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType|)))
(assert (forall ((arg0@@46 T@T)(arg1@@12 T@T)) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :pattern ((IMapType arg0@@46 arg1@@12)) :qid |typeInv:IMapTypeInv0|)))
(assert (forall ((arg0@@47 T@T)(arg1@@13 T@T)) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :pattern ((IMapType arg0@@47 arg1@@13)) :qid |typeInv:IMapTypeInv1|)))
(assert (forall ((arg0@@56 T@U)) (! (= (type (|IMap#Elements| arg0@@56)) (MapType0Type (IMapTypeInv0 (type arg0@@56)) (IMapTypeInv1 (type arg0@@56)))) :pattern ((|IMap#Elements| arg0@@56)) :qid |funType:IMap#Elements|)))
(assert (forall ((arg0@@57 T@U)) (! (= (type (|IMap#Domain| arg0@@57)) (MapType0Type (IMapTypeInv0 (type arg0@@57)) boolType)) :pattern ((|IMap#Domain| arg0@@57)) :qid |funType:IMap#Domain|)))
(assert (forall ((arg0@@68 T@U)) (! (= (type ($LS arg0@@68)) LayerTypeType) :pattern (($LS arg0@@68)) :qid |funType:$LS|)))
(assert (forall ((arg0@@372 T@U)) (! (= (type (PagedBetree.ChildMap.mapp arg0@@372)) (IMapType BoxType BoxType)) :pattern ((PagedBetree.ChildMap.mapp arg0@@372)) :qid |funType:PagedBetree.ChildMap.mapp|)))
(assert (forall ((this T@U)($ly T@U)) (! (=> (and (= (type $ly) LayerTypeType) (= (type this) DatatypeTypeType)) (= (PagedBetree.ChildMap.WF ($LS $ly) this) (PagedBetree.ChildMap.WF $ly this))) :pattern ((PagedBetree.ChildMap.WF ($LS $ly) this)) :skolemid |1329| :qid |PagedBetreeidfy.49:15|)))
(assert (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)))
(assert (= (type $LZ) LayerTypeType))
(assert (or (not (<= 9 $FunctionContextHeight)) (forall ((this@@3 T@U)($ly@@3 T@U)) (! (or (not (and (= (type $ly@@3) LayerTypeType) (= (type this@@3) DatatypeTypeType) (or (|PagedBetree.ChildMap.WF#canCall| this@@3) (and (not (= 9 $FunctionContextHeight)) ($Is this@@3 Tclass.PagedBetree.ChildMap))))) (and (PagedBetree.ChildMap.ChildMap_q this@@3) (|Buffers.__default.Total#canCall| (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3))) (or (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3)))) (forall ((|k#0| T@U)) (! (=> (and (= (type |k#0|) (SeqType BoxType)) ($Is |k#0| Tclass.KeyType.Key)) (and (|Buffers.__default.AnyKey#canCall| |k#0|) (=> (Buffers.__default.AnyKey |k#0|) (and (PagedBetree.ChildMap.ChildMap_q this@@3) (|PagedBetree.BetreeNode.WF#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box |k#0|)))))))) :pattern ((Buffers.__default.AnyKey |k#0|)) :pattern (($Unbox DatatypeTypeType                                           (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp                                                                              this@@3))                                                           ($Box |k#0|)))) :skolemid |1334| :qid |PagedBetreeidfy.51:18|))) (or (not (PagedBetree.ChildMap.WF ($LS $ly@@3) this@@3)) (and (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3))) (forall ((|k#0@@0| T@U)) (! (=> (= (type |k#0@@0|) (SeqType BoxType)) (=> (and ($Is |k#0@@0| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@0|)) (PagedBetree.BetreeNode.WF $ly@@3 ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box |k#0@@0|)))))) :pattern (($Unbox DatatypeTypeType                                           (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp                                                                              this@@3))                                                           ($Box |k#0@@0|)))) :pattern ((Buffers.__default.AnyKey |k#0@@0|)) :skolemid |1333| :qid |PagedBetreeidfy.51:18!1084|)))) (or (PagedBetree.ChildMap.WF ($LS $ly@@3) this@@3) (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3)))) (not (=> (= (type (|k#0@@0!1333!0| $ly@@3 this@@3)) (SeqType BoxType)) (=> (and ($Is (|k#0@@0!1333!0| $ly@@3 this@@3) Tclass.KeyType.Key) (Buffers.__default.AnyKey (|k#0@@0!1333!0| $ly@@3 this@@3))) (PagedBetree.BetreeNode.WF $ly@@3 ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box (|k#0@@0!1333!0| $ly@@3 this@@3))))))))))) :pattern ((PagedBetree.ChildMap.WF ($LS $ly@@3) this@@3)) :skolemid |1335| :qid |PagedBetreeidfy.49:15!1085|))))
(assert (forall ((d@@43 T@U)) (! (or (not (and (= (type d@@43) DatatypeTypeType) (PagedBetree.BetreeNode.BetreeNode_q d@@43))) (and (= (type (|a#6#0#0@@0!1349!2| d@@43)) DatatypeTypeType) (= (type (|a#6#1#0@@0!1349!1| d@@43)) DatatypeTypeType) (= d@@43 (|#PagedBetree.BetreeNode.BetreeNode| (|a#6#0#0@@0!1349!2| d@@43) (|a#6#1#0@@0!1349!1| d@@43))))) :pattern ((PagedBetree.BetreeNode.BetreeNode_q d@@43)) :skolemid |1350| :qid |unknown.0:0!1121|)))
(assert (forall ((|a#12#0#0| T@U)(|a#12#1#0| T@U)) (! (=> (and (= (type |a#12#0#0|) DatatypeTypeType) (= (type |a#12#1#0|) DatatypeTypeType)) (= (PagedBetree.BetreeNode.children (|#PagedBetree.BetreeNode.BetreeNode| |a#12#0#0| |a#12#1#0|)) |a#12#1#0|)) :pattern ((|#PagedBetree.BetreeNode.BetreeNode| |a#12#0#0| |a#12#1#0|)) :skolemid |1359| :qid |PagedBetreeidfy.69:5!1156|)))
(assert (or (not (<= 9 $FunctionContextHeight)) (forall (($ly@@9 T@U)(this@@9 T@U)) (! (=> (and (= (type $ly@@9) LayerTypeType) (= (type this@@9) DatatypeTypeType) (or (|PagedBetree.BetreeNode.WF#canCall| this@@9) (and (not (= 9 $FunctionContextHeight)) ($Is this@@9 Tclass.PagedBetree.BetreeNode)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (=> (PagedBetree.BetreeNode.BetreeNode_q this@@9) (|PagedBetree.ChildMap.WF#canCall| (PagedBetree.BetreeNode.children this@@9)))) (= (PagedBetree.BetreeNode.WF ($LS $ly@@9) this@@9) (and true (=> (PagedBetree.BetreeNode.BetreeNode_q this@@9) (PagedBetree.ChildMap.WF $ly@@9 (PagedBetree.BetreeNode.children this@@9))))))) :pattern ((PagedBetree.BetreeNode.WF ($LS $ly@@9) this@@9)) :skolemid |1370| :qid |PagedBetreeidfy.72:15!1188|))))
(assert (=> true (=> true (and (U_2_bool (Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV))))) ($Is TotalKMMapMod.__default.DefaultV Tclass.ValueMessage.Message)))))
(assert (or (not true) (forall ((|key#0@@51| T@U)) (! (=> (and (= (type |key#0@@51|) (SeqType BoxType)) (or (|Buffers.__default.AnyKey#canCall| |key#0@@51|) ($Is |key#0@@51| Tclass.KeyType.Key))) (= (Buffers.__default.AnyKey |key#0@@51|) (U_2_bool (Lit (bool_2_U true))))) :pattern ((Buffers.__default.AnyKey |key#0@@51|)) :skolemid |3095| :qid |Buffersidfy.15:20!1659|))))
(assert (or (not true) (forall ((|keys#0@@1| T@U)) (! (or (not (and (= (type |keys#0@@1|) (MapType0Type BoxType boolType)) (or (|Buffers.__default.Total#canCall| |keys#0@@1|) ($Is |keys#0@@1| (TISet Tclass.KeyType.Key))))) (and (forall ((|k#0@@81| T@U)) (! (=> (and (= (type |k#0@@81|) (SeqType BoxType)) ($Is |k#0@@81| Tclass.KeyType.Key)) (|Buffers.__default.AnyKey#canCall| |k#0@@81|)) :pattern ((MapType0Select |keys#0@@1| ($Box |k#0@@81|))) :pattern ((Buffers.__default.AnyKey |k#0@@81|)) :skolemid |3100| :qid |Buffersidfy.17:12|)) (or (not (Buffers.__default.Total |keys#0@@1|)) (forall ((|k#0@@82| T@U)) (! (=> (= (type |k#0@@82|) (SeqType BoxType)) (=> (and ($Is |k#0@@82| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@82|)) (U_2_bool (MapType0Select |keys#0@@1| ($Box |k#0@@82|))))) :pattern ((MapType0Select |keys#0@@1| ($Box |k#0@@82|))) :pattern ((Buffers.__default.AnyKey |k#0@@82|)) :skolemid |3099| :qid |Buffersidfy.17:12!1673|))) (or (Buffers.__default.Total |keys#0@@1|) (not (=> (= (type (|k#0@@82!3099!3| |keys#0@@1|)) (SeqType BoxType)) (=> (and ($Is (|k#0@@82!3099!3| |keys#0@@1|) Tclass.KeyType.Key) (Buffers.__default.AnyKey (|k#0@@82!3099!3| |keys#0@@1|))) (U_2_bool (MapType0Select |keys#0@@1| ($Box (|k#0@@82!3099!3| |keys#0@@1|)))))))))) :pattern ((Buffers.__default.Total |keys#0@@1|)) :skolemid |3101| :qid |Buffersidfy.16:19!1676|))))
(assert (= (type $_Frame@0) (MapType6Type refType boolType)))
(assert (= (type $Heap@@50) (MapType0Type refType MapType1Type)))
(assert (= (type this@@248) DatatypeTypeType))
(assert (= (type |key#0@@61|) (SeqType BoxType)))
(assert (= (type $_Frame@0@@0) (MapType6Type refType boolType)))
(assert (= (type StartFuel_Sequences._default.Range) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.remove) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.insert) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.concat) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.concat3) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.Zip) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.Unzip) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.Flatten) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.seqMax) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType))
(assert (= (type StartFuel_Sequences._default.fill) LayerTypeType))
(assert (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType))
(assert (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType))
(assert (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType))
(assert (= (type StartFuel_Maps._default.IMapInvert) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.IMapInvert) LayerTypeType))
(assert (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType))
(assert (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType))
(assert (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType))
(assert (= (type StartFuel_Maps._default.MapUnion) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType))
(assert (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType))
(assert (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType))
(assert (= (type StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet) LayerTypeType))
(assert (= (type StartFuel_PagedBetree.Path.ReplacedChildren) LayerTypeType))
(assert (= (type StartFuelAssert_PagedBetree.Path.ReplacedChildren) LayerTypeType))
(assert (= (ControlFlow 0 0) 333606))
(assert ($IsGoodHeap $Heap@@50))
(assert ($IsHeapAnchor $Heap@@50))
(assert ($Is this@@248 Tclass.PagedBetree.BetreeNode))
(assert ($IsAlloc this@@248 Tclass.PagedBetree.BetreeNode $Heap@@50))
(assert ($Is |key#0@@61| Tclass.KeyType.Key))
(assert (= 10 $FunctionContextHeight))
(assert (= (ControlFlow 0 333606) 49064))
(assert (= $_Frame@0@@0 (|lambda#4| null $Heap@@50 alloc false)))
(assert (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes))
(assert (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range))
(assert (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque))
(assert (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove))
(assert (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue))
(assert (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert))
(assert (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2))
(assert (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1))
(assert (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat))
(assert (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3))
(assert (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq))
(assert (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix))
(assert (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix))
(assert (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate))
(assert (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex))
(assert (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength))
(assert (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate))
(assert (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip))
(assert (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip))
(assert (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape))
(assert (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength))
(assert (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten))
(assert (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax))
(assert (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill))
(assert (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill))
(assert (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1))
(assert (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1))
(assert (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove))
(assert (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong))
(assert (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong))
(assert (= (AsFuelBottom StartFuel_Maps._default.IMapInvert) StartFuel_Maps._default.IMapInvert))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.IMapInvert) StartFuelAssert_Maps._default.IMapInvert))
(assert (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove))
(assert (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1))
(assert (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion))
(assert (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA))
(assert (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB))
(assert (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion))
(assert (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA))
(assert (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB))
(assert (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion))
(assert (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3))
(assert (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3))
(assert (= (AsFuelBottom StartFuel_MsgHistoryMod.MsgHistory.LSNSet) StartFuel_MsgHistoryMod.MsgHistory.LSNSet))
(assert (= (AsFuelBottom StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet) StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet))
(assert (= (AsFuelBottom StartFuel_PagedBetree.Path.ReplacedChildren) StartFuel_PagedBetree.Path.ReplacedChildren))
(assert (= (AsFuelBottom StartFuelAssert_PagedBetree.Path.ReplacedChildren) StartFuelAssert_PagedBetree.Path.ReplacedChildren))
(assert ($IsAlloc this@@248 Tclass.PagedBetree.BetreeNode $Heap@@50))
(assert (or (not |b$reqreads#0@0|) (forall (($o@@141 T@U)($f@@91 T@U)) (! (=> (and (= (type $o@@141) refType) (= (type $f@@91) (FieldType (FieldTypeInv0 (type $f@@91)))) false) (U_2_bool (MapType6Select $_Frame@0@@0 $o@@141 $f@@91))) :no-pattern (type $f@@91) :no-pattern (type $o@@141) :no-pattern (U_2_int $o@@141) :no-pattern (U_2_bool $o@@141) :no-pattern (U_2_bool $f@@91) :no-pattern (U_2_int $f@@91) :skolemid |1377| :qid |PagedBetreeidfy.77:16|))))
(assert (or |b$reqreads#0@0| (not (=> (and (= (type $o@@141!1377!5) refType) (= (type $f@@91!1377!4) (FieldType (FieldTypeInv0 (type $f@@91!1377!4)))) false) (U_2_bool (MapType6Select $_Frame@0@@0 $o@@141!1377!5 $f@@91!1377!4))))))
(assert (|PagedBetree.BetreeNode.WF#canCall| this@@248))
(assert (PagedBetree.BetreeNode.WF ($LS $LZ) this@@248))
(assert (PagedBetree.BetreeNode.BetreeNode_q this@@248))
(assert (or (not (=> (= (ControlFlow 0 49064) (- 0 334380)) |b$reqreads#0@0|)) (and |b$reqreads#0@0| (or (not (=> (= (ControlFlow 0 49064) 49068) true)) (and (= (ControlFlow 0 49064) 49070) (= $_Frame@0 (|lambda#5| null $Heap@@50 alloc false)) (or (not (=> (= (ControlFlow 0 49070) (- 0 334409)) (PagedBetree.BetreeNode.BetreeNode_q this@@248))) (and (PagedBetree.BetreeNode.BetreeNode_q this@@248) ($IsAlloc (PagedBetree.BetreeNode.children this@@248) Tclass.PagedBetree.ChildMap $Heap@@50) (|PagedBetree.ChildMap.WF#canCall| (PagedBetree.BetreeNode.children this@@248)) (|PagedBetree.ChildMap.WF#canCall| (PagedBetree.BetreeNode.children this@@248)) (or (not (=> (= (ControlFlow 0 49070) (- 0 334435)) (=> (|PagedBetree.ChildMap.WF#canCall| (PagedBetree.BetreeNode.children this@@248)) (or (PagedBetree.ChildMap.WF ($LS $LZ) (PagedBetree.BetreeNode.children this@@248)) (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))))))) (and (= (ControlFlow 0 49070) (- 0 334465)) (|PagedBetree.ChildMap.WF#canCall| (PagedBetree.BetreeNode.children this@@248)) (not (PagedBetree.ChildMap.WF ($LS $LZ) (PagedBetree.BetreeNode.children this@@248))) (not (=> (= (type |k#0@@84!1378!6|) (SeqType BoxType)) (=> (and ($Is |k#0@@84!1378!6| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@84!1378!6|)) (PagedBetree.BetreeNode.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0@@84!1378!6|)))))))) (not (=> (PagedBetree.ChildMap.WF ($LS ($LS $LZ)) (PagedBetree.BetreeNode.children this@@248)) (and (=> (= (ControlFlow 0 49070) (- 0 334565)) (PagedBetree.BetreeNode.BetreeNode_q this@@248)) (=> (PagedBetree.BetreeNode.BetreeNode_q this@@248) (=> (and (PagedBetree.ChildMap.ChildMap_q (PagedBetree.BetreeNode.children this@@248)) (= (ControlFlow 0 49070) (- 0 334575))) (U_2_bool (MapType0Select (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |key#0@@61|))))))))))))))))
(assert (! (=> (forall ((arg0@@4 Bool)) (! (= (type (bool_2_U arg0@@4)) boolType) :pattern ((bool_2_U arg0@@4)) :qid |funType:bool_2_U|)) (= (type (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))) boolType)) :named |0x7fe12995f8c8-funType:bool_2_U[arg0@@4=(TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV))]|))
(assert (! (=> (forall ((x@@1 T@U)) (! (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :pattern ((U_2_bool x@@1)) :qid |cast:U_2_bool|)) (=> (= (type (MapType0Select (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |key#0@@61|))) boolType) (= (bool_2_U (U_2_bool (MapType0Select (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |key#0@@61|)))) (MapType0Select (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |key#0@@61|))))) :named |0x7fe12996e288-cast:U_2_bool[x@@1=(MapType0Select (IMap#Domain (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box key#0@@61))]|))
(assert (! (=> (forall ((arg0@@372 T@U)) (! (= (type (PagedBetree.ChildMap.mapp arg0@@372)) (IMapType BoxType BoxType)) :pattern ((PagedBetree.ChildMap.mapp arg0@@372)) :qid |funType:PagedBetree.ChildMap.mapp|)) (= (type (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) (IMapType BoxType BoxType))) :named |0x7fe12996e318-funType:PagedBetree.ChildMap.mapp[arg0@@372=(PagedBetree.BetreeNode.children this@@248)]| :named |0x7fe12996e290-funType:PagedBetree.ChildMap.mapp[arg0@@372=(PagedBetree.BetreeNode.children this@@248)]|))
(assert (! (=> (forall ((x@@1 T@U)) (! (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :pattern ((U_2_bool x@@1)) :qid |cast:U_2_bool|)) (=> (= (type (Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV))))) boolType) (= (bool_2_U (U_2_bool (Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))))) (Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV))))))) :named |0x7fe12995f8f8-cast:U_2_bool[x@@1=(Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV))))]|))
(assert (! (=> (forall ((arg0@@68 T@U)) (! (= (type ($LS arg0@@68)) LayerTypeType) :pattern (($LS arg0@@68)) :qid |funType:$LS|)) (= (type ($LS ($LS $LZ))) LayerTypeType)) :named |0x7fe12996e2b8-funType:$LS[arg0@@68=($LS $LZ)]|))
(assert (! (=> (forall ((arg0@@29 T@U)) (! (= (type (Lit arg0@@29)) (type arg0@@29)) :pattern ((Lit arg0@@29)) :qid |funType:Lit|)) (= (type (Lit TotalKMMapMod.__default.DefaultV)) (type TotalKMMapMod.__default.DefaultV))) :named |0x7fe12995f928-funType:Lit[arg0@@29=TotalKMMapMod.__default.DefaultV]|))
(assert (! (=> (forall ((arg0@@47 T@T)(arg1@@13 T@T)) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :pattern ((IMapType arg0@@47 arg1@@13)) :qid |typeInv:IMapTypeInv1|)) (= (IMapTypeInv1 (IMapType BoxType BoxType)) BoxType)) :named |0x7fe129972b18-typeInv:IMapTypeInv1[arg1@@13=BoxType,arg0@@47=BoxType]| :named |0x7fe129972d40-typeInv:IMapTypeInv1[arg1@@13=BoxType,arg0@@47=BoxType]|))
(assert (! (=> (forall ((x@@8 T@U)) (! (= (Lit x@@8) x@@8) :pattern ((Lit x@@8)) :skolemid |362| :qid |DafnyPreludebpl.89:29|)) (= (Lit TotalKMMapMod.__default.DefaultV) TotalKMMapMod.__default.DefaultV)) :named |0x7fe12995f958-DafnyPreludebpl.89:29[x@@8=TotalKMMapMod.__default.DefaultV]|))
(assert (! (=> (forall ((arg0@@45 T@T)(arg1@@11 T@T)) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType|)) (= (Ctor (IMapType BoxType BoxType)) 18)) :named |0x7fe129972d78-ctor:IMapType[arg1@@11=BoxType,arg0@@45=BoxType]| :named |0x7fe129972b50-ctor:IMapType[arg1@@11=BoxType,arg0@@45=BoxType]|))
(assert (! (=> (forall ((arg0@@29 T@U)) (! (= (type (Lit arg0@@29)) (type arg0@@29)) :pattern ((Lit arg0@@29)) :qid |funType:Lit|)) (= (type (Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV))))) (type (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))))) :named |0x7fe12995f988-funType:Lit[arg0@@29=(bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))]|))
(assert (! (=> (forall ((x@@8 T@U)) (! (= (Lit x@@8) x@@8) :pattern ((Lit x@@8)) :skolemid |362| :qid |DafnyPreludebpl.89:29|)) (= (Lit (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))) (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV))))) :named |0x7fe12995f9b8-DafnyPreludebpl.89:29[x@@8=(bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))]|))
(assert (! (=> (forall ((arg0@@46 T@T)(arg1@@12 T@T)) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :pattern ((IMapType arg0@@46 arg1@@12)) :qid |typeInv:IMapTypeInv0|)) (= (IMapTypeInv0 (IMapType BoxType BoxType)) BoxType)) :named |0x7fe129972b88-typeInv:IMapTypeInv0[arg1@@12=BoxType,arg0@@46=BoxType]| :named |0x7fe129972db0-typeInv:IMapTypeInv0[arg1@@12=BoxType,arg0@@46=BoxType]|))
(assert (! (=> (forall ((arg0@@68 T@U)) (! (= (type ($LS arg0@@68)) LayerTypeType) :pattern (($LS arg0@@68)) :qid |funType:$LS|)) (= (type ($LS $LZ)) LayerTypeType)) :named |0x7fe12995f9e8-funType:$LS[arg0@@68=$LZ]|))
(assert (! (=> (forall ((|k#0@@81| T@U)) (! (=> (and (= (type |k#0@@81|) (SeqType BoxType)) ($Is |k#0@@81| Tclass.KeyType.Key)) (|Buffers.__default.AnyKey#canCall| |k#0@@81|)) :pattern ((MapType0Select |keys#0@@1| ($Box |k#0@@81|))) :pattern ((Buffers.__default.AnyKey |k#0@@81|)) :skolemid |3100| :qid |Buffersidfy.17:12|)) (=> (and (= (type |key#0@@61|) (SeqType BoxType)) ($Is |key#0@@61| Tclass.KeyType.Key)) (|Buffers.__default.AnyKey#canCall| |key#0@@61|))) :named |0x7fe12997f9a8-Buffersidfy.17:12[k#0@@81=key#0@@61,keys#0@@1=(IMap#Domain (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.NoDupes)) LayerTypeType)) :named |0x7fe12995fa18-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.NoDupes]|))
(assert (! (=> (forall ((|k#0@@82| T@U)) (=> (= (type |k#0@@82|) (SeqType BoxType)) (=> (and ($Is |k#0@@82| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@82|)) (U_2_bool (MapType0Select (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0@@82|)))))) (=> (= (type |key#0@@61|) (SeqType BoxType)) (=> (and ($Is |key#0@@61| Tclass.KeyType.Key) (Buffers.__default.AnyKey |key#0@@61|)) (U_2_bool (MapType0Select (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |key#0@@61|)))))) :named |0x7fe12997f9d8-Buffersidfy.17:12!1673[k#0@@82=key#0@@61,keys#0@@1=(IMap#Domain (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes)) LayerTypeType)) :named |0x7fe12995fa48-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.NoDupes]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.Range)) LayerTypeType)) :named |0x7fe12995fa78-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.Range]|))
(assert (! (=> (forall ((|k#0@@0| T@U)) (=> (= (type |k#0@@0|) (SeqType BoxType)) (=> (and ($Is |k#0@@0| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@0|)) (PagedBetree.BetreeNode.WF ($LS $LZ) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0@@0|))))))) (=> (= (type |key#0@@61|) (SeqType BoxType)) (=> (and ($Is |key#0@@61| Tclass.KeyType.Key) (Buffers.__default.AnyKey |key#0@@61|)) (PagedBetree.BetreeNode.WF ($LS $LZ) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |key#0@@61|))))))) :named |0x7fe12997fbb8-PagedBetreeidfy.51:18!1084[k#0@@0=key#0@@61,$ly@@3=($LS $LZ),this@@3=(PagedBetree.BetreeNode.children this@@248)]|))
(assert (! (=> (forall ((arg0@@57 T@U)) (! (= (type (|IMap#Domain| arg0@@57)) (MapType0Type (IMapTypeInv0 (type arg0@@57)) boolType)) :pattern ((|IMap#Domain| arg0@@57)) :qid |funType:IMap#Domain|)) (= (type (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))) (MapType0Type (IMapTypeInv0 (type (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))) boolType))) :named |0x7fe12996e260-funType:IMap#Domain[arg0@@57=(PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))]| :named |0x7fe12996e2e8-funType:IMap#Domain[arg0@@57=(PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.Range)) LayerTypeType)) :named |0x7fe12995faa8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.Range]|))
(assert (! (=> (forall ((|k#0@@0| T@U)) (=> (= (type |k#0@@0|) (SeqType BoxType)) (=> (and ($Is |k#0@@0| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@0|)) (PagedBetree.BetreeNode.WF $LZ ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0@@0|))))))) (=> (= (type |key#0@@61|) (SeqType BoxType)) (=> (and ($Is |key#0@@61| Tclass.KeyType.Key) (Buffers.__default.AnyKey |key#0@@61|)) (PagedBetree.BetreeNode.WF $LZ ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |key#0@@61|))))))) :named |0x7fe12997fbe8-PagedBetreeidfy.51:18!1084[k#0@@0=key#0@@61,$ly@@3=$LZ,this@@3=(PagedBetree.BetreeNode.children this@@248)]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque)) LayerTypeType)) :named |0x7fe12995fad8-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.ApplyOpaque]|))
(assert (! (=> (forall ((|key#0@@51| T@U)) (! (=> (and (= (type |key#0@@51|) (SeqType BoxType)) (or (|Buffers.__default.AnyKey#canCall| |key#0@@51|) ($Is |key#0@@51| Tclass.KeyType.Key))) (= (Buffers.__default.AnyKey |key#0@@51|) (U_2_bool (Lit (bool_2_U true))))) :pattern ((Buffers.__default.AnyKey |key#0@@51|)) :skolemid |3095| :qid |Buffersidfy.15:20!1659|)) (=> (and (= (type |key#0@@61|) (SeqType BoxType)) (or (|Buffers.__default.AnyKey#canCall| |key#0@@61|) ($Is |key#0@@61| Tclass.KeyType.Key))) (= (Buffers.__default.AnyKey |key#0@@61|) (U_2_bool (Lit (bool_2_U true)))))) :named |0x7fe12997fc18-Buffersidfy.15:20!1659[key#0@@51=key#0@@61]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque)) LayerTypeType)) :named |0x7fe12995fb08-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.ApplyOpaque]|))
(assert (! (=> (forall ((|k#0| T@U)) (=> (and (= (type |k#0|) (SeqType BoxType)) ($Is |k#0| Tclass.KeyType.Key)) (and (|Buffers.__default.AnyKey#canCall| |k#0|) (=> (Buffers.__default.AnyKey |k#0|) (and (PagedBetree.ChildMap.ChildMap_q (PagedBetree.BetreeNode.children this@@248)) (|PagedBetree.BetreeNode.WF#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0|))))))))) (=> (and (= (type |key#0@@61|) (SeqType BoxType)) ($Is |key#0@@61| Tclass.KeyType.Key)) (and (|Buffers.__default.AnyKey#canCall| |key#0@@61|) (=> (Buffers.__default.AnyKey |key#0@@61|) (and (PagedBetree.ChildMap.ChildMap_q (PagedBetree.BetreeNode.children this@@248)) (|PagedBetree.BetreeNode.WF#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |key#0@@61|))))))))) :named |0x7fe12997fc48-PagedBetreeidfy.51:18[k#0=key#0@@61,$ly@@3=$LZ,this@@3=(PagedBetree.BetreeNode.children this@@248)]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.remove)) LayerTypeType)) :named |0x7fe12995fb38-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.remove]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.remove)) LayerTypeType)) :named |0x7fe12995fb68-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.remove]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue)) LayerTypeType)) :named |0x7fe12995fb98-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.RemoveOneValue]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue)) LayerTypeType)) :named |0x7fe12995fbc8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.RemoveOneValue]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.insert)) LayerTypeType)) :named |0x7fe12995fbf8-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.insert]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.insert)) LayerTypeType)) :named |0x7fe12995fc28-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.insert]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.replace1with2)) LayerTypeType)) :named |0x7fe12995fc58-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.replace1with2]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2)) LayerTypeType)) :named |0x7fe12995fc88-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.replace1with2]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.replace2with1)) LayerTypeType)) :named |0x7fe12995fcb8-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.replace2with1]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1)) LayerTypeType)) :named |0x7fe12995fce8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.replace2with1]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.concat)) LayerTypeType)) :named |0x7fe12995fd18-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.concat]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.concat)) LayerTypeType)) :named |0x7fe12995fd48-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.concat]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.concat3)) LayerTypeType)) :named |0x7fe12995fd78-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.concat3]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.concat3)) LayerTypeType)) :named |0x7fe12995fda8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.concat3]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.concatSeq)) LayerTypeType)) :named |0x7fe12995fdd8-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.concatSeq]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq)) LayerTypeType)) :named |0x7fe12995fe08-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.concatSeq]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.IsPrefix)) LayerTypeType)) :named |0x7fe12995fe38-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.IsPrefix]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix)) LayerTypeType)) :named |0x7fe12995fe68-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.IsPrefix]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.IsSuffix)) LayerTypeType)) :named |0x7fe12995fe98-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.IsSuffix]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix)) LayerTypeType)) :named |0x7fe12995fec8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.IsSuffix]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate)) LayerTypeType)) :named |0x7fe12995fef8-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.SeqIndexIterate]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate)) LayerTypeType)) :named |0x7fe12995ff28-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.SeqIndexIterate]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.SeqIndex)) LayerTypeType)) :named |0x7fe12995ff58-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.SeqIndex]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex)) LayerTypeType)) :named |0x7fe12995ff88-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.SeqIndex]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.SeqOfLength)) LayerTypeType)) :named |0x7fe12995ffb8-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.SeqOfLength]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength)) LayerTypeType)) :named |0x7fe12995ffe8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.SeqOfLength]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate)) LayerTypeType)) :named |0x7fe129960018-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.SeqIndexUpdate]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate)) LayerTypeType)) :named |0x7fe129960048-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.SeqIndexUpdate]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.Zip)) LayerTypeType)) :named |0x7fe129960078-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.Zip]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.Zip)) LayerTypeType)) :named |0x7fe1299600a8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.Zip]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.Unzip)) LayerTypeType)) :named |0x7fe1299600d8-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.Unzip]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.Unzip)) LayerTypeType)) :named |0x7fe129960108-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.Unzip]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.FlattenShape)) LayerTypeType)) :named |0x7fe129960138-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.FlattenShape]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape)) LayerTypeType)) :named |0x7fe129960168-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.FlattenShape]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.FlattenLength)) LayerTypeType)) :named |0x7fe129960198-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.FlattenLength]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength)) LayerTypeType)) :named |0x7fe1299601c8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.FlattenLength]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.Flatten)) LayerTypeType)) :named |0x7fe1299601f8-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.Flatten]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.Flatten)) LayerTypeType)) :named |0x7fe129960228-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.Flatten]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.seqMax)) LayerTypeType)) :named |0x7fe129960258-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.seqMax]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.seqMax)) LayerTypeType)) :named |0x7fe129960288-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.seqMax]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Sequences._default.fill)) LayerTypeType)) :named |0x7fe1299602b8-funType:AsFuelBottom[arg0@@373=StartFuel_Sequences._default.fill]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Sequences._default.fill)) LayerTypeType)) :named |0x7fe1299602e8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Sequences._default.fill]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1)) LayerTypeType)) :named |0x7fe129960318-funType:AsFuelBottom[arg0@@373=StartFuel_MapRemove_s._default.MapRemove1]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1)) LayerTypeType)) :named |0x7fe129960348-funType:AsFuelBottom[arg0@@373=StartFuelAssert_MapRemove_s._default.MapRemove1]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.MapRemove)) LayerTypeType)) :named |0x7fe129960378-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.MapRemove]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.MapRemove)) LayerTypeType)) :named |0x7fe1299603a8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.MapRemove]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong)) LayerTypeType)) :named |0x7fe1299603d8-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.MapRemoveStrong]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong)) LayerTypeType)) :named |0x7fe129960408-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.MapRemoveStrong]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong)) LayerTypeType)) :named |0x7fe129960438-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.MapRemove1Strong]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong)) LayerTypeType)) :named |0x7fe129960468-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.MapRemove1Strong]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.IMapInvert)) LayerTypeType)) :named |0x7fe129960498-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.IMapInvert]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.IMapInvert)) LayerTypeType)) :named |0x7fe1299604c8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.IMapInvert]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.IMapRemove)) LayerTypeType)) :named |0x7fe1299604f8-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.IMapRemove]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove)) LayerTypeType)) :named |0x7fe129960528-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.IMapRemove]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.IMapRemove1)) LayerTypeType)) :named |0x7fe129960558-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.IMapRemove1]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1)) LayerTypeType)) :named |0x7fe129960588-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.IMapRemove1]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion)) LayerTypeType)) :named |0x7fe1299605b8-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.MapDisjointUnion]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion)) LayerTypeType)) :named |0x7fe1299605e8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.MapDisjointUnion]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA)) LayerTypeType)) :named |0x7fe129960618-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.MapUnionPreferA]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA)) LayerTypeType)) :named |0x7fe129960648-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.MapUnionPreferA]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB)) LayerTypeType)) :named |0x7fe129960678-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.MapUnionPreferB]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB)) LayerTypeType)) :named |0x7fe1299606a8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.MapUnionPreferB]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.MapUnion)) LayerTypeType)) :named |0x7fe1299606d8-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.MapUnion]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.MapUnion)) LayerTypeType)) :named |0x7fe129960708-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.MapUnion]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA)) LayerTypeType)) :named |0x7fe129960738-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.IMapUnionPreferA]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA)) LayerTypeType)) :named |0x7fe129960768-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.IMapUnionPreferA]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB)) LayerTypeType)) :named |0x7fe129960798-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.IMapUnionPreferB]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB)) LayerTypeType)) :named |0x7fe1299607c8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.IMapUnionPreferB]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.IMapUnion)) LayerTypeType)) :named |0x7fe1299607f8-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.IMapUnion]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion)) LayerTypeType)) :named |0x7fe129960828-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.IMapUnion]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3)) LayerTypeType)) :named |0x7fe129960858-funType:AsFuelBottom[arg0@@373=StartFuel_Maps._default.MapDisjointUnion3]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3)) LayerTypeType)) :named |0x7fe129960888-funType:AsFuelBottom[arg0@@373=StartFuelAssert_Maps._default.MapDisjointUnion3]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_MsgHistoryMod.MsgHistory.LSNSet)) LayerTypeType)) :named |0x7fe1299608b8-funType:AsFuelBottom[arg0@@373=StartFuel_MsgHistoryMod.MsgHistory.LSNSet]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet)) LayerTypeType)) :named |0x7fe1299608e8-funType:AsFuelBottom[arg0@@373=StartFuelAssert_MsgHistoryMod.MsgHistory.LSNSet]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuel_PagedBetree.Path.ReplacedChildren)) LayerTypeType)) :named |0x7fe129960918-funType:AsFuelBottom[arg0@@373=StartFuel_PagedBetree.Path.ReplacedChildren]|))
(assert (! (=> (forall ((arg0@@373 T@U)) (! (= (type (AsFuelBottom arg0@@373)) LayerTypeType) :pattern ((AsFuelBottom arg0@@373)) :qid |funType:AsFuelBottom|)) (= (type (AsFuelBottom StartFuelAssert_PagedBetree.Path.ReplacedChildren)) LayerTypeType)) :named |0x7fe129960948-funType:AsFuelBottom[arg0@@373=StartFuelAssert_PagedBetree.Path.ReplacedChildren]|))
(assert (! (=> (forall ((d@@43 T@U)) (! (or (not (and (= (type d@@43) DatatypeTypeType) (PagedBetree.BetreeNode.BetreeNode_q d@@43))) (and (= (type (|a#6#0#0@@0!1349!2| d@@43)) DatatypeTypeType) (= (type (|a#6#1#0@@0!1349!1| d@@43)) DatatypeTypeType) (= d@@43 (|#PagedBetree.BetreeNode.BetreeNode| (|a#6#0#0@@0!1349!2| d@@43) (|a#6#1#0@@0!1349!1| d@@43))))) :pattern ((PagedBetree.BetreeNode.BetreeNode_q d@@43)) :skolemid |1350| :qid |unknown.0:0!1121|)) (or (not (and (= (type this@@248) DatatypeTypeType) (PagedBetree.BetreeNode.BetreeNode_q this@@248))) (and (= (type (|a#6#0#0@@0!1349!2| this@@248)) DatatypeTypeType) (= (type (|a#6#1#0@@0!1349!1| this@@248)) DatatypeTypeType) (= this@@248 (|#PagedBetree.BetreeNode.BetreeNode| (|a#6#0#0@@0!1349!2| this@@248) (|a#6#1#0@@0!1349!1| this@@248)))))) :named |0x7fe129960978-unknown.0:0!1121[d@@43=this@@248]|))
(assert (! (=> (forall (($ly@@9 T@U)(this@@9 T@U)) (! (=> (and (= (type $ly@@9) LayerTypeType) (= (type this@@9) DatatypeTypeType) (or (|PagedBetree.BetreeNode.WF#canCall| this@@9) (and (not (= 9 $FunctionContextHeight)) ($Is this@@9 Tclass.PagedBetree.BetreeNode)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (=> (PagedBetree.BetreeNode.BetreeNode_q this@@9) (|PagedBetree.ChildMap.WF#canCall| (PagedBetree.BetreeNode.children this@@9)))) (= (PagedBetree.BetreeNode.WF ($LS $ly@@9) this@@9) (and true (=> (PagedBetree.BetreeNode.BetreeNode_q this@@9) (PagedBetree.ChildMap.WF $ly@@9 (PagedBetree.BetreeNode.children this@@9))))))) :pattern ((PagedBetree.BetreeNode.WF ($LS $ly@@9) this@@9)) :skolemid |1370| :qid |PagedBetreeidfy.72:15!1188|)) (=> (and (= (type $LZ) LayerTypeType) (= (type this@@248) DatatypeTypeType) (or (|PagedBetree.BetreeNode.WF#canCall| this@@248) (and (not (= 9 $FunctionContextHeight)) ($Is this@@248 Tclass.PagedBetree.BetreeNode)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (=> (PagedBetree.BetreeNode.BetreeNode_q this@@248) (|PagedBetree.ChildMap.WF#canCall| (PagedBetree.BetreeNode.children this@@248)))) (= (PagedBetree.BetreeNode.WF ($LS $LZ) this@@248) (and true (=> (PagedBetree.BetreeNode.BetreeNode_q this@@248) (PagedBetree.ChildMap.WF $LZ (PagedBetree.BetreeNode.children this@@248)))))))) :named |0x7fe1299609a8-PagedBetreeidfy.72:15!1188[this@@9=this@@248,$ly@@9=$LZ]|))
(assert (! (=> (forall ((x@@1 T@U)) (! (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :pattern ((U_2_bool x@@1)) :qid |cast:U_2_bool|)) (=> (= (type (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))) boolType) (= (bool_2_U (U_2_bool (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV))))) (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))))) :named |0x7fe12996d998-cast:U_2_bool[x@@1=(bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))]|))
(assert (! (=> (forall ((|a#12#0#0| T@U)(|a#12#1#0| T@U)) (! (=> (and (= (type |a#12#0#0|) DatatypeTypeType) (= (type |a#12#1#0|) DatatypeTypeType)) (= (PagedBetree.BetreeNode.children (|#PagedBetree.BetreeNode.BetreeNode| |a#12#0#0| |a#12#1#0|)) |a#12#1#0|)) :pattern ((|#PagedBetree.BetreeNode.BetreeNode| |a#12#0#0| |a#12#1#0|)) :skolemid |1359| :qid |PagedBetreeidfy.69:5!1156|)) (=> (and (= (type (|a#6#0#0@@0!1349!2| this@@248)) DatatypeTypeType) (= (type (|a#6#1#0@@0!1349!1| this@@248)) DatatypeTypeType)) (= (PagedBetree.BetreeNode.children (|#PagedBetree.BetreeNode.BetreeNode| (|a#6#0#0@@0!1349!2| this@@248) (|a#6#1#0@@0!1349!1| this@@248))) (|a#6#1#0@@0!1349!1| this@@248)))) :named |0x7fe12996d9c8-PagedBetreeidfy.69:5!1156[a#12#1#0=(a#6#1#0@@0!1349!1 this@@248),a#12#0#0=(a#6#0#0@@0!1349!2 this@@248)]|))
(assert (! (=> (forall ((arg0@@3 Bool)) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :pattern ((bool_2_U arg0@@3)) :qid |typeInv:U_2_bool|)) (= (U_2_bool (bool_2_U true)) true)) :named |0x7fe12996dde8-typeInv:U_2_bool[arg0@@3=true]|))
(assert (! (=> (forall ((arg0@@4 Bool)) (! (= (type (bool_2_U arg0@@4)) boolType) :pattern ((bool_2_U arg0@@4)) :qid |funType:bool_2_U|)) (= (type (bool_2_U true)) boolType)) :named |0x7fe12996de18-funType:bool_2_U[arg0@@4=true]|))
(assert (! (=> (forall ((this T@U)($ly T@U)) (! (=> (and (= (type $ly) LayerTypeType) (= (type this) DatatypeTypeType)) (= (PagedBetree.ChildMap.WF ($LS $ly) this) (PagedBetree.ChildMap.WF $ly this))) :pattern ((PagedBetree.ChildMap.WF ($LS $ly) this)) :skolemid |1329| :qid |PagedBetreeidfy.49:15|)) (=> (and (= (type $LZ) LayerTypeType) (= (type (PagedBetree.BetreeNode.children this@@248)) DatatypeTypeType)) (= (PagedBetree.ChildMap.WF ($LS $LZ) (PagedBetree.BetreeNode.children this@@248)) (PagedBetree.ChildMap.WF $LZ (PagedBetree.BetreeNode.children this@@248))))) :named |0x7fe12996e1a8-PagedBetreeidfy.49:15[$ly=$LZ,this=(PagedBetree.BetreeNode.children this@@248)]| :named |0x7fe12996e1c0-PagedBetreeidfy.49:15[$ly=$LZ,this=(PagedBetree.BetreeNode.children this@@248)]|))
(assert (! (=> (forall ((this@@3 T@U)($ly@@3 T@U)) (! (or (not (and (= (type $ly@@3) LayerTypeType) (= (type this@@3) DatatypeTypeType) (or (|PagedBetree.ChildMap.WF#canCall| this@@3) (and (not (= 9 $FunctionContextHeight)) ($Is this@@3 Tclass.PagedBetree.ChildMap))))) (and (PagedBetree.ChildMap.ChildMap_q this@@3) (|Buffers.__default.Total#canCall| (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3))) (or (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3)))) (forall ((|k#0| T@U)) (! (=> (and (= (type |k#0|) (SeqType BoxType)) ($Is |k#0| Tclass.KeyType.Key)) (and (|Buffers.__default.AnyKey#canCall| |k#0|) (=> (Buffers.__default.AnyKey |k#0|) (and (PagedBetree.ChildMap.ChildMap_q this@@3) (|PagedBetree.BetreeNode.WF#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box |k#0|)))))))) :pattern ((Buffers.__default.AnyKey |k#0|)) :pattern (($Unbox DatatypeTypeType                                           (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp                                                                              this@@3))                                                           ($Box |k#0|)))) :skolemid |1334| :qid |PagedBetreeidfy.51:18|))) (or (not (PagedBetree.ChildMap.WF ($LS $ly@@3) this@@3)) (and (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3))) (forall ((|k#0@@0| T@U)) (! (=> (= (type |k#0@@0|) (SeqType BoxType)) (=> (and ($Is |k#0@@0| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@0|)) (PagedBetree.BetreeNode.WF $ly@@3 ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box |k#0@@0|)))))) :pattern (($Unbox DatatypeTypeType                                           (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp                                                                              this@@3))                                                           ($Box |k#0@@0|)))) :pattern ((Buffers.__default.AnyKey |k#0@@0|)) :skolemid |1333| :qid |PagedBetreeidfy.51:18!1084|)))) (or (PagedBetree.ChildMap.WF ($LS $ly@@3) this@@3) (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3)))) (not (=> (= (type (|k#0@@0!1333!0| $ly@@3 this@@3)) (SeqType BoxType)) (=> (and ($Is (|k#0@@0!1333!0| $ly@@3 this@@3) Tclass.KeyType.Key) (Buffers.__default.AnyKey (|k#0@@0!1333!0| $ly@@3 this@@3))) (PagedBetree.BetreeNode.WF $ly@@3 ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box (|k#0@@0!1333!0| $ly@@3 this@@3))))))))))) :pattern ((PagedBetree.ChildMap.WF ($LS $ly@@3) this@@3)) :skolemid |1335| :qid |PagedBetreeidfy.49:15!1085|)) (or (not (and (= (type $LZ) LayerTypeType) (= (type (PagedBetree.BetreeNode.children this@@248)) DatatypeTypeType) (or (|PagedBetree.ChildMap.WF#canCall| (PagedBetree.BetreeNode.children this@@248)) (and (not (= 9 $FunctionContextHeight)) ($Is (PagedBetree.BetreeNode.children this@@248) Tclass.PagedBetree.ChildMap))))) (and (PagedBetree.ChildMap.ChildMap_q (PagedBetree.BetreeNode.children this@@248)) (|Buffers.__default.Total#canCall| (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))) (or (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))))) (forall ((|k#0| T@U)) (=> (and (= (type |k#0|) (SeqType BoxType)) ($Is |k#0| Tclass.KeyType.Key)) (and (|Buffers.__default.AnyKey#canCall| |k#0|) (=> (Buffers.__default.AnyKey |k#0|) (and (PagedBetree.ChildMap.ChildMap_q (PagedBetree.BetreeNode.children this@@248)) (|PagedBetree.BetreeNode.WF#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0|)))))))))) (or (not (PagedBetree.ChildMap.WF ($LS $LZ) (PagedBetree.BetreeNode.children this@@248))) (and (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))) (forall ((|k#0@@0| T@U)) (=> (= (type |k#0@@0|) (SeqType BoxType)) (=> (and ($Is |k#0@@0| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@0|)) (PagedBetree.BetreeNode.WF $LZ ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0@@0|))))))))) (or (PagedBetree.ChildMap.WF ($LS $LZ) (PagedBetree.BetreeNode.children this@@248)) (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))))) (not (=> (= (type (|k#0@@0!1333!0| $LZ (PagedBetree.BetreeNode.children this@@248))) (SeqType BoxType)) (=> (and ($Is (|k#0@@0!1333!0| $LZ (PagedBetree.BetreeNode.children this@@248)) Tclass.KeyType.Key) (Buffers.__default.AnyKey (|k#0@@0!1333!0| $LZ (PagedBetree.BetreeNode.children this@@248)))) (PagedBetree.BetreeNode.WF $LZ ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box (|k#0@@0!1333!0| $LZ (PagedBetree.BetreeNode.children this@@248))))))))))))) :named |0x7fe12996e1e0-PagedBetreeidfy.49:15!1085[$ly@@3=$LZ,this@@3=(PagedBetree.BetreeNode.children this@@248)]| :named |0x7fe12996e1f8-PagedBetreeidfy.49:15!1085[$ly@@3=$LZ,this@@3=(PagedBetree.BetreeNode.children this@@248)]|))
(assert (! (=> (forall ((this T@U)($ly T@U)) (! (=> (and (= (type $ly) LayerTypeType) (= (type this) DatatypeTypeType)) (= (PagedBetree.ChildMap.WF ($LS $ly) this) (PagedBetree.ChildMap.WF $ly this))) :pattern ((PagedBetree.ChildMap.WF ($LS $ly) this)) :skolemid |1329| :qid |PagedBetreeidfy.49:15|)) (=> (and (= (type ($LS $LZ)) LayerTypeType) (= (type (PagedBetree.BetreeNode.children this@@248)) DatatypeTypeType)) (= (PagedBetree.ChildMap.WF ($LS ($LS $LZ)) (PagedBetree.BetreeNode.children this@@248)) (PagedBetree.ChildMap.WF ($LS $LZ) (PagedBetree.BetreeNode.children this@@248))))) :named |0x7fe12996e218-PagedBetreeidfy.49:15[$ly=($LS $LZ),this=(PagedBetree.BetreeNode.children this@@248)]|))
(assert (! (=> (forall ((|keys#0@@1| T@U)) (! (or (not (and (= (type |keys#0@@1|) (MapType0Type BoxType boolType)) (or (|Buffers.__default.Total#canCall| |keys#0@@1|) ($Is |keys#0@@1| (TISet Tclass.KeyType.Key))))) (and (forall ((|k#0@@81| T@U)) (! (=> (and (= (type |k#0@@81|) (SeqType BoxType)) ($Is |k#0@@81| Tclass.KeyType.Key)) (|Buffers.__default.AnyKey#canCall| |k#0@@81|)) :pattern ((MapType0Select |keys#0@@1| ($Box |k#0@@81|))) :pattern ((Buffers.__default.AnyKey |k#0@@81|)) :skolemid |3100| :qid |Buffersidfy.17:12|)) (or (not (Buffers.__default.Total |keys#0@@1|)) (forall ((|k#0@@82| T@U)) (! (=> (= (type |k#0@@82|) (SeqType BoxType)) (=> (and ($Is |k#0@@82| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@82|)) (U_2_bool (MapType0Select |keys#0@@1| ($Box |k#0@@82|))))) :pattern ((MapType0Select |keys#0@@1| ($Box |k#0@@82|))) :pattern ((Buffers.__default.AnyKey |k#0@@82|)) :skolemid |3099| :qid |Buffersidfy.17:12!1673|))) (or (Buffers.__default.Total |keys#0@@1|) (not (=> (= (type (|k#0@@82!3099!3| |keys#0@@1|)) (SeqType BoxType)) (=> (and ($Is (|k#0@@82!3099!3| |keys#0@@1|) Tclass.KeyType.Key) (Buffers.__default.AnyKey (|k#0@@82!3099!3| |keys#0@@1|))) (U_2_bool (MapType0Select |keys#0@@1| ($Box (|k#0@@82!3099!3| |keys#0@@1|)))))))))) :pattern ((Buffers.__default.Total |keys#0@@1|)) :skolemid |3101| :qid |Buffersidfy.16:19!1676|)) (or (not (and (= (type (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))) (MapType0Type BoxType boolType)) (or (|Buffers.__default.Total#canCall| (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))) ($Is (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) (TISet Tclass.KeyType.Key))))) (and (forall ((|k#0@@81| T@U)) (! (=> (and (= (type |k#0@@81|) (SeqType BoxType)) ($Is |k#0@@81| Tclass.KeyType.Key)) (|Buffers.__default.AnyKey#canCall| |k#0@@81|)) :pattern ((MapType0Select |keys#0@@1| ($Box |k#0@@81|))) :pattern ((Buffers.__default.AnyKey |k#0@@81|)) :skolemid |3100| :qid |Buffersidfy.17:12|)) (or (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))))) (forall ((|k#0@@82| T@U)) (=> (= (type |k#0@@82|) (SeqType BoxType)) (=> (and ($Is |k#0@@82| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@82|)) (U_2_bool (MapType0Select (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0@@82|))))))) (or (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))) (not (=> (= (type (|k#0@@82!3099!3| (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))))) (SeqType BoxType)) (=> (and ($Is (|k#0@@82!3099!3| (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))) Tclass.KeyType.Key) (Buffers.__default.AnyKey (|k#0@@82!3099!3| (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))))) (U_2_bool (MapType0Select (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box (|k#0@@82!3099!3| (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))))))))))))) :named |0x7fe129973410-Buffersidfy.16:19!1676[keys#0@@1=(IMap#Domain (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))]| :named |0x7fe12996e230-Buffersidfy.16:19!1676[keys#0@@1=(IMap#Domain (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))]|))
(assert (! (=> (forall ((this@@3 T@U)($ly@@3 T@U)) (! (or (not (and (= (type $ly@@3) LayerTypeType) (= (type this@@3) DatatypeTypeType) (or (|PagedBetree.ChildMap.WF#canCall| this@@3) (and (not (= 9 $FunctionContextHeight)) ($Is this@@3 Tclass.PagedBetree.ChildMap))))) (and (PagedBetree.ChildMap.ChildMap_q this@@3) (|Buffers.__default.Total#canCall| (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3))) (or (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3)))) (forall ((|k#0| T@U)) (! (=> (and (= (type |k#0|) (SeqType BoxType)) ($Is |k#0| Tclass.KeyType.Key)) (and (|Buffers.__default.AnyKey#canCall| |k#0|) (=> (Buffers.__default.AnyKey |k#0|) (and (PagedBetree.ChildMap.ChildMap_q this@@3) (|PagedBetree.BetreeNode.WF#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box |k#0|)))))))) :pattern ((Buffers.__default.AnyKey |k#0|)) :pattern (($Unbox DatatypeTypeType                                           (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp                                                                              this@@3))                                                           ($Box |k#0|)))) :skolemid |1334| :qid |PagedBetreeidfy.51:18|))) (or (not (PagedBetree.ChildMap.WF ($LS $ly@@3) this@@3)) (and (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3))) (forall ((|k#0@@0| T@U)) (! (=> (= (type |k#0@@0|) (SeqType BoxType)) (=> (and ($Is |k#0@@0| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@0|)) (PagedBetree.BetreeNode.WF $ly@@3 ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box |k#0@@0|)))))) :pattern (($Unbox DatatypeTypeType                                           (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp                                                                              this@@3))                                                           ($Box |k#0@@0|)))) :pattern ((Buffers.__default.AnyKey |k#0@@0|)) :skolemid |1333| :qid |PagedBetreeidfy.51:18!1084|)))) (or (PagedBetree.ChildMap.WF ($LS $ly@@3) this@@3) (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp this@@3)))) (not (=> (= (type (|k#0@@0!1333!0| $ly@@3 this@@3)) (SeqType BoxType)) (=> (and ($Is (|k#0@@0!1333!0| $ly@@3 this@@3) Tclass.KeyType.Key) (Buffers.__default.AnyKey (|k#0@@0!1333!0| $ly@@3 this@@3))) (PagedBetree.BetreeNode.WF $ly@@3 ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp this@@3)) ($Box (|k#0@@0!1333!0| $ly@@3 this@@3))))))))))) :pattern ((PagedBetree.ChildMap.WF ($LS $ly@@3) this@@3)) :skolemid |1335| :qid |PagedBetreeidfy.49:15!1085|)) (or (not (and (= (type ($LS $LZ)) LayerTypeType) (= (type (PagedBetree.BetreeNode.children this@@248)) DatatypeTypeType) (or (|PagedBetree.ChildMap.WF#canCall| (PagedBetree.BetreeNode.children this@@248)) (and (not (= 9 $FunctionContextHeight)) ($Is (PagedBetree.BetreeNode.children this@@248) Tclass.PagedBetree.ChildMap))))) (and (PagedBetree.ChildMap.ChildMap_q (PagedBetree.BetreeNode.children this@@248)) (|Buffers.__default.Total#canCall| (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))) (or (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))))) (forall ((|k#0| T@U)) (=> (and (= (type |k#0|) (SeqType BoxType)) ($Is |k#0| Tclass.KeyType.Key)) (and (|Buffers.__default.AnyKey#canCall| |k#0|) (=> (Buffers.__default.AnyKey |k#0|) (and (PagedBetree.ChildMap.ChildMap_q (PagedBetree.BetreeNode.children this@@248)) (|PagedBetree.BetreeNode.WF#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0|)))))))))) (or (not (PagedBetree.ChildMap.WF ($LS ($LS $LZ)) (PagedBetree.BetreeNode.children this@@248))) (and (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248)))) (forall ((|k#0@@0| T@U)) (=> (= (type |k#0@@0|) (SeqType BoxType)) (=> (and ($Is |k#0@@0| Tclass.KeyType.Key) (Buffers.__default.AnyKey |k#0@@0|)) (PagedBetree.BetreeNode.WF ($LS $LZ) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box |k#0@@0|))))))))) (or (PagedBetree.ChildMap.WF ($LS ($LS $LZ)) (PagedBetree.BetreeNode.children this@@248)) (not (Buffers.__default.Total (|IMap#Domain| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))))) (not (=> (= (type (|k#0@@0!1333!0| ($LS $LZ) (PagedBetree.BetreeNode.children this@@248))) (SeqType BoxType)) (=> (and ($Is (|k#0@@0!1333!0| ($LS $LZ) (PagedBetree.BetreeNode.children this@@248)) Tclass.KeyType.Key) (Buffers.__default.AnyKey (|k#0@@0!1333!0| ($LS $LZ) (PagedBetree.BetreeNode.children this@@248)))) (PagedBetree.BetreeNode.WF ($LS $LZ) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (PagedBetree.ChildMap.mapp (PagedBetree.BetreeNode.children this@@248))) ($Box (|k#0@@0!1333!0| ($LS $LZ) (PagedBetree.BetreeNode.children this@@248))))))))))))) :named |0x7fe12996e250-PagedBetreeidfy.49:15!1085[$ly@@3=($LS $LZ),this@@3=(PagedBetree.BetreeNode.children this@@248)]|))
(assert (! (=> (forall ((arg0@@3 Bool)) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :pattern ((bool_2_U arg0@@3)) :qid |typeInv:U_2_bool|)) (= (U_2_bool (bool_2_U (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))) (TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV)))) :named |0x7fe12995f898-typeInv:U_2_bool[arg0@@3=(TotalKMMapMod.__default.TerminalValue (Lit TotalKMMapMod.__default.DefaultV))]|))
(check-sat)

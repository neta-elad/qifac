(set-option :produce-unsat-cores true)
(set-option :smt.core.minimize true)
(set-info :smt-lib-version |2.6|)
(set-info :category |"industrial"|)
(set-info :boogie-vc-id CheckWellformed$$Test.QueryReceipt.ChildAt)
(set-option :print-success false)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :timeout 0)
(set-option :rlimit 16350000)
(declare-sort T@T 0)
(declare-sort T@U 0)
(declare-fun tickleBool (Bool) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun UOrdering2 (T@U T@U) Bool)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun |##Test.ChildMap.ChildMap| () T@U)
(declare-fun Tagclass.Common.Key () T@U)
(declare-fun Tagclass.Test.BetreeNode () T@U)
(declare-fun Tagclass.Test.ChildMap () T@U)
(declare-fun class.Test.ChildMap () T@U)
(declare-fun |##Test.BetreeNode.Nil| () T@U)
(declare-fun |##Test.BetreeNode.BetreeNode| () T@U)
(declare-fun class.Test.BetreeNode () T@U)
(declare-fun |##Test.QueryReceiptLine.QueryReceiptLine| () T@U)
(declare-fun Tagclass.Test.QueryReceiptLine () T@U)
(declare-fun class.Test.QueryReceiptLine () T@U)
(declare-fun |##Test.QueryReceipt.QueryReceipt| () T@U)
(declare-fun Tagclass.Test.QueryReceipt () T@U)
(declare-fun class.Test.QueryReceipt () T@U)
(declare-fun class.Test.__default () T@U)
(declare-fun Tagclass.Test.__default () T@U)
(declare-fun Tagclass.Common.byte () T@U)
(declare-fun class.Common.byte () T@U)
(declare-fun class.Common.__default () T@U)
(declare-fun Tagclass.Common.__default () T@U)
(declare-fun TyTagFamilyType () T@T)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun tytagFamily$Key () T@U)
(declare-fun tytagFamily$BetreeNode () T@U)
(declare-fun tytagFamily$ChildMap () T@U)
(declare-fun tytagFamily$QueryReceiptLine () T@U)
(declare-fun tytagFamily$QueryReceipt () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun bx@@10!398!0 (T@U T@U) T@U)
(declare-fun bx@@11!400!1 (T@U T@U) T@U)
(declare-fun bx@@12!402!2 (T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun i!405!3 (T@U T@U) Int)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun bx@@13!407!4 (T@U T@U T@U) T@U)
(declare-fun bx@@14!409!5 (T@U T@U T@U) T@U)
(declare-fun bx@@15!411!6 (T@U T@U T@U) T@U)
(declare-fun i@@0!413!7 (T@U T@U T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun bx@@16!415!8 (T@U T@U T@U) T@U)
(declare-fun bx@@17!417!9 (T@U T@U T@U T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun bx@@18!420!10 (T@U T@U T@U) T@U)
(declare-fun bx@@19!422!11 (T@U T@U T@U T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun x@@18!470!12 (T@U) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun o@@23!493!13 (T@U T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun o@@24!495!14 (T@U T@U) T@U)
(declare-fun o@@25!498!15 (T@U T@U) T@U)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun o@@31!515!16 (T@U T@U) T@U)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun o@@32!517!17 (T@U T@U) T@U)
(declare-fun o@@33!520!18 (T@U T@U) T@U)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun bx@@22!527!19 (T@U) T@U)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun x@@28!532!20 (T@U) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun o@@40!549!21 (T@U T@U) T@U)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun o@@41!551!22 (T@U T@U) T@U)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun o@@42!554!23 (T@U T@U) T@U)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun i@@7!564!24 (T@U T@U) Int)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun i@@12!581!25 (T@U T@U) Int)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun i@@13!586!26 (Int T@U T@U) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun i@@14!588!27 (Int T@U T@U) Int)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun j!590!28 (T@U T@U) Int)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun j@@0!593!29 (Int T@U T@U) Int)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun k@@4!621!30 (T@U) T@U)
(declare-fun v@@42!623!31 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun v@@43!625!32 (T@U) T@U)
(declare-fun k@@5!625!33 (T@U) T@U)
(declare-fun u@@5!630!34 (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun bx@@24!636!35 (T@U T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun u@@13!646!37 (T@U T@U) T@U)
(declare-fun u@@12!645!36 (T@U T@U) T@U)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun o@@43!649!38 (T@U T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun k@@6!651!39 (T@U) T@U)
(declare-fun v@@48!653!40 (T@U) T@U)
(declare-fun v@@49!655!41 (T@U) T@U)
(declare-fun k@@7!655!42 (T@U) T@U)
(declare-fun u@@14!660!43 (T@U T@U) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun bx@@25!666!44 (T@U T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun u@@18!670!46 (T@U T@U) T@U)
(declare-fun u@@17!669!45 (T@U T@U) T@U)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun fld!724!47 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@44!724!48 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@0!726!49 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@45!726!50 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@1!728!51 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@46!728!52 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@2!730!53 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@47!730!54 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@3!732!55 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@48!732!56 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@4!734!57 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@49!734!58 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun bx0@@10!738!59 (T@U T@U T@U) T@U)
(declare-fun h@@24!738!60 (T@U T@U T@U) T@U)
(declare-fun bx@@34!741!62 (T@U T@U) T@U)
(declare-fun bx@@33!740!61 (T@U T@U) T@U)
(declare-fun r@@9!743!64 (T@U T@U T@U T@U) T@U)
(declare-fun bx0@@11!744!63 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun |x0#0!752!65| (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun |x0#0@@0!759!66| (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun fld@@5!768!67 (T@U T@U T@U T@U) T@U)
(declare-fun o@@50!768!68 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@6!770!70 (T@U T@U T@U T@U) T@U)
(declare-fun o@@51!770!69 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@7!772!71 (T@U T@U T@U T@U) T@U)
(declare-fun o@@52!772!72 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@8!774!73 (T@U T@U T@U T@U) T@U)
(declare-fun o@@53!774!74 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@9!776!75 (T@U T@U T@U T@U) T@U)
(declare-fun o@@54!776!76 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@10!778!77 (T@U T@U T@U T@U) T@U)
(declare-fun o@@55!778!78 (T@U T@U T@U T@U) T@U)
(declare-fun h@@30!782!79 (T@U T@U) T@U)
(declare-fun bx@@39!784!80 (T@U T@U) T@U)
(declare-fun r@@13!786!81 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@11!812!82 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@56!812!83 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@12!814!84 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@57!814!85 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@13!816!87 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@58!816!86 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@14!818!88 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@59!818!89 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@15!820!90 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@60!820!91 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@16!822!92 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@61!822!93 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun bx1@@10!826!94 (T@U T@U T@U T@U) T@U)
(declare-fun bx0@@24!826!95 (T@U T@U T@U T@U) T@U)
(declare-fun h@@36!826!96 (T@U T@U T@U T@U) T@U)
(declare-fun bx@@47!830!99 (T@U T@U) T@U)
(declare-fun bx@@46!829!98 (T@U T@U) T@U)
(declare-fun bx@@45!828!97 (T@U T@U) T@U)
(declare-fun r@@17!832!102 (T@U T@U T@U T@U T@U) T@U)
(declare-fun bx1@@11!833!100 (T@U T@U T@U T@U T@U) T@U)
(declare-fun bx0@@25!833!101 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun |x1#0!842!103| (T@U T@U T@U T@U) T@U)
(declare-fun |x0#0@@1!842!104| (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun |x1#0@@0!850!105| (T@U T@U T@U T@U) T@U)
(declare-fun |x0#0@@2!850!106| (T@U T@U T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun |a#1#1#0!855!107| (T@U) T@U)
(declare-fun |a#1#0#0!855!108| (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun |#Test.ChildMap.ChildMap| (T@U) T@U)
(declare-fun Test.ChildMap.ChildMap_q (T@U) Bool)
(declare-fun |a#15#0#0!886!109| (T@U) T@U)
(declare-fun Tclass.Common.Key () T@U)
(declare-fun Tclass.Test.BetreeNode () T@U)
(declare-fun Tclass.Test.ChildMap () T@U)
(declare-fun Test.ChildMap.mapp (T@U) T@U)
(declare-fun |$IsA#Test.ChildMap| (T@U) Bool)
(declare-fun |Test.ChildMap#Equal| (T@U T@U) Bool)
(declare-fun Test.ChildMap.WF (T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |Test.ChildMap.WF#canCall| (T@U) Bool)
(declare-fun |Test.ChildMap.WF#requires| (T@U T@U) Bool)
(declare-fun Test.BetreeNode.WF (T@U T@U) Bool)
(declare-fun |k#0@@0!906!110| (T@U T@U) T@U)
(declare-fun Common.__default.AnyKey (T@U) Bool)
(declare-fun Common.__default.TotalSet (T@U) Bool)
(declare-fun |Test.BetreeNode.WF#canCall| (T@U) Bool)
(declare-fun |Common.__default.AnyKey#canCall| (T@U) Bool)
(declare-fun |Common.__default.TotalSet#canCall| (T@U) Bool)
(declare-fun |k#1@@0!909!111| (T@U T@U) T@U)
(declare-fun |#Test.BetreeNode.Nil| () T@U)
(declare-fun Test.BetreeNode.Nil_q (T@U) Bool)
(declare-fun |#Test.BetreeNode.BetreeNode| (T@U) T@U)
(declare-fun Test.BetreeNode.BetreeNode_q (T@U) Bool)
(declare-fun |a#6#0#0@@0!922!112| (T@U) T@U)
(declare-fun Test.BetreeNode.children (T@U) T@U)
(declare-fun |$IsA#Test.BetreeNode| (T@U) Bool)
(declare-fun |Test.BetreeNode#Equal| (T@U T@U) Bool)
(declare-fun |Test.BetreeNode.WF#requires| (T@U T@U) Bool)
(declare-fun |#Test.QueryReceiptLine.QueryReceiptLine| (T@U) T@U)
(declare-fun Test.QueryReceiptLine.QueryReceiptLine_q (T@U) Bool)
(declare-fun |a#1#0#0@@0!944!113| (T@U) T@U)
(declare-fun Tclass.Test.QueryReceiptLine () T@U)
(declare-fun Test.QueryReceiptLine.node (T@U) T@U)
(declare-fun |$IsA#Test.QueryReceiptLine| (T@U) Bool)
(declare-fun |Test.QueryReceiptLine#Equal| (T@U T@U) Bool)
(declare-fun Test.QueryReceiptLine.WF (T@U) Bool)
(declare-fun |Test.QueryReceiptLine.WF#canCall| (T@U) Bool)
(declare-fun |Test.QueryReceiptLine.WF#requires| (T@U) Bool)
(declare-fun |#Test.QueryReceipt.QueryReceipt| (T@U T@U T@U) T@U)
(declare-fun Test.QueryReceipt.QueryReceipt_q (T@U) Bool)
(declare-fun |a#1#2#0!964!115| (T@U) T@U)
(declare-fun |a#1#1#0@@0!964!116| (T@U) T@U)
(declare-fun |a#1#0#0@@1!964!114| (T@U) T@U)
(declare-fun Tclass.Test.QueryReceipt () T@U)
(declare-fun Test.QueryReceipt.key (T@U) T@U)
(declare-fun Test.QueryReceipt.root (T@U) T@U)
(declare-fun Test.QueryReceipt.lines (T@U) T@U)
(declare-fun |$IsA#Test.QueryReceipt| (T@U) Bool)
(declare-fun |Test.QueryReceipt#Equal| (T@U T@U) Bool)
(declare-fun Test.QueryReceipt.Structure (T@U) Bool)
(declare-fun |Test.QueryReceipt.Structure#canCall| (T@U) Bool)
(declare-fun |Test.QueryReceipt.Structure#requires| (T@U) Bool)
(declare-fun |i#0@@0!985!117| (T@U) Int)
(declare-fun |i#1@@0!988!118| (T@U) Int)
(declare-fun Test.QueryReceipt.AllLinesWF (T@U) Bool)
(declare-fun |Test.QueryReceipt.AllLinesWF#canCall| (T@U) Bool)
(declare-fun |Test.QueryReceipt.AllLinesWF#requires| (T@U) Bool)
(declare-fun |i#0@@2!995!119| (T@U) Int)
(declare-fun |i#1@@2!998!120| (T@U) Int)
(declare-fun Test.QueryReceipt.ChildAt (T@U Int) T@U)
(declare-fun |Test.QueryReceipt.ChildAt#canCall| (T@U Int) Bool)
(declare-fun |Test.QueryReceipt.ChildAt#requires| (T@U Int) Bool)
(declare-fun Tclass.Test.__default () T@U)
(declare-fun Tclass.Common.byte () T@U)
(declare-fun Tclass.Common.__default () T@U)
(declare-fun |Common.__default.AnyKey#requires| (T@U) Bool)
(declare-fun |Common.__default.TotalSet#requires| (T@U) Bool)
(declare-fun |k#0@@2!1032!121| (T@U) T@U)
(declare-fun |k#1@@2!1035!122| (T@U) T@U)
(declare-fun MapType4Type (T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun this@@27 () T@U)
(declare-fun $_Frame@0@@0 () T@U)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |i#0@@9| () Int)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $f@@11!1008!124 () T@U)
(declare-fun $o@@25!1008!123 () T@U)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun $f@@12!1009!125 () T@U)
(declare-fun $o@@26!1009!126 () T@U)
(declare-fun |k#1@@3!1012!128| () T@U)
(declare-fun |k#0@@3!1010!127| () T@U)
(assert (forall ((arg0 Int)) (! (= (U_2_int (int_2_U arg0)) arg0) :pattern ((int_2_U arg0)) :qid |typeInv:U_2_int|)))
(assert (forall ((x T@U)) (! (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :pattern ((U_2_int x)) :qid |cast:U_2_int|)))
(assert (forall ((arg0@@0 Int)) (! (= (type (int_2_U arg0@@0)) intType) :pattern ((int_2_U arg0@@0)) :qid |funType:int_2_U|)))
(assert (forall ((arg0@@1 Real)) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :pattern ((real_2_U arg0@@1)) :qid |typeInv:U_2_real|)))
(assert (forall ((x@@0 T@U)) (! (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :pattern ((U_2_real x@@0)) :qid |cast:U_2_real|)))
(assert (forall ((arg0@@2 Real)) (! (= (type (real_2_U arg0@@2)) realType) :pattern ((real_2_U arg0@@2)) :qid |funType:real_2_U|)))
(assert (forall ((arg0@@3 Bool)) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :pattern ((bool_2_U arg0@@3)) :qid |typeInv:U_2_bool|)))
(assert (forall ((x@@1 T@U)) (! (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :pattern ((U_2_bool x@@1)) :qid |cast:U_2_bool|)))
(assert (forall ((arg0@@4 Bool)) (! (= (type (bool_2_U arg0@@4)) boolType) :pattern ((bool_2_U arg0@@4)) :qid |funType:bool_2_U|)))
(assert (forall ((arg0@@5 RoundingMode)) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :pattern ((rmode_2_U arg0@@5)) :qid |typeInv:U_2_rmode|)))
(assert (forall ((x@@2 T@U)) (! (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :pattern ((U_2_rmode x@@2)) :qid |cast:U_2_rmode|)))
(assert (forall ((arg0@@6 RoundingMode)) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :pattern ((rmode_2_U arg0@@6)) :qid |funType:rmode_2_U|)))
(assert (forall ((arg0@@7 String)) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :pattern ((string_2_U arg0@@7)) :qid |typeInv:U_2_string|)))
(assert (forall ((x@@3 T@U)) (! (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :pattern ((U_2_string x@@3)) :qid |cast:U_2_string|)))
(assert (forall ((arg0@@8 String)) (! (= (type (string_2_U arg0@@8)) stringType) :pattern ((string_2_U arg0@@8)) :qid |funType:string_2_U|)))
(assert (forall ((arg0@@9 (RegEx String))) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :pattern ((regex_2_U arg0@@9)) :qid |typeInv:U_2_regex|)))
(assert (forall ((x@@4 T@U)) (! (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :pattern ((U_2_regex x@@4)) :qid |cast:U_2_regex|)))
(assert (forall ((arg0@@10 (RegEx String))) (! (= (type (regex_2_U arg0@@10)) regexType) :pattern ((regex_2_U arg0@@10)) :qid |funType:regex_2_U|)))
(assert (forall ((x@@5 T@U)) (! (UOrdering2 x@@5 x@@5) :no-pattern (U_2_int x@@5) :no-pattern (U_2_bool x@@5) :qid |bg:subtype-refl|)))
(assert (forall ((x@@6 T@U)(y T@U)(z T@U)) (! (=> (and (= (type y) (type x@@6)) (= (type z) (type x@@6)) (UOrdering2 x@@6 y) (UOrdering2 y z)) (UOrdering2 x@@6 z)) :pattern ((UOrdering2 x@@6 y) (UOrdering2 y z)) :qid |bg:subtype-trans|)))
(assert (forall ((x@@7 T@U)(y@@0 T@U)) (! (=> (= (type y@@0) (type x@@7)) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0))) :pattern ((UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) :qid |bg:subtype-antisymm|)))
(assert (forall ((arg0@@11 T@T)) (! (= (Ctor (FieldType arg0@@11)) 9) :qid |ctor:FieldType|)))
(assert (forall ((arg0@@12 T@T)) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :pattern ((FieldType arg0@@12)) :qid |typeInv:FieldTypeInv0|)))
(assert (forall ((arg0@@13 Int)) (! (= (type (TBitvector arg0@@13)) TyType) :pattern ((TBitvector arg0@@13)) :qid |funType:TBitvector|)))
(assert (forall ((w Int)) (! (= (Inv0_TBitvector (TBitvector w)) w) :pattern ((TBitvector w)) :skolemid |347| :qid |DafnyPreludebpl.34:15|)))
(assert (forall ((arg0@@14 T@U)) (! (= (type (TSet arg0@@14)) TyType) :pattern ((TSet arg0@@14)) :qid |funType:TSet|)))
(assert (forall ((arg0@@15 T@U)) (! (= (type (Inv0_TSet arg0@@15)) TyType) :pattern ((Inv0_TSet arg0@@15)) :qid |funType:Inv0_TSet|)))
(assert (forall ((t T@U)) (! (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :pattern ((TSet t)) :skolemid |348| :qid |DafnyPreludebpl.36:15|)))
(assert (forall ((arg0@@16 T@U)) (! (= (type (TISet arg0@@16)) TyType) :pattern ((TISet arg0@@16)) :qid |funType:TISet|)))
(assert (forall ((arg0@@17 T@U)) (! (= (type (Inv0_TISet arg0@@17)) TyType) :pattern ((Inv0_TISet arg0@@17)) :qid |funType:Inv0_TISet|)))
(assert (forall ((t@@0 T@U)) (! (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :pattern ((TISet t@@0)) :skolemid |349| :qid |DafnyPreludebpl.38:15|)))
(assert (forall ((arg0@@18 T@U)) (! (= (type (TSeq arg0@@18)) TyType) :pattern ((TSeq arg0@@18)) :qid |funType:TSeq|)))
(assert (forall ((arg0@@19 T@U)) (! (= (type (Inv0_TSeq arg0@@19)) TyType) :pattern ((Inv0_TSeq arg0@@19)) :qid |funType:Inv0_TSeq|)))
(assert (forall ((t@@1 T@U)) (! (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :pattern ((TSeq t@@1)) :skolemid |350| :qid |DafnyPreludebpl.40:15|)))
(assert (forall ((arg0@@20 T@U)) (! (= (type (TMultiSet arg0@@20)) TyType) :pattern ((TMultiSet arg0@@20)) :qid |funType:TMultiSet|)))
(assert (forall ((arg0@@21 T@U)) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType) :pattern ((Inv0_TMultiSet arg0@@21)) :qid |funType:Inv0_TMultiSet|)))
(assert (forall ((t@@2 T@U)) (! (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :pattern ((TMultiSet t@@2)) :skolemid |351| :qid |DafnyPreludebpl.42:15|)))
(assert (forall ((arg0@@22 T@U)(arg1 T@U)) (! (= (type (TMap arg0@@22 arg1)) TyType) :pattern ((TMap arg0@@22 arg1)) :qid |funType:TMap|)))
(assert (forall ((arg0@@23 T@U)) (! (= (type (Inv0_TMap arg0@@23)) TyType) :pattern ((Inv0_TMap arg0@@23)) :qid |funType:Inv0_TMap|)))
(assert (forall ((t@@3 T@U)(u T@U)) (! (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :pattern ((TMap t@@3 u)) :skolemid |352| :qid |DafnyPreludebpl.45:15|)))
(assert (forall ((arg0@@24 T@U)) (! (= (type (Inv1_TMap arg0@@24)) TyType) :pattern ((Inv1_TMap arg0@@24)) :qid |funType:Inv1_TMap|)))
(assert (forall ((t@@4 T@U)(u@@0 T@U)) (! (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :pattern ((TMap t@@4 u@@0)) :skolemid |353| :qid |DafnyPreludebpl.46:15|)))
(assert (forall ((arg0@@25 T@U)(arg1@@0 T@U)) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType) :pattern ((TIMap arg0@@25 arg1@@0)) :qid |funType:TIMap|)))
(assert (forall ((arg0@@26 T@U)) (! (= (type (Inv0_TIMap arg0@@26)) TyType) :pattern ((Inv0_TIMap arg0@@26)) :qid |funType:Inv0_TIMap|)))
(assert (forall ((t@@5 T@U)(u@@1 T@U)) (! (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :pattern ((TIMap t@@5 u@@1)) :skolemid |354| :qid |DafnyPreludebpl.49:15|)))
(assert (forall ((arg0@@27 T@U)) (! (= (type (Inv1_TIMap arg0@@27)) TyType) :pattern ((Inv1_TIMap arg0@@27)) :qid |funType:Inv1_TIMap|)))
(assert (forall ((t@@6 T@U)(u@@2 T@U)) (! (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :pattern ((TIMap t@@6 u@@2)) :skolemid |355| :qid |DafnyPreludebpl.50:15|)))
(assert (forall ((arg0@@28 T@U)) (! (= (type (Tag arg0@@28)) TyTagType) :pattern ((Tag arg0@@28)) :qid |funType:Tag|)))
(assert (forall ((t@@7 T@U)) (! (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :pattern ((TSet t@@7)) :skolemid |356| :qid |DafnyPreludebpl.76:15|)))
(assert (forall ((t@@8 T@U)) (! (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :pattern ((TISet t@@8)) :skolemid |357| :qid |DafnyPreludebpl.77:15|)))
(assert (forall ((t@@9 T@U)) (! (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :pattern ((TMultiSet t@@9)) :skolemid |358| :qid |DafnyPreludebpl.78:15|)))
(assert (forall ((t@@10 T@U)) (! (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :pattern ((TSeq t@@10)) :skolemid |359| :qid |DafnyPreludebpl.79:15|)))
(assert (forall ((t@@11 T@U)(u@@3 T@U)) (! (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :pattern ((TMap t@@11 u@@3)) :skolemid |360| :qid |DafnyPreludebpl.80:15|)))
(assert (forall ((t@@12 T@U)(u@@4 T@U)) (! (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :pattern ((TIMap t@@12 u@@4)) :skolemid |361| :qid |DafnyPreludebpl.81:15|)))
(assert (forall ((arg0@@29 T@U)) (! (= (type (Lit arg0@@29)) (type arg0@@29)) :pattern ((Lit arg0@@29)) :qid |funType:Lit|)))
(assert (forall ((x@@8 T@U)) (! (= (Lit x@@8) x@@8) :pattern ((Lit x@@8)) :skolemid |362| :qid |DafnyPreludebpl.89:29|)))
(assert (forall ((arg0@@30 T@U)) (! (= (type ($Box arg0@@30)) BoxType) :pattern (($Box arg0@@30)) :qid |funType:$Box|)))
(assert (forall ((x@@9 T@U)) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9))) :pattern (($Box (Lit x@@9))) :skolemid |363| :qid |DafnyPreludebpl.90:18|)))
(assert (forall ((x@@10 Int)) (! (= (LitInt x@@10) x@@10) :pattern ((LitInt x@@10)) :skolemid |364| :qid |DafnyPreludebpl.95:29|)))
(assert (forall ((x@@11 Int)) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11)))) :pattern (($Box (int_2_U (LitInt x@@11)))) :skolemid |365| :qid |DafnyPreludebpl.96:15|)))
(assert (forall ((x@@12 Real)) (! (= (LitReal x@@12) x@@12) :pattern ((LitReal x@@12)) :skolemid |366| :qid |DafnyPreludebpl.97:30|)))
(assert (forall ((x@@13 Real)) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13)))) :pattern (($Box (real_2_U (LitReal x@@13)))) :skolemid |367| :qid |DafnyPreludebpl.98:15|)))
(assert (forall ((arg0@@31 Int)) (! (= (type (|char#FromInt| arg0@@31)) charType) :pattern ((|char#FromInt| arg0@@31)) :qid |funType:char#FromInt|)))
(assert (forall ((ch T@U)) (! (=> (= (type ch) charType) (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch)) (< (|char#ToInt| ch) 65536))) :pattern ((|char#ToInt| ch)) :skolemid |368| :qid |DafnyPreludebpl.107:15|)))
(assert (forall ((n Int)) (! (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :pattern ((|char#FromInt| n)) :skolemid |369| :qid |DafnyPreludebpl.111:15|)))
(assert (forall ((arg0@@32 T@U)(arg1@@1 T@U)) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType) :pattern ((|char#Plus| arg0@@32 arg1@@1)) :qid |funType:char#Plus|)))
(assert (forall ((b T@U)(a T@U)) (! (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :pattern ((|char#Plus| a b)) :skolemid |370| :qid |DafnyPreludebpl.117:15|)))
(assert (forall ((arg0@@33 T@U)(arg1@@2 T@U)) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType) :pattern ((|char#Minus| arg0@@33 arg1@@2)) :qid |funType:char#Minus|)))
(assert (forall ((a@@0 T@U)(b@@0 T@U)) (! (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :pattern ((|char#Minus| a@@0 b@@0)) :skolemid |371| :qid |DafnyPreludebpl.120:15|)))
(assert (forall ((arg0@@34 T@U)(T@@0 T@T)) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :pattern (($Unbox T@@0 arg0@@34)) :qid |funType:$Unbox|)))
(assert (forall ((x@@14 T@U)) (! (= ($Unbox (type x@@14) ($Box x@@14)) x@@14) :pattern (($Box x@@14)) :skolemid |372| :qid |DafnyPreludebpl.141:18|)))
(assert (forall ((bx T@U)) (! (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :pattern (($IsBox bx TInt)) :skolemid |373| :qid |DafnyPreludebpl.143:15|)))
(assert (forall ((bx@@0 T@U)) (! (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :pattern (($IsBox bx@@0 TReal)) :skolemid |374| :qid |DafnyPreludebpl.146:15|)))
(assert (forall ((bx@@1 T@U)) (! (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :pattern (($IsBox bx@@1 TBool)) :skolemid |375| :qid |DafnyPreludebpl.149:15|)))
(assert (forall ((bx@@2 T@U)) (! (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :pattern (($IsBox bx@@2 TChar)) :skolemid |376| :qid |DafnyPreludebpl.152:15|)))
(assert (forall ((arg1@@3 T@T)(arg0@@35 T@T)) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid |ctor:MapType0Type|)))
(assert (forall ((arg0@@36 T@T)(arg1@@4 T@T)) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :pattern ((MapType0Type arg0@@36 arg1@@4)) :qid |typeInv:MapType0TypeInv0|)))
(assert (forall ((arg0@@37 T@T)(arg1@@5 T@T)) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :pattern ((MapType0Type arg0@@37 arg1@@5)) :qid |typeInv:MapType0TypeInv1|)))
(assert (forall ((arg0@@38 T@U)(arg1@@6 T@U)) (! (= (type (MapType0Select arg0@@38 arg1@@6)) (MapType0TypeInv1 (type arg0@@38))) :pattern ((MapType0Select arg0@@38 arg1@@6)) :qid |funType:MapType0Select|)))
(assert (forall ((arg2 T@U)(arg0@@39 T@U)(arg1@@7 T@U)) (! (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type (type arg1@@7) (type arg2))) :pattern ((MapType0Store arg0@@39 arg1@@7 arg2)) :qid |funType:MapType0Store|)))
(assert (forall ((m T@U)(x0 T@U)(val T@U)) (! (=> (= (type val) (MapType0TypeInv1 (type m))) (= (MapType0Select (MapType0Store m x0 val) x0) val)) :weight 0 :qid |mapAx0:MapType0Select|)))
(assert (forall ((y0 T@U)(val@@0 T@U)(m@@0 T@U)(x0@@0 T@U)) (! (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :weight 0 :qid |mapAx1:MapType0Select:0|)))
(assert (forall ((m@@1 T@U)(x0@@1 T@U)(y0@@0 T@U)(val@@1 T@U)) (! (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :weight 0 :qid |mapAx2:MapType0Select|)))
(assert (forall ((bx@@3 T@U)) (! (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0)))) :pattern (($IsBox bx@@3 (TBitvector 0))) :skolemid |377| :qid |DafnyPreludebpl.158:15|)))
(assert (forall ((bx@@4 T@U)(t@@13 T@U)) (! (=> (and (= (type bx@@4) BoxType) (= (type t@@13) TyType) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13)))) :pattern (($IsBox bx@@4 (TSet t@@13))) :skolemid |378| :qid |DafnyPreludebpl.162:15|)))
(assert (forall ((bx@@5 T@U)(t@@14 T@U)) (! (=> (and (= (type bx@@5) BoxType) (= (type t@@14) TyType) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14)))) :pattern (($IsBox bx@@5 (TISet t@@14))) :skolemid |379| :qid |DafnyPreludebpl.165:15|)))
(assert (forall ((bx@@6 T@U)(t@@15 T@U)) (! (=> (and (= (type bx@@6) BoxType) (= (type t@@15) TyType) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15)))) :pattern (($IsBox bx@@6 (TMultiSet t@@15))) :skolemid |380| :qid |DafnyPreludebpl.168:15|)))
(assert (forall ((arg0@@40 T@T)) (! (= (Ctor (SeqType arg0@@40)) 16) :qid |ctor:SeqType|)))
(assert (forall ((arg0@@41 T@T)) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :pattern ((SeqType arg0@@41)) :qid |typeInv:SeqTypeInv0|)))
(assert (forall ((bx@@7 T@U)(t@@16 T@U)) (! (=> (and (= (type bx@@7) BoxType) (= (type t@@16) TyType) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16)))) :pattern (($IsBox bx@@7 (TSeq t@@16))) :skolemid |381| :qid |DafnyPreludebpl.171:15|)))
(assert (forall ((arg0@@42 T@T)(arg1@@8 T@T)) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid |ctor:MapType|)))
(assert (forall ((arg0@@43 T@T)(arg1@@9 T@T)) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :pattern ((MapType arg0@@43 arg1@@9)) :qid |typeInv:MapTypeInv0|)))
(assert (forall ((arg0@@44 T@T)(arg1@@10 T@T)) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :pattern ((MapType arg0@@44 arg1@@10)) :qid |typeInv:MapTypeInv1|)))
(assert (forall ((bx@@8 T@U)(s T@U)(t@@17 T@U)) (! (=> (and (= (type bx@@8) BoxType) (= (type s) TyType) (= (type t@@17) TyType) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17)))) :pattern (($IsBox bx@@8 (TMap s t@@17))) :skolemid |382| :qid |DafnyPreludebpl.174:15|)))
(assert (forall ((arg0@@45 T@T)(arg1@@11 T@T)) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType|)))
(assert (forall ((arg1@@12 T@T)(arg0@@46 T@T)) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :pattern ((IMapType arg0@@46 arg1@@12)) :qid |typeInv:IMapTypeInv0|)))
(assert (forall ((arg0@@47 T@T)(arg1@@13 T@T)) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :pattern ((IMapType arg0@@47 arg1@@13)) :qid |typeInv:IMapTypeInv1|)))
(assert (forall ((s@@0 T@U)(t@@18 T@U)(bx@@9 T@U)) (! (=> (and (= (type bx@@9) BoxType) (= (type s@@0) TyType) (= (type t@@18) TyType) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18)))) :pattern (($IsBox bx@@9 (TIMap s@@0 t@@18))) :skolemid |383| :qid |DafnyPreludebpl.177:15|)))
(assert (forall ((v T@U)(t@@19 T@U)) (! (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19))) :pattern (($IsBox ($Box v) t@@19)) :skolemid |384| :qid |DafnyPreludebpl.181:18|)))
(assert (forall ((arg0@@48 T@U)(arg1@@14 T@U)) (! (= (type (MapType1Select arg0@@48 arg1@@14)) (FieldTypeInv0 (type arg1@@14))) :pattern ((MapType1Select arg0@@48 arg1@@14)) :qid |funType:MapType1Select|)))
(assert (forall ((arg0@@49 T@U)(arg1@@15 T@U)(arg2@@0 T@U)) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type) :pattern ((MapType1Store arg0@@49 arg1@@15 arg2@@0)) :qid |funType:MapType1Store|)))
(assert (forall ((x0@@2 T@U)(val@@2 T@U)(m@@2 T@U)) (! (=> (= (type val@@2) (FieldTypeInv0 (type x0@@2))) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2)) :weight 0 :qid |mapAx0:MapType1Select|)))
(assert (forall ((x0@@3 T@U)(y0@@1 T@U)(val@@3 T@U)(m@@3 T@U)) (! (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :weight 0 :qid |mapAx1:MapType1Select:0|)))
(assert (forall ((x0@@4 T@U)(y0@@2 T@U)(val@@4 T@U)(m@@4 T@U)) (! (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :weight 0 :qid |mapAx2:MapType1Select|)))
(assert (forall ((v@@0 T@U)(t@@20 T@U)(h T@U)) (! (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h))) :pattern (($IsAllocBox ($Box v@@0) t@@20 h)) :skolemid |385| :qid |DafnyPreludebpl.184:18|)))
(assert (forall ((v@@1 T@U)) (! (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :pattern (($Is v@@1 TInt)) :skolemid |386| :qid |DafnyPreludebpl.202:14|)))
(assert (forall ((v@@2 T@U)) (! (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :pattern (($Is v@@2 TReal)) :skolemid |387| :qid |DafnyPreludebpl.203:14|)))
(assert (forall ((v@@3 T@U)) (! (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :pattern (($Is v@@3 TBool)) :skolemid |388| :qid |DafnyPreludebpl.204:14|)))
(assert (forall ((v@@4 T@U)) (! (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :pattern (($Is v@@4 TChar)) :skolemid |389| :qid |DafnyPreludebpl.205:14|)))
(assert (forall ((v@@5 T@U)) (! (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :pattern (($Is v@@5 TORDINAL)) :skolemid |390| :qid |DafnyPreludebpl.206:14|)))
(assert (forall ((h@@0 T@U)(v@@6 T@U)) (! (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :pattern (($IsAlloc v@@6 TInt h@@0)) :skolemid |391| :qid |DafnyPreludebpl.208:14|)))
(assert (forall ((h@@1 T@U)(v@@7 T@U)) (! (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :pattern (($IsAlloc v@@7 TReal h@@1)) :skolemid |392| :qid |DafnyPreludebpl.209:14|)))
(assert (forall ((h@@2 T@U)(v@@8 T@U)) (! (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :pattern (($IsAlloc v@@8 TBool h@@2)) :skolemid |393| :qid |DafnyPreludebpl.210:14|)))
(assert (forall ((h@@3 T@U)(v@@9 T@U)) (! (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :pattern (($IsAlloc v@@9 TChar h@@3)) :skolemid |394| :qid |DafnyPreludebpl.211:14|)))
(assert (forall ((h@@4 T@U)(v@@10 T@U)) (! (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :pattern (($IsAlloc v@@10 TORDINAL h@@4)) :skolemid |395| :qid |DafnyPreludebpl.212:14|)))
(assert (forall ((v@@11 T@U)) (! (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0))) :pattern (($Is v@@11 (TBitvector 0))) :skolemid |396| :qid |DafnyPreludebpl.216:15|)))
(assert (forall ((v@@12 T@U)(h@@5 T@U)) (! (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5)) :pattern (($IsAlloc v@@12 (TBitvector 0) h@@5)) :skolemid |397| :qid |DafnyPreludebpl.217:15|)))
(assert (forall ((v@@13 T@U)(t0 T@U)) (! (or (not (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType))) (and (or (not ($Is v@@13 (TSet t0))) (forall ((bx@@10 T@U)) (! (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0)) :pattern ((MapType0Select v@@13 bx@@10)) :skolemid |398| :qid |DafnyPreludebpl.221:11|))) (or ($Is v@@13 (TSet t0)) (not (=> (and (= (type (bx@@10!398!0 t0 v@@13)) BoxType) (U_2_bool (MapType0Select v@@13 (bx@@10!398!0 t0 v@@13)))) ($IsBox (bx@@10!398!0 t0 v@@13) t0)))))) :pattern (($Is v@@13 (TSet t0))) :skolemid |399| :qid |DafnyPreludebpl.219:15|)))
(assert (forall ((v@@14 T@U)(t0@@0 T@U)) (! (or (not (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType))) (and (or (not ($Is v@@14 (TISet t0@@0))) (forall ((bx@@11 T@U)) (! (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0)) :pattern ((MapType0Select v@@14 bx@@11)) :skolemid |400| :qid |DafnyPreludebpl.225:11|))) (or ($Is v@@14 (TISet t0@@0)) (not (=> (and (= (type (bx@@11!400!1 t0@@0 v@@14)) BoxType) (U_2_bool (MapType0Select v@@14 (bx@@11!400!1 t0@@0 v@@14)))) ($IsBox (bx@@11!400!1 t0@@0 v@@14) t0@@0)))))) :pattern (($Is v@@14 (TISet t0@@0))) :skolemid |401| :qid |DafnyPreludebpl.223:15|)))
(assert (forall ((v@@15 T@U)(t0@@1 T@U)) (! (or (not (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType))) (and (or (not ($Is v@@15 (TMultiSet t0@@1))) (forall ((bx@@12 T@U)) (! (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1)) :pattern ((MapType0Select v@@15 bx@@12)) :skolemid |402| :qid |DafnyPreludebpl.229:11|))) (or ($Is v@@15 (TMultiSet t0@@1)) (not (=> (and (= (type (bx@@12!402!2 t0@@1 v@@15)) BoxType) (< 0 (U_2_int (MapType0Select v@@15 (bx@@12!402!2 t0@@1 v@@15))))) ($IsBox (bx@@12!402!2 t0@@1 v@@15) t0@@1)))))) :pattern (($Is v@@15 (TMultiSet t0@@1))) :skolemid |403| :qid |DafnyPreludebpl.227:15|)))
(assert (forall ((v@@16 T@U)(t0@@2 T@U)) (! (=> (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16)) :pattern (($Is v@@16 (TMultiSet t0@@2))) :skolemid |404| :qid |DafnyPreludebpl.231:15|)))
(assert (forall ((arg0@@50 T@U)(arg1@@16 Int)) (! (= (type (|Seq#Index| arg0@@50 arg1@@16)) (SeqTypeInv0 (type arg0@@50))) :pattern ((|Seq#Index| arg0@@50 arg1@@16)) :qid |funType:Seq#Index|)))
(assert (forall ((v@@17 T@U)(t0@@3 T@U)) (! (or (not (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType))) (and (or (not ($Is v@@17 (TSeq t0@@3))) (forall ((i Int)) (! (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3)) :pattern ((|Seq#Index| v@@17 i)) :skolemid |405| :qid |DafnyPreludebpl.235:11|))) (or ($Is v@@17 (TSeq t0@@3)) (not (=> (and (<= 0 (i!405!3 t0@@3 v@@17)) (< (i!405!3 t0@@3 v@@17) (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 (i!405!3 t0@@3 v@@17)) t0@@3)))))) :pattern (($Is v@@17 (TSeq t0@@3))) :skolemid |406| :qid |DafnyPreludebpl.233:15|)))
(assert (forall ((t0@@4 T@U)(h@@6 T@U)(v@@18 T@U)) (! (or (not (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType) (= (type h@@6) (MapType0Type refType MapType1Type)))) (and (or (not ($IsAlloc v@@18 (TSet t0@@4) h@@6)) (forall ((bx@@13 T@U)) (! (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6)) :pattern ((MapType0Select v@@18 bx@@13)) :skolemid |407| :qid |DafnyPreludebpl.240:11|))) (or ($IsAlloc v@@18 (TSet t0@@4) h@@6) (not (=> (and (= (type (bx@@13!407!4 h@@6 t0@@4 v@@18)) BoxType) (U_2_bool (MapType0Select v@@18 (bx@@13!407!4 h@@6 t0@@4 v@@18)))) ($IsAllocBox (bx@@13!407!4 h@@6 t0@@4 v@@18) t0@@4 h@@6)))))) :pattern (($IsAlloc v@@18 (TSet t0@@4) h@@6)) :skolemid |408| :qid |DafnyPreludebpl.238:15|)))
(assert (forall ((v@@19 T@U)(t0@@5 T@U)(h@@7 T@U)) (! (or (not (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType) (= (type h@@7) (MapType0Type refType MapType1Type)))) (and (or (not ($IsAlloc v@@19 (TISet t0@@5) h@@7)) (forall ((bx@@14 T@U)) (! (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7)) :pattern ((MapType0Select v@@19 bx@@14)) :skolemid |409| :qid |DafnyPreludebpl.244:11|))) (or ($IsAlloc v@@19 (TISet t0@@5) h@@7) (not (=> (and (= (type (bx@@14!409!5 h@@7 t0@@5 v@@19)) BoxType) (U_2_bool (MapType0Select v@@19 (bx@@14!409!5 h@@7 t0@@5 v@@19)))) ($IsAllocBox (bx@@14!409!5 h@@7 t0@@5 v@@19) t0@@5 h@@7)))))) :pattern (($IsAlloc v@@19 (TISet t0@@5) h@@7)) :skolemid |410| :qid |DafnyPreludebpl.242:15|)))
(assert (forall ((v@@20 T@U)(t0@@6 T@U)(h@@8 T@U)) (! (or (not (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType) (= (type h@@8) (MapType0Type refType MapType1Type)))) (and (or (not ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) (forall ((bx@@15 T@U)) (! (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8)) :pattern ((MapType0Select v@@20 bx@@15)) :skolemid |411| :qid |DafnyPreludebpl.248:11|))) (or ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (not (=> (and (= (type (bx@@15!411!6 h@@8 t0@@6 v@@20)) BoxType) (< 0 (U_2_int (MapType0Select v@@20 (bx@@15!411!6 h@@8 t0@@6 v@@20))))) ($IsAllocBox (bx@@15!411!6 h@@8 t0@@6 v@@20) t0@@6 h@@8)))))) :pattern (($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) :skolemid |412| :qid |DafnyPreludebpl.246:15|)))
(assert (forall ((h@@9 T@U)(v@@21 T@U)(t0@@7 T@U)) (! (or (not (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType) (= (type h@@9) (MapType0Type refType MapType1Type)))) (and (or (not ($IsAlloc v@@21 (TSeq t0@@7) h@@9)) (forall ((i@@0 Int)) (! (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9)) :pattern ((|Seq#Index| v@@21 i@@0)) :skolemid |413| :qid |DafnyPreludebpl.252:11|))) (or ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (not (=> (and (<= 0 (i@@0!413!7 t0@@7 v@@21 h@@9)) (< (i@@0!413!7 t0@@7 v@@21 h@@9) (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 (i@@0!413!7 t0@@7 v@@21 h@@9)) t0@@7 h@@9)))))) :pattern (($IsAlloc v@@21 (TSeq t0@@7) h@@9)) :skolemid |414| :qid |DafnyPreludebpl.250:15|)))
(assert (forall ((arg0@@51 T@U)) (! (= (type (|Map#Elements| arg0@@51)) (MapType0Type (MapTypeInv0 (type arg0@@51)) (MapTypeInv1 (type arg0@@51)))) :pattern ((|Map#Elements| arg0@@51)) :qid |funType:Map#Elements|)))
(assert (forall ((arg0@@52 T@U)) (! (= (type (|Map#Domain| arg0@@52)) (MapType0Type (MapTypeInv0 (type arg0@@52)) boolType)) :pattern ((|Map#Domain| arg0@@52)) :qid |funType:Map#Domain|)))
(assert (forall ((v@@22 T@U)(t0@@8 T@U)(t1 T@U)) (! (or (not (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType) (= (type t1) TyType))) (and (or (not ($Is v@@22 (TMap t0@@8 t1))) (forall ((bx@@16 T@U)) (! (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8))) :pattern ((MapType0Select (|Map#Elements| v@@22)
                                                   bx@@16)) :pattern ((MapType0Select (|Map#Domain| v@@22) bx@@16)) :skolemid |415| :qid |DafnyPreludebpl.259:19|))) (or ($Is v@@22 (TMap t0@@8 t1)) (not (=> (and (= (type (bx@@16!415!8 t1 t0@@8 v@@22)) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) (bx@@16!415!8 t1 t0@@8 v@@22)))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) (bx@@16!415!8 t1 t0@@8 v@@22)) t1) ($IsBox (bx@@16!415!8 t1 t0@@8 v@@22) t0@@8))))))) :pattern (($Is v@@22 (TMap t0@@8 t1))) :skolemid |416| :qid |DafnyPreludebpl.256:15|)))
(assert (forall ((t0@@9 T@U)(t1@@0 T@U)(h@@10 T@U)(v@@23 T@U)) (! (or (not (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType) (= (type t1@@0) TyType) (= (type h@@10) (MapType0Type refType MapType1Type)))) (and (or (not ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) (forall ((bx@@17 T@U)) (! (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10))) :pattern ((MapType0Select (|Map#Domain| v@@23) bx@@17)) :pattern ((MapType0Select (|Map#Elements| v@@23)
                                                   bx@@17)) :skolemid |417| :qid |DafnyPreludebpl.267:19|))) (or ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (not (=> (and (= (type (bx@@17!417!9 v@@23 h@@10 t1@@0 t0@@9)) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) (bx@@17!417!9 v@@23 h@@10 t1@@0 t0@@9)))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) (bx@@17!417!9 v@@23 h@@10 t1@@0 t0@@9)) t1@@0 h@@10) ($IsAllocBox (bx@@17!417!9 v@@23 h@@10 t1@@0 t0@@9) t0@@9 h@@10))))))) :pattern (($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) :skolemid |418| :qid |DafnyPreludebpl.264:15|)))
(assert (forall ((arg0@@53 T@U)) (! (= (type (|Map#Values| arg0@@53)) (MapType0Type (MapTypeInv1 (type arg0@@53)) boolType)) :pattern ((|Map#Values| arg0@@53)) :qid |funType:Map#Values|)))
(assert (forall ((arg0@@54 T@U)) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType)) :pattern ((|Map#Items| arg0@@54)) :qid |funType:Map#Items|)))
(assert (forall ((arg0@@55 T@U)(arg1@@17 T@U)) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType) :pattern ((Tclass._System.Tuple2 arg0@@55 arg1@@17)) :qid |funType:Tclass._System.Tuple2|)))
(assert (forall ((t1@@1 T@U)(v@@24 T@U)(t0@@10 T@U)) (! (=> (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType) (= (type t1@@1) TyType) ($Is v@@24 (TMap t0@@10 t1@@1))) (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1)) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1))))) :pattern (($Is v@@24 (TMap t0@@10 t1@@1))) :skolemid |419| :qid |DafnyPreludebpl.272:15|)))
(assert (forall ((arg0@@56 T@U)) (! (= (type (|IMap#Elements| arg0@@56)) (MapType0Type (IMapTypeInv0 (type arg0@@56)) (IMapTypeInv1 (type arg0@@56)))) :pattern ((|IMap#Elements| arg0@@56)) :qid |funType:IMap#Elements|)))
(assert (forall ((arg0@@57 T@U)) (! (= (type (|IMap#Domain| arg0@@57)) (MapType0Type (IMapTypeInv0 (type arg0@@57)) boolType)) :pattern ((|IMap#Domain| arg0@@57)) :qid |funType:IMap#Domain|)))
(assert (forall ((t0@@11 T@U)(t1@@2 T@U)(v@@25 T@U)) (! (or (not (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType) (= (type t1@@2) TyType))) (and (or (not ($Is v@@25 (TIMap t0@@11 t1@@2))) (forall ((bx@@18 T@U)) (! (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11))) :pattern ((MapType0Select (|IMap#Domain| v@@25) bx@@18)) :pattern ((MapType0Select (|IMap#Elements| v@@25)
                                                   bx@@18)) :skolemid |420| :qid |DafnyPreludebpl.282:19|))) (or ($Is v@@25 (TIMap t0@@11 t1@@2)) (not (=> (and (= (type (bx@@18!420!10 t1@@2 t0@@11 v@@25)) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) (bx@@18!420!10 t1@@2 t0@@11 v@@25)))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) (bx@@18!420!10 t1@@2 t0@@11 v@@25)) t1@@2) ($IsBox (bx@@18!420!10 t1@@2 t0@@11 v@@25) t0@@11))))))) :pattern (($Is v@@25 (TIMap t0@@11 t1@@2))) :skolemid |421| :qid |DafnyPreludebpl.279:15|)))
(assert (forall ((v@@26 T@U)(t0@@12 T@U)(t1@@3 T@U)(h@@11 T@U)) (! (or (not (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType) (= (type t1@@3) TyType) (= (type h@@11) (MapType0Type refType MapType1Type)))) (and (or (not ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) (forall ((bx@@19 T@U)) (! (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11))) :pattern ((MapType0Select (|IMap#Domain| v@@26) bx@@19)) :pattern ((MapType0Select (|IMap#Elements| v@@26)
                                                   bx@@19)) :skolemid |422| :qid |DafnyPreludebpl.290:19|))) (or ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (not (=> (and (= (type (bx@@19!422!11 h@@11 t1@@3 t0@@12 v@@26)) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) (bx@@19!422!11 h@@11 t1@@3 t0@@12 v@@26)))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) (bx@@19!422!11 h@@11 t1@@3 t0@@12 v@@26)) t1@@3 h@@11) ($IsAllocBox (bx@@19!422!11 h@@11 t1@@3 t0@@12 v@@26) t0@@12 h@@11))))))) :pattern (($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) :skolemid |423| :qid |DafnyPreludebpl.287:15|)))
(assert (forall ((arg0@@58 T@U)) (! (= (type (|IMap#Values| arg0@@58)) (MapType0Type (IMapTypeInv1 (type arg0@@58)) boolType)) :pattern ((|IMap#Values| arg0@@58)) :qid |funType:IMap#Values|)))
(assert (forall ((arg0@@59 T@U)) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType)) :pattern ((|IMap#Items| arg0@@59)) :qid |funType:IMap#Items|)))
(assert (forall ((v@@27 T@U)(t0@@13 T@U)(t1@@4 T@U)) (! (=> (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType) (= (type t1@@4) TyType) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4)) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4))))) :pattern (($Is v@@27 (TIMap t0@@13 t1@@4))) :skolemid |424| :qid |DafnyPreludebpl.295:15|)))
(assert (forall ((arg0@@60 T@U)(arg1@@18 T@U)) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType) :pattern ((TypeTuple arg0@@60 arg1@@18)) :qid |funType:TypeTuple|)))
(assert (forall ((arg0@@61 T@U)) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType) :pattern ((TypeTupleCar arg0@@61)) :qid |funType:TypeTupleCar|)))
(assert (forall ((arg0@@62 T@U)) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType) :pattern ((TypeTupleCdr arg0@@62)) :qid |funType:TypeTupleCdr|)))
(assert (forall ((a@@1 T@U)(b@@1 T@U)) (! (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :pattern ((TypeTuple a@@1 b@@1)) :skolemid |425| :qid |DafnyPreludebpl.322:15|)))
(assert (forall ((arg0@@63 T@U)) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType)) :pattern ((SetRef_to_SetBox arg0@@63)) :qid |funType:SetRef_to_SetBox|)))
(assert (forall ((s@@1 T@U)(bx@@20 T@U)) (! (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20))))) :pattern ((MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) :skolemid |426| :qid |DafnyPreludebpl.331:15|)))
(assert (forall ((s@@2 T@U)) (! (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :pattern ((SetRef_to_SetBox s@@2)) :skolemid |427| :qid |DafnyPreludebpl.333:15|)))
(assert (forall ((d T@U)) (! (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :pattern ((BoxRank ($Box d))) :skolemid |428| :qid |DafnyPreludebpl.352:15|)))
(assert (forall ((o T@U)) (! (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :pattern ((|ORD#Offset| o)) :skolemid |429| :qid |DafnyPreludebpl.367:15|)))
(assert (forall ((arg0@@64 Int)) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType) :pattern ((|ORD#FromNat| arg0@@64)) :qid |funType:ORD#FromNat|)))
(assert (forall ((n@@0 Int)) (! (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :pattern ((|ORD#FromNat| n@@0)) :skolemid |430| :qid |DafnyPreludebpl.373:15|)))
(assert (forall ((o@@0 T@U)) (! (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :pattern ((|ORD#IsNat| o@@0)) :pattern ((|ORD#Offset| o@@0)) :skolemid |431| :qid |DafnyPreludebpl.375:15|)))
(assert (forall ((o@@1 T@U)(p T@U)) (! (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p)) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p)))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :pattern ((|ORD#Less| o@@1 p)) :skolemid |432| :qid |DafnyPreludebpl.379:15|)))
(assert (forall ((o@@2 T@U)(p@@0 T@U)) (! (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0) (|ORD#Less| p@@0 o@@2))) :pattern ((|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) :skolemid |433| :qid |DafnyPreludebpl.385:15|)))
(assert (forall ((o@@3 T@U)(p@@1 T@U)(r T@U)) (! (=> (and (= (type o@@3) BoxType) (= (type p@@1) BoxType) (= (type r) BoxType) (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) (|ORD#Less| o@@3 r)) :pattern ((|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ((|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) :skolemid |434| :qid |DafnyPreludebpl.388:15|)))
(assert (forall ((p@@2 T@U)(o@@4 T@U)) (! (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2))) :pattern ((|ORD#LessThanLimit| o@@4 p@@2)) :skolemid |435| :qid |DafnyPreludebpl.395:15|)))
(assert (forall ((arg1@@19 T@U)(arg0@@65 T@U)) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType) :pattern ((|ORD#Plus| arg0@@65 arg1@@19)) :qid |funType:ORD#Plus|)))
(assert (forall ((o@@5 T@U)(p@@3 T@U)) (! (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :pattern ((|ORD#Plus| o@@5 p@@3)) :skolemid |436| :qid |DafnyPreludebpl.399:15|)))
(assert (forall ((o@@6 T@U)(p@@4 T@U)) (! (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :pattern ((|ORD#Plus| o@@6 p@@4)) :skolemid |437| :qid |DafnyPreludebpl.404:15|)))
(assert (forall ((o@@7 T@U)(p@@5 T@U)) (! (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :pattern ((|ORD#Plus| o@@7 p@@5)) :skolemid |438| :qid |DafnyPreludebpl.407:15|)))
(assert (forall ((arg0@@66 T@U)(arg1@@20 T@U)) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType) :pattern ((|ORD#Minus| arg0@@66 arg1@@20)) :qid |funType:ORD#Minus|)))
(assert (forall ((o@@8 T@U)(p@@6 T@U)) (! (=> (and (= (type o@@8) BoxType) (= (type p@@6) BoxType) (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :pattern ((|ORD#Minus| o@@8 p@@6)) :skolemid |439| :qid |DafnyPreludebpl.412:15|)))
(assert (forall ((o@@9 T@U)(p@@7 T@U)) (! (=> (and (= (type o@@9) BoxType) (= (type p@@7) BoxType) (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :pattern ((|ORD#Minus| o@@9 p@@7)) :skolemid |440| :qid |DafnyPreludebpl.416:15|)))
(assert (forall ((o@@10 T@U)(m@@5 Int)(n@@1 Int)) (! (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :pattern ((|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5))
                           (|ORD#FromNat| n@@1))) :skolemid |441| :qid |DafnyPreludebpl.422:15|)))
(assert (forall ((o@@11 T@U)(m@@6 Int)(n@@2 Int)) (! (=> (= (type o@@11) BoxType) (=> (and (<= 0 m@@6) (<= 0 n@@2) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :pattern ((|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6))
                            (|ORD#FromNat| n@@2))) :skolemid |442| :qid |DafnyPreludebpl.427:15|)))
(assert (forall ((o@@12 T@U)(m@@7 Int)(n@@3 Int)) (! (=> (= (type o@@12) BoxType) (=> (and (<= 0 m@@7) (<= 0 n@@3) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :pattern ((|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7))
                            (|ORD#FromNat| n@@3))) :skolemid |443| :qid |DafnyPreludebpl.432:15|)))
(assert (forall ((m@@8 Int)(n@@4 Int)(o@@13 T@U)) (! (=> (= (type o@@13) BoxType) (=> (and (<= 0 m@@8) (<= 0 n@@4) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :pattern ((|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8))
                           (|ORD#FromNat| n@@4))) :skolemid |444| :qid |DafnyPreludebpl.438:15|)))
(assert (forall ((arg0@@67 T@U)(arg1@@21 T@U)) (! (= (type (AtLayer arg0@@67 arg1@@21)) (MapType0TypeInv1 (type arg0@@67))) :pattern ((AtLayer arg0@@67 arg1@@21)) :qid |funType:AtLayer|)))
(assert (forall ((f T@U)(ly T@U)) (! (=> (and (= (type f) (MapType0Type LayerTypeType (MapType0TypeInv1 (type f)))) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly))) :pattern ((AtLayer f ly)) :skolemid |445| :qid |DafnyPreludebpl.462:18|)))
(assert (forall ((arg0@@68 T@U)) (! (= (type ($LS arg0@@68)) LayerTypeType) :pattern (($LS arg0@@68)) :qid |funType:$LS|)))
(assert (forall ((f@@0 T@U)(ly@@0 T@U)) (! (=> (and (= (type f@@0) (MapType0Type LayerTypeType (MapType0TypeInv1 (type f@@0)))) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0))) :pattern ((AtLayer f@@0 ($LS ly@@0))) :skolemid |446| :qid |DafnyPreludebpl.463:18|)))
(assert (forall ((arg0@@69 Int)) (! (= (type (IndexField arg0@@69)) (FieldType BoxType)) :pattern ((IndexField arg0@@69)) :qid |funType:IndexField|)))
(assert (forall ((i@@1 Int)) (! (= (FDim (IndexField i@@1)) 1) :pattern ((IndexField i@@1)) :skolemid |447| :qid |DafnyPreludebpl.474:15|)))
(assert (forall ((i@@2 Int)) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2) :pattern ((IndexField i@@2)) :skolemid |448| :qid |DafnyPreludebpl.476:15|)))
(assert (forall ((arg1@@22 Int)(arg0@@70 T@U)) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType)) :pattern ((MultiIndexField arg0@@70 arg1@@22)) :qid |funType:MultiIndexField|)))
(assert (forall ((f@@1 T@U)(i@@3 Int)) (! (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1))) :pattern ((MultiIndexField f@@1 i@@3)) :skolemid |449| :qid |DafnyPreludebpl.479:15|)))
(assert (forall ((arg0@@71 T@U)) (! (= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType (FieldTypeInv0 (type arg0@@71)))) :pattern ((MultiIndexField_Inverse0 arg0@@71)) :qid |funType:MultiIndexField_Inverse0|)))
(assert (forall ((f@@2 T@U)(i@@4 Int)) (! (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4))) :pattern ((MultiIndexField f@@2 i@@4)) :skolemid |450| :qid |DafnyPreludebpl.482:15|)))
(assert (forall ((alpha@@3 T@T)(arg0@@72 T@U)(arg1@@23 T@U)) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3)) :pattern ((FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) :qid |funType:FieldOfDecl|)))
(assert (forall ((arg0@@73 T@U)) (! (= (type (DeclType arg0@@73)) ClassNameType) :pattern ((DeclType arg0@@73)) :qid |funType:DeclType|)))
(assert (forall ((arg0@@74 T@U)) (! (= (type (DeclName arg0@@74)) NameFamilyType) :pattern ((DeclName arg0@@74)) :qid |funType:DeclName|)))
(assert (forall ((cl T@U)(nm T@U)(T@@4 T@T)) (! (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :pattern ((FieldOfDecl T@@4 cl nm)) :skolemid |451| :qid |DafnyPreludebpl.491:18|)))
(assert (forall ((h@@12 T@U)(k T@U)(v@@28 T@U)(t@@21 T@U)) (! (=> (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type)) (= (type t@@21) TyType) ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k)) :pattern (($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) :skolemid |452| :qid |DafnyPreludebpl.504:17|)))
(assert (forall ((h@@13 T@U)(k@@0 T@U)(bx@@21 T@U)(t@@22 T@U)) (! (=> (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type)) (= (type bx@@21) BoxType) (= (type t@@22) TyType) ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0)) :pattern (($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) :skolemid |453| :qid |DafnyPreludebpl.507:14|)))
(assert (forall ((o@@14 T@U)) (! (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) :no-pattern (type o@@14) :skolemid |454| :qid |DafnyPreludebpl.524:15|)))
(assert (forall ((x@@15 Real)) (! (= (q@Int x@@15) (to_int x@@15)) :pattern ((q@Int x@@15)) :skolemid |455| :qid |DafnyPreludebpl.530:14|)))
(assert (forall ((x@@16 Int)) (! (= (q@Real x@@16) (to_real x@@16)) :pattern ((q@Real x@@16)) :skolemid |456| :qid |DafnyPreludebpl.531:15|)))
(assert (forall ((i@@5 Int)) (! (= (q@Int (q@Real i@@5)) i@@5) :pattern ((q@Int (q@Real i@@5))) :skolemid |457| :qid |DafnyPreludebpl.532:15|)))
(assert (forall ((h@@14 T@U)(r@@0 T@U)(f@@3 T@U)(x@@17 T@U)) (! (=> (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType) (= (type f@@3) (FieldType (type x@@17))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) :pattern ((MapType0Store h@@14
                              r@@0
                              (MapType1Store (MapType0Select h@@14 r@@0)
                                             f@@3
                                             x@@17))) :skolemid |458| :qid |DafnyPreludebpl.554:22|)))
(assert (forall ((a@@2 T@U)(b@@2 T@U)(c T@U)) (! (=> (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type)) (= (type c) (MapType0Type refType MapType1Type)) (not (= a@@2 c)) ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) ($HeapSucc a@@2 c)) :pattern (($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) :skolemid |459| :qid |DafnyPreludebpl.557:15|)))
(assert (forall ((h@@15 T@U)(k@@1 T@U)) (! (or (not (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type)) ($HeapSucc h@@15 k@@1))) (forall ((o@@15 T@U)) (! (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :pattern ((MapType1Select (MapType0Select k@@1 o@@15)
                                               alloc)) :skolemid |460| :qid |DafnyPreludebpl.560:30|))) :pattern (($HeapSucc h@@15 k@@1)) :skolemid |461| :qid |DafnyPreludebpl.559:15|)))
(assert (forall ((k@@2 T@U)(h@@16 T@U)) (! (or (not (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type)) ($HeapSuccGhost h@@16 k@@2))) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U)(f@@4 T@U)) (! (=> (and (= (type o@@16) refType) (= (type f@@4) (FieldType (FieldTypeInv0 (type f@@4)))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4))) :pattern ((MapType1Select (MapType0Select k@@2 o@@16) f@@4)) :skolemid |462| :qid |DafnyPreludebpl.566:20|)))) :pattern (($HeapSuccGhost h@@16 k@@2)) :skolemid |463| :qid |DafnyPreludebpl.563:15|)))
(assert (forall ((s@@3 T@U)) (! (=> (= (type s@@3) (MapType0Type (MapType0TypeInv0 (type s@@3)) boolType)) (<= 0 (|Set#Card| s@@3))) :pattern ((|Set#Card| s@@3)) :skolemid |468| :qid |DafnyPreludebpl.624:18|)))
(assert (forall ((T@@6 T@T)) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :pattern ((|Set#Empty| T@@6)) :qid |funType:Set#Empty|)))
(assert (forall ((o@@17 T@U)) (! (not (U_2_bool (MapType0Select (|Set#Empty| (type o@@17)) o@@17))) :pattern ((MapType0Select (|Set#Empty| (type o@@17)) o@@17)) :skolemid |469| :qid |DafnyPreludebpl.627:18|)))
(assert (forall ((s@@4 T@U)) (! (or (not (= (type s@@4) (MapType0Type (MapType0TypeInv0 (type s@@4)) boolType))) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| (MapType0TypeInv0 (type s@@4))))) (or (= (|Set#Card| s@@4) 0) (and (= (type (x@@18!470!12 s@@4)) (MapType0TypeInv0 (type s@@4))) (U_2_bool (MapType0Select s@@4 (x@@18!470!12 s@@4))))))) :pattern ((|Set#Card| s@@4)) :skolemid |471| :qid |DafnyPreludebpl.628:18|)))
(assert (forall ((arg0@@75 T@U)) (! (= (type (|Set#Singleton| arg0@@75)) (MapType0Type (type arg0@@75) boolType)) :pattern ((|Set#Singleton| arg0@@75)) :qid |funType:Set#Singleton|)))
(assert (forall ((r@@1 T@U)) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :pattern ((|Set#Singleton| r@@1)) :skolemid |472| :qid |DafnyPreludebpl.636:18|)))
(assert (forall ((r@@2 T@U)(o@@18 T@U)) (! (=> (= (type o@@18) (type r@@2)) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18))) :pattern ((MapType0Select (|Set#Singleton| r@@2) o@@18)) :skolemid |473| :qid |DafnyPreludebpl.637:18|)))
(assert (forall ((r@@3 T@U)) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :pattern ((|Set#Card| (|Set#Singleton| r@@3))) :skolemid |474| :qid |DafnyPreludebpl.638:18|)))
(assert (forall ((arg1@@24 T@U)(arg0@@76 T@U)) (! (= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type (type arg1@@24) boolType)) :pattern ((|Set#UnionOne| arg0@@76 arg1@@24)) :qid |funType:Set#UnionOne|)))
(assert (forall ((x@@19 T@U)(o@@19 T@U)(a@@3 T@U)) (! (=> (and (= (type a@@3) (MapType0Type (type x@@19) boolType)) (= (type o@@19) (type x@@19))) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19))))) :pattern ((MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) :skolemid |475| :qid |DafnyPreludebpl.641:18|)))
(assert (forall ((x@@20 T@U)(a@@4 T@U)) (! (=> (= (type a@@4) (MapType0Type (type x@@20) boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20))) :pattern ((|Set#UnionOne| a@@4 x@@20)) :skolemid |476| :qid |DafnyPreludebpl.643:18|)))
(assert (forall ((y@@1 T@U)(a@@5 T@U)(x@@21 T@U)) (! (=> (and (= (type a@@5) (MapType0Type (type x@@21) boolType)) (= (type y@@1) (type x@@21)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1))) :pattern ((|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1)) :skolemid |477| :qid |DafnyPreludebpl.645:18|)))
(assert (forall ((x@@22 T@U)(a@@6 T@U)) (! (=> (and (= (type a@@6) (MapType0Type (type x@@22) boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6))) :pattern ((|Set#Card| (|Set#UnionOne| a@@6 x@@22))) :skolemid |478| :qid |DafnyPreludebpl.647:18|)))
(assert (forall ((a@@7 T@U)(x@@23 T@U)) (! (=> (and (= (type a@@7) (MapType0Type (type x@@23) boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1))) :pattern ((|Set#Card| (|Set#UnionOne| a@@7 x@@23))) :skolemid |479| :qid |DafnyPreludebpl.649:18|)))
(assert (forall ((arg1@@25 T@U)(arg0@@77 T@U)) (! (= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type (MapType0TypeInv0 (type arg0@@77)) boolType)) :pattern ((|Set#Union| arg0@@77 arg1@@25)) :qid |funType:Set#Union|)))
(assert (forall ((a@@8 T@U)(b@@3 T@U)(o@@20 T@U)) (! (=> (and (= (type a@@8) (MapType0Type (type o@@20) boolType)) (= (type b@@3) (MapType0Type (type o@@20) boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))))) :pattern ((MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) :skolemid |480| :qid |DafnyPreludebpl.653:18|)))
(assert (forall ((a@@9 T@U)(b@@4 T@U)(y@@2 T@U)) (! (=> (and (= (type a@@9) (MapType0Type (type y@@2) boolType)) (= (type b@@4) (MapType0Type (type y@@2) boolType)) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2))) :pattern ((|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) :skolemid |481| :qid |DafnyPreludebpl.655:18|)))
(assert (forall ((y@@3 T@U)(a@@10 T@U)(b@@5 T@U)) (! (=> (and (= (type a@@10) (MapType0Type (type y@@3) boolType)) (= (type b@@5) (MapType0Type (type y@@3) boolType)) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3))) :pattern ((|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) :skolemid |482| :qid |DafnyPreludebpl.657:18|)))
(assert (forall ((arg1@@26 T@U)(arg0@@78 T@U)) (! (= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type (MapType0TypeInv0 (type arg0@@78)) boolType)) :pattern ((|Set#Difference| arg0@@78 arg1@@26)) :qid |funType:Set#Difference|)))
(assert (forall ((b@@6 T@U)(a@@11 T@U)) (! (=> (and (= (type a@@11) (MapType0Type (MapType0TypeInv0 (type a@@11)) boolType)) (= (type b@@6) (MapType0Type (MapType0TypeInv0 (type a@@11)) boolType)) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11))) :pattern ((|Set#Union| a@@11 b@@6)) :skolemid |483| :qid |DafnyPreludebpl.659:18|)))
(assert (forall ((arg0@@79 T@U)(arg1@@27 T@U)) (! (= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type (MapType0TypeInv0 (type arg0@@79)) boolType)) :pattern ((|Set#Intersection| arg0@@79 arg1@@27)) :qid |funType:Set#Intersection|)))
(assert (forall ((a@@12 T@U)(b@@7 T@U)(o@@21 T@U)) (! (=> (and (= (type a@@12) (MapType0Type (type o@@21) boolType)) (= (type b@@7) (MapType0Type (type o@@21) boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))))) :pattern ((MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) :skolemid |484| :qid |DafnyPreludebpl.669:18|)))
(assert (forall ((a@@13 T@U)(b@@8 T@U)) (! (=> (and (= (type a@@13) (MapType0Type (MapType0TypeInv0 (type a@@13)) boolType)) (= (type b@@8) (MapType0Type (MapType0TypeInv0 (type a@@13)) boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8))) :pattern ((|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) :skolemid |485| :qid |DafnyPreludebpl.672:18|)))
(assert (forall ((a@@14 T@U)(b@@9 T@U)) (! (=> (and (= (type a@@14) (MapType0Type (MapType0TypeInv0 (type a@@14)) boolType)) (= (type b@@9) (MapType0Type (MapType0TypeInv0 (type a@@14)) boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9))) :pattern ((|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) :skolemid |486| :qid |DafnyPreludebpl.674:18|)))
(assert (forall ((a@@15 T@U)(b@@10 T@U)) (! (=> (and (= (type a@@15) (MapType0Type (MapType0TypeInv0 (type a@@15)) boolType)) (= (type b@@10) (MapType0Type (MapType0TypeInv0 (type a@@15)) boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10))) :pattern ((|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) :skolemid |487| :qid |DafnyPreludebpl.676:18|)))
(assert (forall ((a@@16 T@U)(b@@11 T@U)) (! (=> (and (= (type a@@16) (MapType0Type (MapType0TypeInv0 (type a@@16)) boolType)) (= (type b@@11) (MapType0Type (MapType0TypeInv0 (type a@@16)) boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11))) :pattern ((|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) :skolemid |488| :qid |DafnyPreludebpl.678:18|)))
(assert (forall ((a@@17 T@U)(b@@12 T@U)) (! (=> (and (= (type a@@17) (MapType0Type (MapType0TypeInv0 (type a@@17)) boolType)) (= (type b@@12) (MapType0Type (MapType0TypeInv0 (type a@@17)) boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12)))) :pattern ((|Set#Card| (|Set#Intersection| a@@17 b@@12))) :pattern ((|Set#Card| (|Set#Union| a@@17 b@@12))) :skolemid |489| :qid |DafnyPreludebpl.680:18|)))
(assert (forall ((a@@18 T@U)(b@@13 T@U)(o@@22 T@U)) (! (=> (and (= (type a@@18) (MapType0Type (type o@@22) boolType)) (= (type b@@13) (MapType0Type (type o@@22) boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))))) :pattern ((MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) :skolemid |490| :qid |DafnyPreludebpl.684:18|)))
(assert (forall ((a@@19 T@U)(b@@14 T@U)(y@@4 T@U)) (! (=> (and (= (type a@@19) (MapType0Type (type y@@4) boolType)) (= (type b@@14) (MapType0Type (type y@@4) boolType)) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4)))) :pattern ((|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) :skolemid |491| :qid |DafnyPreludebpl.686:18|)))
(assert (forall ((a@@20 T@U)(b@@15 T@U)) (! (=> (and (= (type a@@20) (MapType0Type (MapType0TypeInv0 (type a@@20)) boolType)) (= (type b@@15) (MapType0Type (MapType0TypeInv0 (type a@@20)) boolType))) (and (= (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20)) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15)))))) :pattern ((|Set#Card| (|Set#Difference| a@@20 b@@15))) :skolemid |492| :qid |DafnyPreludebpl.688:18|)))
(assert (forall ((b@@16 T@U)(a@@21 T@U)) (! (or (not (and (= (type a@@21) (MapType0Type (MapType0TypeInv0 (type a@@21)) boolType)) (= (type b@@16) (MapType0Type (MapType0TypeInv0 (type a@@21)) boolType)))) (and (or (not (|Set#Subset| a@@21 b@@16)) (forall ((o@@23 T@U)) (! (=> (and (= (type o@@23) (MapType0TypeInv0 (type a@@21))) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :pattern ((MapType0Select a@@21 o@@23)) :pattern ((MapType0Select b@@16 o@@23)) :skolemid |493| :qid |DafnyPreludebpl.697:32|))) (or (|Set#Subset| a@@21 b@@16) (not (=> (and (= (type (o@@23!493!13 a@@21 b@@16)) (MapType0TypeInv0 (type a@@21))) (U_2_bool (MapType0Select a@@21 (o@@23!493!13 a@@21 b@@16)))) (U_2_bool (MapType0Select b@@16 (o@@23!493!13 a@@21 b@@16)))))))) :pattern ((|Set#Subset| a@@21 b@@16)) :skolemid |494| :qid |DafnyPreludebpl.696:17|)))
(assert (forall ((a@@22 T@U)(b@@17 T@U)) (! (or (not (and (= (type a@@22) (MapType0Type (MapType0TypeInv0 (type a@@22)) boolType)) (= (type b@@17) (MapType0Type (MapType0TypeInv0 (type a@@22)) boolType)))) (and (or (not (|Set#Equal| a@@22 b@@17)) (forall ((o@@24 T@U)) (! (=> (= (type o@@24) (MapType0TypeInv0 (type a@@22))) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24)))) :pattern ((MapType0Select a@@22 o@@24)) :pattern ((MapType0Select b@@17 o@@24)) :skolemid |495| :qid |DafnyPreludebpl.705:31|))) (or (|Set#Equal| a@@22 b@@17) (not (=> (= (type (o@@24!495!14 b@@17 a@@22)) (MapType0TypeInv0 (type a@@22))) (= (U_2_bool (MapType0Select a@@22 (o@@24!495!14 b@@17 a@@22))) (U_2_bool (MapType0Select b@@17 (o@@24!495!14 b@@17 a@@22))))))))) :pattern ((|Set#Equal| a@@22 b@@17)) :skolemid |496| :qid |DafnyPreludebpl.704:17|)))
(assert (forall ((b@@18 T@U)(a@@23 T@U)) (! (=> (and (= (type a@@23) (MapType0Type (MapType0TypeInv0 (type a@@23)) boolType)) (= (type b@@18) (MapType0Type (MapType0TypeInv0 (type a@@23)) boolType)) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18)) :pattern ((|Set#Equal| a@@23 b@@18)) :skolemid |497| :qid |DafnyPreludebpl.706:17|)))
(assert (forall ((a@@24 T@U)(b@@19 T@U)) (! (or (not (and (= (type a@@24) (MapType0Type (MapType0TypeInv0 (type a@@24)) boolType)) (= (type b@@19) (MapType0Type (MapType0TypeInv0 (type a@@24)) boolType)))) (and (or (not (|Set#Disjoint| a@@24 b@@19)) (forall ((o@@25 T@U)) (! (=> (= (type o@@25) (MapType0TypeInv0 (type a@@24))) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25))))) :pattern ((MapType0Select a@@24 o@@25)) :pattern ((MapType0Select b@@19 o@@25)) :skolemid |498| :qid |DafnyPreludebpl.711:34|))) (or (|Set#Disjoint| a@@24 b@@19) (not (=> (= (type (o@@25!498!15 b@@19 a@@24)) (MapType0TypeInv0 (type a@@24))) (or (not (U_2_bool (MapType0Select a@@24 (o@@25!498!15 b@@19 a@@24)))) (not (U_2_bool (MapType0Select b@@19 (o@@25!498!15 b@@19 a@@24)))))))))) :pattern ((|Set#Disjoint| a@@24 b@@19)) :skolemid |499| :qid |DafnyPreludebpl.710:18|)))
(assert (forall ((T@@37 T@T)) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :pattern ((|ISet#Empty| T@@37)) :qid |funType:ISet#Empty|)))
(assert (forall ((o@@26 T@U)) (! (not (U_2_bool (MapType0Select (|ISet#Empty| (type o@@26)) o@@26))) :pattern ((MapType0Select (|ISet#Empty| (type o@@26)) o@@26)) :skolemid |500| :qid |DafnyPreludebpl.720:18|)))
(assert (forall ((arg0@@80 T@U)(arg1@@28 T@U)) (! (= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type (type arg1@@28) boolType)) :pattern ((|ISet#UnionOne| arg0@@80 arg1@@28)) :qid |funType:ISet#UnionOne|)))
(assert (forall ((a@@25 T@U)(x@@24 T@U)(o@@27 T@U)) (! (=> (and (= (type a@@25) (MapType0Type (type x@@24) boolType)) (= (type o@@27) (type x@@24))) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27))))) :pattern ((MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) :skolemid |501| :qid |DafnyPreludebpl.727:18|)))
(assert (forall ((a@@26 T@U)(x@@25 T@U)) (! (=> (= (type a@@26) (MapType0Type (type x@@25) boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25))) :pattern ((|ISet#UnionOne| a@@26 x@@25)) :skolemid |502| :qid |DafnyPreludebpl.729:18|)))
(assert (forall ((a@@27 T@U)(x@@26 T@U)(y@@5 T@U)) (! (=> (and (= (type a@@27) (MapType0Type (type x@@26) boolType)) (= (type y@@5) (type x@@26)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5))) :pattern ((|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5)) :skolemid |503| :qid |DafnyPreludebpl.731:18|)))
(assert (forall ((arg0@@81 T@U)(arg1@@29 T@U)) (! (= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type (MapType0TypeInv0 (type arg0@@81)) boolType)) :pattern ((|ISet#Union| arg0@@81 arg1@@29)) :qid |funType:ISet#Union|)))
(assert (forall ((a@@28 T@U)(b@@20 T@U)(o@@28 T@U)) (! (=> (and (= (type a@@28) (MapType0Type (type o@@28) boolType)) (= (type b@@20) (MapType0Type (type o@@28) boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28))))) :pattern ((MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) :skolemid |504| :qid |DafnyPreludebpl.735:18|)))
(assert (forall ((a@@29 T@U)(b@@21 T@U)(y@@6 T@U)) (! (=> (and (= (type a@@29) (MapType0Type (type y@@6) boolType)) (= (type b@@21) (MapType0Type (type y@@6) boolType)) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6))) :pattern ((|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) :skolemid |505| :qid |DafnyPreludebpl.737:18|)))
(assert (forall ((a@@30 T@U)(b@@22 T@U)(y@@7 T@U)) (! (=> (and (= (type a@@30) (MapType0Type (type y@@7) boolType)) (= (type b@@22) (MapType0Type (type y@@7) boolType)) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7))) :pattern ((|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) :skolemid |506| :qid |DafnyPreludebpl.739:18|)))
(assert (forall ((arg0@@82 T@U)(arg1@@30 T@U)) (! (= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type (MapType0TypeInv0 (type arg0@@82)) boolType)) :pattern ((|ISet#Difference| arg0@@82 arg1@@30)) :qid |funType:ISet#Difference|)))
(assert (forall ((a@@31 T@U)(b@@23 T@U)) (! (=> (and (= (type a@@31) (MapType0Type (MapType0TypeInv0 (type a@@31)) boolType)) (= (type b@@23) (MapType0Type (MapType0TypeInv0 (type a@@31)) boolType)) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31))) :pattern ((|ISet#Union| a@@31 b@@23)) :skolemid |507| :qid |DafnyPreludebpl.741:18|)))
(assert (forall ((arg0@@83 T@U)(arg1@@31 T@U)) (! (= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type (MapType0TypeInv0 (type arg0@@83)) boolType)) :pattern ((|ISet#Intersection| arg0@@83 arg1@@31)) :qid |funType:ISet#Intersection|)))
(assert (forall ((o@@29 T@U)(a@@32 T@U)(b@@24 T@U)) (! (=> (and (= (type a@@32) (MapType0Type (type o@@29) boolType)) (= (type b@@24) (MapType0Type (type o@@29) boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29))))) :pattern ((MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) :skolemid |508| :qid |DafnyPreludebpl.747:18|)))
(assert (forall ((a@@33 T@U)(b@@25 T@U)) (! (=> (and (= (type a@@33) (MapType0Type (MapType0TypeInv0 (type a@@33)) boolType)) (= (type b@@25) (MapType0Type (MapType0TypeInv0 (type a@@33)) boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25))) :pattern ((|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) :skolemid |509| :qid |DafnyPreludebpl.750:18|)))
(assert (forall ((a@@34 T@U)(b@@26 T@U)) (! (=> (and (= (type a@@34) (MapType0Type (MapType0TypeInv0 (type a@@34)) boolType)) (= (type b@@26) (MapType0Type (MapType0TypeInv0 (type a@@34)) boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26))) :pattern ((|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) :skolemid |510| :qid |DafnyPreludebpl.752:18|)))
(assert (forall ((b@@27 T@U)(a@@35 T@U)) (! (=> (and (= (type a@@35) (MapType0Type (MapType0TypeInv0 (type a@@35)) boolType)) (= (type b@@27) (MapType0Type (MapType0TypeInv0 (type a@@35)) boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27))) :pattern ((|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) :skolemid |511| :qid |DafnyPreludebpl.754:18|)))
(assert (forall ((a@@36 T@U)(b@@28 T@U)) (! (=> (and (= (type a@@36) (MapType0Type (MapType0TypeInv0 (type a@@36)) boolType)) (= (type b@@28) (MapType0Type (MapType0TypeInv0 (type a@@36)) boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28))) :pattern ((|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) :skolemid |512| :qid |DafnyPreludebpl.756:18|)))
(assert (forall ((o@@30 T@U)(a@@37 T@U)(b@@29 T@U)) (! (=> (and (= (type a@@37) (MapType0Type (type o@@30) boolType)) (= (type b@@29) (MapType0Type (type o@@30) boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30)))))) :pattern ((MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) :skolemid |513| :qid |DafnyPreludebpl.761:18|)))
(assert (forall ((a@@38 T@U)(b@@30 T@U)(y@@8 T@U)) (! (=> (and (= (type a@@38) (MapType0Type (type y@@8) boolType)) (= (type b@@30) (MapType0Type (type y@@8) boolType)) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8)))) :pattern ((|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) :skolemid |514| :qid |DafnyPreludebpl.763:18|)))
(assert (forall ((b@@31 T@U)(a@@39 T@U)) (! (or (not (and (= (type a@@39) (MapType0Type (MapType0TypeInv0 (type a@@39)) boolType)) (= (type b@@31) (MapType0Type (MapType0TypeInv0 (type a@@39)) boolType)))) (and (or (not (|ISet#Subset| a@@39 b@@31)) (forall ((o@@31 T@U)) (! (=> (and (= (type o@@31) (MapType0TypeInv0 (type a@@39))) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31))) :pattern ((MapType0Select a@@39 o@@31)) :pattern ((MapType0Select b@@31 o@@31)) :skolemid |515| :qid |DafnyPreludebpl.768:33|))) (or (|ISet#Subset| a@@39 b@@31) (not (=> (and (= (type (o@@31!515!16 a@@39 b@@31)) (MapType0TypeInv0 (type a@@39))) (U_2_bool (MapType0Select a@@39 (o@@31!515!16 a@@39 b@@31)))) (U_2_bool (MapType0Select b@@31 (o@@31!515!16 a@@39 b@@31)))))))) :pattern ((|ISet#Subset| a@@39 b@@31)) :skolemid |516| :qid |DafnyPreludebpl.767:17|)))
(assert (forall ((a@@40 T@U)(b@@32 T@U)) (! (or (not (and (= (type a@@40) (MapType0Type (MapType0TypeInv0 (type a@@40)) boolType)) (= (type b@@32) (MapType0Type (MapType0TypeInv0 (type a@@40)) boolType)))) (and (or (not (|ISet#Equal| a@@40 b@@32)) (forall ((o@@32 T@U)) (! (=> (= (type o@@32) (MapType0TypeInv0 (type a@@40))) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32)))) :pattern ((MapType0Select a@@40 o@@32)) :pattern ((MapType0Select b@@32 o@@32)) :skolemid |517| :qid |DafnyPreludebpl.772:32|))) (or (|ISet#Equal| a@@40 b@@32) (not (=> (= (type (o@@32!517!17 b@@32 a@@40)) (MapType0TypeInv0 (type a@@40))) (= (U_2_bool (MapType0Select a@@40 (o@@32!517!17 b@@32 a@@40))) (U_2_bool (MapType0Select b@@32 (o@@32!517!17 b@@32 a@@40))))))))) :pattern ((|ISet#Equal| a@@40 b@@32)) :skolemid |518| :qid |DafnyPreludebpl.771:17|)))
(assert (forall ((a@@41 T@U)(b@@33 T@U)) (! (=> (and (= (type a@@41) (MapType0Type (MapType0TypeInv0 (type a@@41)) boolType)) (= (type b@@33) (MapType0Type (MapType0TypeInv0 (type a@@41)) boolType)) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33)) :pattern ((|ISet#Equal| a@@41 b@@33)) :skolemid |519| :qid |DafnyPreludebpl.773:17|)))
(assert (forall ((a@@42 T@U)(b@@34 T@U)) (! (or (not (and (= (type a@@42) (MapType0Type (MapType0TypeInv0 (type a@@42)) boolType)) (= (type b@@34) (MapType0Type (MapType0TypeInv0 (type a@@42)) boolType)))) (and (or (not (|ISet#Disjoint| a@@42 b@@34)) (forall ((o@@33 T@U)) (! (=> (= (type o@@33) (MapType0TypeInv0 (type a@@42))) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33))))) :pattern ((MapType0Select b@@34 o@@33)) :pattern ((MapType0Select a@@42 o@@33)) :skolemid |520| :qid |DafnyPreludebpl.778:35|))) (or (|ISet#Disjoint| a@@42 b@@34) (not (=> (= (type (o@@33!520!18 b@@34 a@@42)) (MapType0TypeInv0 (type a@@42))) (or (not (U_2_bool (MapType0Select a@@42 (o@@33!520!18 b@@34 a@@42)))) (not (U_2_bool (MapType0Select b@@34 (o@@33!520!18 b@@34 a@@42)))))))))) :pattern ((|ISet#Disjoint| a@@42 b@@34)) :skolemid |521| :qid |DafnyPreludebpl.777:18|)))
(assert (forall ((a@@43 Int)(b@@35 Int)) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) :pattern ((|Math#min| a@@43 b@@35)) :skolemid |522| :qid |DafnyPreludebpl.785:15|)))
(assert (forall ((a@@44 Int)(b@@36 Int)) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) :pattern ((|Math#min| a@@44 b@@36)) :skolemid |523| :qid |DafnyPreludebpl.786:15|)))
(assert (forall ((a@@45 Int)(b@@37 Int)) (! (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :pattern ((|Math#min| a@@45 b@@37)) :skolemid |524| :qid |DafnyPreludebpl.787:15|)))
(assert (forall ((a@@46 Int)) (! (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :pattern ((|Math#clip| a@@46)) :skolemid |525| :qid |DafnyPreludebpl.790:15|)))
(assert (forall ((a@@47 Int)) (! (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :pattern ((|Math#clip| a@@47)) :skolemid |526| :qid |DafnyPreludebpl.791:15|)))
(assert (forall ((ms T@U)) (! (or (not (= (type ms) (MapType0Type (MapType0TypeInv0 (type ms)) intType))) (and (or (not ($IsGoodMultiSet ms)) (forall ((bx@@22 T@U)) (! (=> (= (type bx@@22) (MapType0TypeInv0 (type ms))) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms)))) :pattern ((MapType0Select ms bx@@22)) :skolemid |527| :qid |DafnyPreludebpl.799:11|))) (or ($IsGoodMultiSet ms) (not (=> (= (type (bx@@22!527!19 ms)) (MapType0TypeInv0 (type ms))) (and (<= 0 (U_2_int (MapType0Select ms (bx@@22!527!19 ms)))) (<= (U_2_int (MapType0Select ms (bx@@22!527!19 ms))) (|MultiSet#Card| ms)))))))) :pattern (($IsGoodMultiSet ms)) :skolemid |528| :qid |DafnyPreludebpl.797:18|)))
(assert (forall ((s@@5 T@U)) (! (=> (= (type s@@5) (MapType0Type (MapType0TypeInv0 (type s@@5)) intType)) (<= 0 (|MultiSet#Card| s@@5))) :pattern ((|MultiSet#Card| s@@5)) :skolemid |529| :qid |DafnyPreludebpl.802:18|)))
(assert (forall ((x@@27 T@U)(n@@5 T@U)(s@@6 T@U)) (! (=> (and (= (type s@@6) (MapType0Type (type x@@27) intType)) (= (type n@@5) intType) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5)))) :pattern ((|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5))) :skolemid |530| :qid |DafnyPreludebpl.803:18|)))
(assert (forall ((T@@64 T@T)) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :pattern ((|MultiSet#Empty| T@@64)) :qid |funType:MultiSet#Empty|)))
(assert (forall ((o@@34 T@U)) (! (= (U_2_int (MapType0Select (|MultiSet#Empty| (type o@@34)) o@@34)) 0) :pattern ((MapType0Select (|MultiSet#Empty| (type o@@34)) o@@34)) :skolemid |531| :qid |DafnyPreludebpl.807:18|)))
(assert (forall ((s@@7 T@U)) (! (or (not (= (type s@@7) (MapType0Type (MapType0TypeInv0 (type s@@7)) intType))) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| (MapType0TypeInv0 (type s@@7))))) (or (= (|MultiSet#Card| s@@7) 0) (and (= (type (x@@28!532!20 s@@7)) (MapType0TypeInv0 (type s@@7))) (< 0 (U_2_int (MapType0Select s@@7 (x@@28!532!20 s@@7)))))))) :pattern ((|MultiSet#Card| s@@7)) :skolemid |533| :qid |DafnyPreludebpl.808:18|)))
(assert (forall ((arg0@@84 T@U)) (! (= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type (type arg0@@84) intType)) :pattern ((|MultiSet#Singleton| arg0@@84)) :qid |funType:MultiSet#Singleton|)))
(assert (forall ((r@@4 T@U)(o@@35 T@U)) (! (=> (= (type o@@35) (type r@@4)) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35))))) :pattern ((MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) :skolemid |534| :qid |DafnyPreludebpl.813:18|)))
(assert (forall ((arg0@@85 T@U)(arg1@@32 T@U)) (! (= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type (type arg1@@32) intType)) :pattern ((|MultiSet#UnionOne| arg0@@85 arg1@@32)) :qid |funType:MultiSet#UnionOne|)))
(assert (forall ((r@@5 T@U)) (! (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| (type r@@5)) r@@5)) :pattern ((|MultiSet#Singleton| r@@5)) :skolemid |535| :qid |DafnyPreludebpl.815:18|)))
(assert (forall ((a@@48 T@U)(x@@29 T@U)(o@@36 T@U)) (! (=> (and (= (type a@@48) (MapType0Type (type x@@29) intType)) (= (type o@@36) (type x@@29))) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36))) (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36)))))) :pattern ((MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)) :skolemid |536| :qid |DafnyPreludebpl.819:18|)))
(assert (forall ((a@@49 T@U)(x@@30 T@U)) (! (=> (= (type a@@49) (MapType0Type (type x@@30) intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1))) :pattern ((|MultiSet#UnionOne| a@@49 x@@30)) :skolemid |537| :qid |DafnyPreludebpl.822:18|)))
(assert (forall ((a@@50 T@U)(x@@31 T@U)(y@@9 T@U)) (! (=> (and (= (type a@@50) (MapType0Type (type x@@31) intType)) (= (type y@@9) (type x@@31)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9)))) :pattern ((|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9)) :skolemid |538| :qid |DafnyPreludebpl.825:18|)))
(assert (forall ((a@@51 T@U)(x@@32 T@U)(y@@10 T@U)) (! (=> (and (= (type a@@51) (MapType0Type (type x@@32) intType)) (= (type y@@10) (type x@@32)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10)))) :pattern ((|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10)) :skolemid |539| :qid |DafnyPreludebpl.828:18|)))
(assert (forall ((a@@52 T@U)(x@@33 T@U)) (! (=> (= (type a@@52) (MapType0Type (type x@@33) intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1))) :pattern ((|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33))) :skolemid |540| :qid |DafnyPreludebpl.830:18|)))
(assert (forall ((arg1@@33 T@U)(arg0@@86 T@U)) (! (= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type (MapType0TypeInv0 (type arg0@@86)) intType)) :pattern ((|MultiSet#Union| arg0@@86 arg1@@33)) :qid |funType:MultiSet#Union|)))
(assert (forall ((a@@53 T@U)(b@@38 T@U)(o@@37 T@U)) (! (=> (and (= (type a@@53) (MapType0Type (type o@@37) intType)) (= (type b@@38) (MapType0Type (type o@@37) intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37))))) :pattern ((MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) :skolemid |541| :qid |DafnyPreludebpl.836:18|)))
(assert (forall ((b@@39 T@U)(a@@54 T@U)) (! (=> (and (= (type a@@54) (MapType0Type (MapType0TypeInv0 (type a@@54)) intType)) (= (type b@@39) (MapType0Type (MapType0TypeInv0 (type a@@54)) intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39)))) :pattern ((|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) :skolemid |542| :qid |DafnyPreludebpl.838:18|)))
(assert (forall ((arg0@@87 T@U)(arg1@@34 T@U)) (! (= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type (MapType0TypeInv0 (type arg0@@87)) intType)) :pattern ((|MultiSet#Intersection| arg0@@87 arg1@@34)) :qid |funType:MultiSet#Intersection|)))
(assert (forall ((b@@40 T@U)(o@@38 T@U)(a@@55 T@U)) (! (=> (and (= (type a@@55) (MapType0Type (type o@@38) intType)) (= (type b@@40) (MapType0Type (type o@@38) intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38))))) :pattern ((MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) :skolemid |543| :qid |DafnyPreludebpl.842:18|)))
(assert (forall ((a@@56 T@U)(b@@41 T@U)) (! (=> (and (= (type a@@56) (MapType0Type (MapType0TypeInv0 (type a@@56)) intType)) (= (type b@@41) (MapType0Type (MapType0TypeInv0 (type a@@56)) intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41))) :pattern ((|MultiSet#Intersection|
                 (|MultiSet#Intersection| a@@56 b@@41)
                 b@@41)) :skolemid |544| :qid |DafnyPreludebpl.846:18|)))
(assert (forall ((a@@57 T@U)(b@@42 T@U)) (! (=> (and (= (type a@@57) (MapType0Type (MapType0TypeInv0 (type a@@57)) intType)) (= (type b@@42) (MapType0Type (MapType0TypeInv0 (type a@@57)) intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42))) :pattern ((|MultiSet#Intersection|
                 a@@57
                 (|MultiSet#Intersection| a@@57 b@@42))) :skolemid |545| :qid |DafnyPreludebpl.848:18|)))
(assert (forall ((arg0@@88 T@U)(arg1@@35 T@U)) (! (= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type (MapType0TypeInv0 (type arg0@@88)) intType)) :pattern ((|MultiSet#Difference| arg0@@88 arg1@@35)) :qid |funType:MultiSet#Difference|)))
(assert (forall ((a@@58 T@U)(b@@43 T@U)(o@@39 T@U)) (! (=> (and (= (type a@@58) (MapType0Type (type o@@39) intType)) (= (type b@@43) (MapType0Type (type o@@39) intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39)))))) :pattern ((MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) :skolemid |546| :qid |DafnyPreludebpl.853:18|)))
(assert (forall ((b@@44 T@U)(y@@11 T@U)(a@@59 T@U)) (! (=> (and (= (type a@@59) (MapType0Type (type y@@11) intType)) (= (type b@@44) (MapType0Type (type y@@11) intType)) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0)) :pattern ((|MultiSet#Difference| a@@59 b@@44)
               (MapType0Select b@@44 y@@11)
               (MapType0Select a@@59 y@@11)) :skolemid |547| :qid |DafnyPreludebpl.855:18|)))
(assert (forall ((a@@60 T@U)(b@@45 T@U)) (! (=> (and (= (type a@@60) (MapType0Type (MapType0TypeInv0 (type a@@60)) intType)) (= (type b@@45) (MapType0Type (MapType0TypeInv0 (type a@@60)) intType))) (and (= (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60)) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))))) :pattern ((|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) :skolemid |548| :qid |DafnyPreludebpl.857:18|)))
(assert (forall ((a@@61 T@U)(b@@46 T@U)) (! (or (not (and (= (type a@@61) (MapType0Type (MapType0TypeInv0 (type a@@61)) intType)) (= (type b@@46) (MapType0Type (MapType0TypeInv0 (type a@@61)) intType)))) (and (or (not (|MultiSet#Subset| a@@61 b@@46)) (forall ((o@@40 T@U)) (! (=> (= (type o@@40) (MapType0TypeInv0 (type a@@61))) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40)))) :pattern ((MapType0Select a@@61 o@@40)) :pattern ((MapType0Select b@@46 o@@40)) :skolemid |549| :qid |DafnyPreludebpl.867:37|))) (or (|MultiSet#Subset| a@@61 b@@46) (not (=> (= (type (o@@40!549!21 b@@46 a@@61)) (MapType0TypeInv0 (type a@@61))) (<= (U_2_int (MapType0Select a@@61 (o@@40!549!21 b@@46 a@@61))) (U_2_int (MapType0Select b@@46 (o@@40!549!21 b@@46 a@@61))))))))) :pattern ((|MultiSet#Subset| a@@61 b@@46)) :skolemid |550| :qid |DafnyPreludebpl.866:17|)))
(assert (forall ((b@@47 T@U)(a@@62 T@U)) (! (or (not (and (= (type a@@62) (MapType0Type (MapType0TypeInv0 (type a@@62)) intType)) (= (type b@@47) (MapType0Type (MapType0TypeInv0 (type a@@62)) intType)))) (and (or (not (|MultiSet#Equal| a@@62 b@@47)) (forall ((o@@41 T@U)) (! (=> (= (type o@@41) (MapType0TypeInv0 (type a@@62))) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41)))) :pattern ((MapType0Select a@@62 o@@41)) :pattern ((MapType0Select b@@47 o@@41)) :skolemid |551| :qid |DafnyPreludebpl.871:36|))) (or (|MultiSet#Equal| a@@62 b@@47) (not (=> (= (type (o@@41!551!22 a@@62 b@@47)) (MapType0TypeInv0 (type a@@62))) (= (U_2_int (MapType0Select a@@62 (o@@41!551!22 a@@62 b@@47))) (U_2_int (MapType0Select b@@47 (o@@41!551!22 a@@62 b@@47))))))))) :pattern ((|MultiSet#Equal| a@@62 b@@47)) :skolemid |552| :qid |DafnyPreludebpl.870:17|)))
(assert (forall ((a@@63 T@U)(b@@48 T@U)) (! (=> (and (= (type a@@63) (MapType0Type (MapType0TypeInv0 (type a@@63)) intType)) (= (type b@@48) (MapType0Type (MapType0TypeInv0 (type a@@63)) intType)) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48)) :pattern ((|MultiSet#Equal| a@@63 b@@48)) :skolemid |553| :qid |DafnyPreludebpl.873:17|)))
(assert (forall ((b@@49 T@U)(a@@64 T@U)) (! (or (not (and (= (type a@@64) (MapType0Type (MapType0TypeInv0 (type a@@64)) intType)) (= (type b@@49) (MapType0Type (MapType0TypeInv0 (type a@@64)) intType)))) (and (or (not (|MultiSet#Disjoint| a@@64 b@@49)) (forall ((o@@42 T@U)) (! (=> (= (type o@@42) (MapType0TypeInv0 (type a@@64))) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0))) :pattern ((MapType0Select b@@49 o@@42)) :pattern ((MapType0Select a@@64 o@@42)) :skolemid |554| :qid |DafnyPreludebpl.878:39|))) (or (|MultiSet#Disjoint| a@@64 b@@49) (not (=> (= (type (o@@42!554!23 b@@49 a@@64)) (MapType0TypeInv0 (type a@@64))) (or (= (U_2_int (MapType0Select a@@64 (o@@42!554!23 b@@49 a@@64))) 0) (= (U_2_int (MapType0Select b@@49 (o@@42!554!23 b@@49 a@@64))) 0))))))) :pattern ((|MultiSet#Disjoint| a@@64 b@@49)) :skolemid |555| :qid |DafnyPreludebpl.877:18|)))
(assert (forall ((arg0@@89 T@U)) (! (= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type (MapType0TypeInv0 (type arg0@@89)) intType)) :pattern ((|MultiSet#FromSet| arg0@@89)) :qid |funType:MultiSet#FromSet|)))
(assert (forall ((s@@8 T@U)(a@@65 T@U)) (! (=> (= (type s@@8) (MapType0Type (type a@@65) boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))))) :pattern ((MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) :skolemid |556| :qid |DafnyPreludebpl.882:18|)))
(assert (forall ((s@@9 T@U)) (! (=> (= (type s@@9) (MapType0Type (MapType0TypeInv0 (type s@@9)) boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9))) :pattern ((|MultiSet#Card| (|MultiSet#FromSet| s@@9))) :skolemid |557| :qid |DafnyPreludebpl.885:18|)))
(assert (forall ((arg0@@90 T@U)) (! (= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type (SeqTypeInv0 (type arg0@@90)) intType)) :pattern ((|MultiSet#FromSeq| arg0@@90)) :qid |funType:MultiSet#FromSeq|)))
(assert (forall ((s@@10 T@U)) (! (=> (= (type s@@10) (SeqType (SeqTypeInv0 (type s@@10)))) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10))) :pattern ((|MultiSet#FromSeq| s@@10)) :skolemid |558| :qid |DafnyPreludebpl.891:18|)))
(assert (forall ((s@@11 T@U)) (! (=> (= (type s@@11) (SeqType (SeqTypeInv0 (type s@@11)))) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11))) :pattern ((|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) :skolemid |559| :qid |DafnyPreludebpl.893:18|)))
(assert (forall ((arg1@@36 T@U)(arg0@@91 T@U)) (! (= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType (type arg1@@36))) :pattern ((|Seq#Build| arg0@@91 arg1@@36)) :qid |funType:Seq#Build|)))
(assert (forall ((v@@29 T@U)(s@@12 T@U)) (! (=> (= (type s@@12) (SeqType (type v@@29))) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29))) :pattern ((|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29))) :skolemid |560| :qid |DafnyPreludebpl.897:18|)))
(assert (forall ((T@@99 T@T)) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :pattern ((|Seq#Empty| T@@99)) :qid |funType:Seq#Empty|)))
(assert (forall ((T@@100 T@T)) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |561| :qid k!321)))
(assert (forall ((arg0@@92 T@U)(arg1@@37 T@U)) (! (= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType (SeqTypeInv0 (type arg0@@92)))) :pattern ((|Seq#Append| arg0@@92 arg1@@37)) :qid |funType:Seq#Append|)))
(assert (forall ((a@@66 T@U)(b@@50 T@U)) (! (=> (and (= (type a@@66) (SeqType (SeqTypeInv0 (type a@@66)))) (= (type b@@50) (SeqType (SeqTypeInv0 (type a@@66))))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50)))) :pattern ((|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) :skolemid |562| :qid |DafnyPreludebpl.904:18|)))
(assert (forall ((arg0@@93 T@U)(arg1@@38 Int)(arg2@@1 T@U)) (! (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType (type arg2@@1))) :pattern ((|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) :qid |funType:Seq#Update|)))
(assert (forall ((v@@30 T@U)(x@@34 T@U)(s@@13 T@U)(i@@6 Int)) (! (=> (and (= (type s@@13) (SeqType (type v@@30))) (= (type x@@34) (type v@@30)) (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34)))) :pattern ((MapType0Select (|MultiSet#FromSeq|
                                 (|Seq#Update| s@@13 i@@6 v@@30))
                               x@@34)) :skolemid |563| :qid |DafnyPreludebpl.909:18|)))
(assert (forall ((s@@14 T@U)(x@@35 T@U)) (! (or (not (= (type s@@14) (SeqType (type x@@35)))) (and (or (forall ((i@@7 Int)) (! (not (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14)) (= x@@35 (|Seq#Index| s@@14 i@@7)))) :pattern ((|Seq#Index| s@@14 i@@7)) :skolemid |564| :qid |DafnyPreludebpl.916:11|)) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)))) (or (and (<= 0 (i@@7!564!24 x@@35 s@@14)) (< (i@@7!564!24 x@@35 s@@14) (|Seq#Length| s@@14)) (= x@@35 (|Seq#Index| s@@14 (i@@7!564!24 x@@35 s@@14)))) (not (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35))))))) :pattern ((MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)) :skolemid |565| :qid |DafnyPreludebpl.915:18|)))
(assert (forall ((s@@15 T@U)) (! (=> (= (type s@@15) (SeqType (SeqTypeInv0 (type s@@15)))) (<= 0 (|Seq#Length| s@@15))) :pattern ((|Seq#Length| s@@15)) :skolemid |566| :qid |DafnyPreludebpl.925:18|)))
(assert (forall ((T@@107 T@T)) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :pattern ((|Seq#Empty| T@@107)) :skolemid |567| :qid k!322)))
(assert (forall ((s@@16 T@U)) (! (=> (and (= (type s@@16) (SeqType (SeqTypeInv0 (type s@@16)))) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| (SeqTypeInv0 (type s@@16))))) :pattern ((|Seq#Length| s@@16)) :skolemid |568| :qid |DafnyPreludebpl.929:18|)))
(assert (forall ((arg0@@94 T@U)) (! (= (type (|Seq#Singleton| arg0@@94)) (SeqType (type arg0@@94))) :pattern ((|Seq#Singleton| arg0@@94)) :qid |funType:Seq#Singleton|)))
(assert (forall ((t@@23 T@U)) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1) :pattern ((|Seq#Length| (|Seq#Singleton| t@@23))) :skolemid |569| :qid |DafnyPreludebpl.942:18|)))
(assert (forall ((arg0@@95 T@U)) (! (= (type (|Seq#Build_inv0| arg0@@95)) (SeqType (SeqTypeInv0 (type arg0@@95)))) :pattern ((|Seq#Build_inv0| arg0@@95)) :qid |funType:Seq#Build_inv0|)))
(assert (forall ((arg0@@96 T@U)) (! (= (type (|Seq#Build_inv1| arg0@@96)) (SeqTypeInv0 (type arg0@@96))) :pattern ((|Seq#Build_inv1| arg0@@96)) :qid |funType:Seq#Build_inv1|)))
(assert (forall ((s@@17 T@U)(val@@5 T@U)) (! (=> (= (type s@@17) (SeqType (type val@@5))) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5))) :pattern ((|Seq#Build| s@@17 val@@5)) :skolemid |570| :qid |DafnyPreludebpl.947:18|)))
(assert (forall ((s@@18 T@U)(v@@31 T@U)) (! (=> (= (type s@@18) (SeqType (type v@@31))) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18)))) :pattern ((|Seq#Build| s@@18 v@@31)) :skolemid |571| :qid |DafnyPreludebpl.952:18|)))
(assert (forall ((s@@19 T@U)(i@@8 Int)(v@@32 T@U)) (! (=> (= (type s@@19) (SeqType (type v@@32))) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8))))) :pattern ((|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8)) :skolemid |572| :qid |DafnyPreludebpl.955:18|)))
(assert (forall ((bx@@23 T@U)(t@@24 T@U)(s@@20 T@U)) (! (=> (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType) (= (type t@@24) TyType) ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24)) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :pattern (($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :skolemid |573| :qid |DafnyPreludebpl.960:15|)))
(assert (forall ((arg0@@97 T@U)(arg1@@39 T@U)(arg2@@2 Int)(arg3 T@U)) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType)) :pattern ((|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) :qid |funType:Seq#Create|)))
(assert (forall ((init T@U)(ty T@U)(heap T@U)(len Int)) (! (=> (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type)) (= (type init) HandleTypeType) ($IsGoodHeap heap) (<= 0 len)) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :pattern ((|Seq#Length| (|Seq#Create| ty heap len init))) :skolemid |574| :qid |DafnyPreludebpl.964:15|)))
(assert (forall ((arg0@@98 T@U)(arg1@@40 T@U)(arg2@@3 T@U)(arg3@@0 T@U)(arg4 T@U)) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType) :pattern ((Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) :qid |funType:Apply1|)))
(assert (forall ((ty@@0 T@U)(heap@@0 T@U)(len@@0 Int)(init@@0 T@U)(i@@9 Int)) (! (=> (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type)) (= (type init@@0) HandleTypeType) ($IsGoodHeap heap@@0) (<= 0 i@@9) (< i@@9 len@@0)) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9))))) :pattern ((|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9)) :skolemid |575| :qid |DafnyPreludebpl.968:15|)))
(assert (forall ((s1 T@U)(s0 T@U)) (! (=> (and (= (type s0) (SeqType (SeqTypeInv0 (type s0)))) (= (type s1) (SeqType (SeqTypeInv0 (type s0))))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1)))) :pattern ((|Seq#Length| (|Seq#Append| s0 s1))) :skolemid |576| :qid |DafnyPreludebpl.974:18|)))
(assert (forall ((t@@25 T@U)) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25) :pattern ((|Seq#Index| (|Seq#Singleton| t@@25) 0)) :skolemid |577| :qid |DafnyPreludebpl.978:18|)))
(assert (forall ((s0@@0 T@U)(s1@@0 T@U)(n@@6 Int)) (! (=> (and (= (type s0@@0) (SeqType (SeqTypeInv0 (type s0@@0)))) (= (type s1@@0) (SeqType (SeqTypeInv0 (type s0@@0))))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0))))))) :pattern ((|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6)) :skolemid |578| :qid |DafnyPreludebpl.979:18|)))
(assert (forall ((v@@33 T@U)(s@@21 T@U)(i@@10 Int)) (! (=> (= (type s@@21) (SeqType (type v@@33))) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21)))) :pattern ((|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33))) :skolemid |579| :qid |DafnyPreludebpl.984:18|)))
(assert (forall ((n@@7 Int)(s@@22 T@U)(i@@11 Int)(v@@34 T@U)) (! (=> (= (type s@@22) (SeqType (type v@@34))) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7)))))) :pattern ((|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7)) :skolemid |580| :qid |DafnyPreludebpl.986:18|)))
(assert (forall ((x@@36 T@U)(s@@23 T@U)) (! (or (not (= (type s@@23) (SeqType (type x@@36)))) (and (or (not (|Seq#Contains| s@@23 x@@36)) (and (<= 0 (i@@12!581!25 x@@36 s@@23)) (< (i@@12!581!25 x@@36 s@@23) (|Seq#Length| s@@23)) (= (|Seq#Index| s@@23 (i@@12!581!25 x@@36 s@@23)) x@@36))) (or (|Seq#Contains| s@@23 x@@36) (forall ((i@@12 Int)) (! (not (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23)) (= (|Seq#Index| s@@23 i@@12) x@@36))) :pattern ((|Seq#Index| s@@23 i@@12)) :skolemid |581| :qid |DafnyPreludebpl.994:13|))))) :pattern ((|Seq#Contains| s@@23 x@@36)) :skolemid |582| :qid |DafnyPreludebpl.992:18|)))
(assert (forall ((x@@37 T@U)) (! (not (|Seq#Contains| (|Seq#Empty| (type x@@37)) x@@37)) :pattern ((|Seq#Contains| (|Seq#Empty| (type x@@37)) x@@37)) :skolemid |583| :qid |DafnyPreludebpl.995:18|)))
(assert (forall ((s0@@1 T@U)(s1@@1 T@U)(x@@38 T@U)) (! (=> (and (= (type s0@@1) (SeqType (type x@@38))) (= (type s1@@1) (SeqType (type x@@38)))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38) (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38)))) :pattern ((|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)) :skolemid |584| :qid |DafnyPreludebpl.999:18|)))
(assert (forall ((s@@24 T@U)(v@@35 T@U)(x@@39 T@U)) (! (=> (and (= (type s@@24) (SeqType (type v@@35))) (= (type x@@39) (type v@@35))) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39) (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39)))) :pattern ((|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)) :skolemid |585| :qid |DafnyPreludebpl.1004:18|)))
(assert (forall ((arg0@@99 T@U)(arg1@@41 Int)) (! (= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType (SeqTypeInv0 (type arg0@@99)))) :pattern ((|Seq#Take| arg0@@99 arg1@@41)) :qid |funType:Seq#Take|)))
(assert (forall ((s@@25 T@U)(n@@8 Int)(x@@40 T@U)) (! (or (not (= (type s@@25) (SeqType (type x@@40)))) (and (or (not (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) (and (<= 0 (i@@13!586!26 n@@8 s@@25 x@@40)) (< (i@@13!586!26 n@@8 s@@25 x@@40) n@@8) (< (i@@13!586!26 n@@8 s@@25 x@@40) (|Seq#Length| s@@25)) (= (|Seq#Index| s@@25 (i@@13!586!26 n@@8 s@@25 x@@40)) x@@40))) (or (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (forall ((i@@13 Int)) (! (not (and (<= 0 i@@13) (< i@@13 n@@8) (< i@@13 (|Seq#Length| s@@25)) (= (|Seq#Index| s@@25 i@@13) x@@40))) :pattern ((|Seq#Index| s@@25 i@@13)) :skolemid |586| :qid |DafnyPreludebpl.1011:13|))))) :pattern ((|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) :skolemid |587| :qid |DafnyPreludebpl.1008:18|)))
(assert (forall ((arg0@@100 T@U)(arg1@@42 Int)) (! (= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType (SeqTypeInv0 (type arg0@@100)))) :pattern ((|Seq#Drop| arg0@@100 arg1@@42)) :qid |funType:Seq#Drop|)))
(assert (forall ((x@@41 T@U)(s@@26 T@U)(n@@9 Int)) (! (or (not (= (type s@@26) (SeqType (type x@@41)))) (and (or (not (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) (and (<= 0 n@@9) (<= n@@9 (i@@14!588!27 n@@9 s@@26 x@@41)) (< (i@@14!588!27 n@@9 s@@26 x@@41) (|Seq#Length| s@@26)) (= (|Seq#Index| s@@26 (i@@14!588!27 n@@9 s@@26 x@@41)) x@@41))) (or (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (forall ((i@@14 Int)) (! (not (and (<= 0 n@@9) (<= n@@9 i@@14) (< i@@14 (|Seq#Length| s@@26)) (= (|Seq#Index| s@@26 i@@14) x@@41))) :pattern ((|Seq#Index| s@@26 i@@14)) :skolemid |588| :qid |DafnyPreludebpl.1016:13|))))) :pattern ((|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) :skolemid |589| :qid |DafnyPreludebpl.1013:18|)))
(assert (forall ((s0@@2 T@U)(s1@@2 T@U)) (! (or (not (and (= (type s0@@2) (SeqType (SeqTypeInv0 (type s0@@2)))) (= (type s1@@2) (SeqType (SeqTypeInv0 (type s0@@2)))))) (and (or (not (|Seq#Equal| s0@@2 s1@@2)) (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int)) (! (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j))) :pattern ((|Seq#Index| s0@@2 j)) :pattern ((|Seq#Index| s1@@2 j)) :skolemid |590| :qid |DafnyPreludebpl.1023:13|)))) (or (|Seq#Equal| s0@@2 s1@@2) (not (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2))) (not (=> (and (<= 0 (j!590!28 s1@@2 s0@@2)) (< (j!590!28 s1@@2 s0@@2) (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 (j!590!28 s1@@2 s0@@2)) (|Seq#Index| s1@@2 (j!590!28 s1@@2 s0@@2)))))))) :pattern ((|Seq#Equal| s0@@2 s1@@2)) :skolemid |591| :qid |DafnyPreludebpl.1020:18|)))
(assert (forall ((b@@51 T@U)(a@@67 T@U)) (! (=> (and (= (type a@@67) (SeqType (SeqTypeInv0 (type a@@67)))) (= (type b@@51) (SeqType (SeqTypeInv0 (type a@@67)))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51)) :pattern ((|Seq#Equal| a@@67 b@@51)) :skolemid |592| :qid |DafnyPreludebpl.1025:18|)))
(assert (forall ((n@@10 Int)(s0@@3 T@U)(s1@@3 T@U)) (! (or (not (and (= (type s0@@3) (SeqType (SeqTypeInv0 (type s0@@3)))) (= (type s1@@3) (SeqType (SeqTypeInv0 (type s0@@3)))))) (and (or (not (|Seq#SameUntil| s0@@3 s1@@3 n@@10)) (forall ((j@@0 Int)) (! (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :pattern ((|Seq#Index| s0@@3 j@@0)) :pattern ((|Seq#Index| s1@@3 j@@0)) :skolemid |593| :qid |DafnyPreludebpl.1031:13|))) (or (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (not (=> (and (<= 0 (j@@0!593!29 n@@10 s1@@3 s0@@3)) (< (j@@0!593!29 n@@10 s1@@3 s0@@3) n@@10)) (= (|Seq#Index| s0@@3 (j@@0!593!29 n@@10 s1@@3 s0@@3)) (|Seq#Index| s1@@3 (j@@0!593!29 n@@10 s1@@3 s0@@3)))))))) :pattern ((|Seq#SameUntil| s0@@3 s1@@3 n@@10)) :skolemid |594| :qid |DafnyPreludebpl.1029:18|)))
(assert (forall ((s@@27 T@U)(n@@11 Int)) (! (=> (= (type s@@27) (SeqType (SeqTypeInv0 (type s@@27)))) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11))) :pattern ((|Seq#Length| (|Seq#Take| s@@27 n@@11))) :skolemid |595| :qid |DafnyPreludebpl.1035:18|)))
(assert (forall ((s@@28 T@U)(n@@12 Int)(j@@1 Int)) (! (=> (= (type s@@28) (SeqType (SeqTypeInv0 (type s@@28)))) (=> (and (<= 0 j@@1) (< j@@1 n@@12) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1)))) :pattern ((|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1)) :pattern ((|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12)) :weight 25 :skolemid |596| :qid |DafnyPreludebpl.1037:18|)))
(assert (forall ((s@@29 T@U)(n@@13 Int)) (! (=> (= (type s@@29) (SeqType (SeqTypeInv0 (type s@@29)))) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13)))) :pattern ((|Seq#Length| (|Seq#Drop| s@@29 n@@13))) :skolemid |597| :qid |DafnyPreludebpl.1045:18|)))
(assert (forall ((j@@2 Int)(s@@30 T@U)(n@@14 Int)) (! (=> (= (type s@@30) (SeqType (SeqTypeInv0 (type s@@30)))) (=> (and (<= 0 n@@14) (<= 0 j@@2) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14))))) :pattern ((|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2)) :weight 25 :skolemid |598| :qid |DafnyPreludebpl.1047:18|)))
(assert (forall ((n@@15 Int)(k@@3 Int)(s@@31 T@U)) (! (=> (= (type s@@31) (SeqType (SeqTypeInv0 (type s@@31)))) (=> (and (<= 0 n@@15) (<= n@@15 k@@3) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3)))) :pattern ((|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) :weight 25 :skolemid |599| :qid |DafnyPreludebpl.1052:18|)))
(assert (forall ((t@@26 T@U)(n@@16 Int)(s@@32 T@U)) (! (=> (and (= (type s@@32) (SeqType (SeqTypeInv0 (type s@@32)))) (= (type t@@26) (SeqType (SeqTypeInv0 (type s@@32)))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26))) :pattern ((|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16)) :pattern ((|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16)) :skolemid |600| :qid |DafnyPreludebpl.1058:18|)))
(assert (forall ((arg0@@101 T@U)(arg1@@43 T@U)) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType)) :pattern ((|Seq#FromArray| arg0@@101 arg1@@43)) :qid |funType:Seq#FromArray|)))
(assert (forall ((a@@68 T@U)(h@@17 T@U)) (! (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68))) :pattern ((|Seq#Length| (|Seq#FromArray| h@@17 a@@68))) :skolemid |601| :qid |DafnyPreludebpl.1067:15|)))
(assert (forall ((h@@18 T@U)(a@@69 T@U)) (! (or (not (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType))) (forall ((i@@15 Int)) (! (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))) :pattern ((MapType1Select (MapType0Select h@@18 a@@69)
                                               (IndexField i@@15))) :pattern ((|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15)) :skolemid |602| :qid |DafnyPreludebpl.1072:11|))) :pattern ((|Seq#FromArray| h@@18 a@@69)) :skolemid |603| :qid |DafnyPreludebpl.1070:15|)))
(assert (forall ((h0 T@U)(h1 T@U)(a@@70 T@U)) (! (=> (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type)) (= (type a@@70) refType)) (=> (and ($IsGoodHeap h0) ($IsGoodHeap h1) ($HeapSucc h0 h1) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :pattern ((|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) :skolemid |604| :qid |DafnyPreludebpl.1082:15|)))
(assert (forall ((h@@19 T@U)(i@@16 Int)(v@@36 T@U)(a@@71 T@U)) (! (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType) (= (type a@@71) refType) (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36))) :pattern ((|Seq#FromArray| (MapType0Store h@@19
                                               a@@71
                                               (MapType1Store (MapType0Select h@@19
                                                                              a@@71)
                                                              (IndexField i@@16)
                                                              v@@36))
                                a@@71)) :skolemid |605| :qid |DafnyPreludebpl.1087:15|)))
(assert (forall ((i@@17 Int)(v@@37 T@U)(n@@17 Int)(s@@33 T@U)) (! (=> (= (type s@@33) (SeqType (type v@@37))) (=> (and (<= 0 i@@17) (< i@@17 n@@17) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37)))) :pattern ((|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17)) :skolemid |606| :qid |DafnyPreludebpl.1092:18|)))
(assert (forall ((n@@18 Int)(s@@34 T@U)(i@@18 Int)(v@@38 T@U)) (! (=> (= (type s@@34) (SeqType (type v@@38))) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18)))) :pattern ((|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18)) :skolemid |607| :qid |DafnyPreludebpl.1095:18|)))
(assert (forall ((s@@35 T@U)(i@@19 Int)(v@@39 T@U)(n@@19 Int)) (! (=> (= (type s@@35) (SeqType (type v@@39))) (=> (and (<= 0 n@@19) (<= n@@19 i@@19) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39)))) :pattern ((|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19)) :skolemid |608| :qid |DafnyPreludebpl.1098:18|)))
(assert (forall ((i@@20 Int)(v@@40 T@U)(n@@20 Int)(s@@36 T@U)) (! (=> (= (type s@@36) (SeqType (type v@@40))) (=> (and (<= 0 i@@20) (< i@@20 n@@20) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20)))) :pattern ((|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20)) :skolemid |609| :qid |DafnyPreludebpl.1101:18|)))
(assert (forall ((n0 Int)(n1 Int)(h@@20 T@U)(a@@72 T@U)) (! (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (= (+ n0 1) n1) (<= 0 n0) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0)))))) :pattern ((|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0)
               (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1)) :skolemid |610| :qid |DafnyPreludebpl.1105:15|)))
(assert (forall ((v@@41 T@U)(n@@21 Int)(s@@37 T@U)) (! (=> (= (type s@@37) (SeqType (type v@@41))) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41)))) :pattern ((|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21)) :skolemid |611| :qid |DafnyPreludebpl.1109:18|)))
(assert (forall ((s@@38 T@U)(i@@21 Int)) (! (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38)))) :pattern ((DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21)))) :skolemid |612| :qid |DafnyPreludebpl.1114:15|)))
(assert (forall ((s@@39 T@U)(i@@22 Int)) (! (=> (= (type s@@39) (SeqType (SeqTypeInv0 (type s@@39)))) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39)))) :pattern ((|Seq#Rank| (|Seq#Drop| s@@39 i@@22))) :skolemid |613| :qid |DafnyPreludebpl.1117:18|)))
(assert (forall ((s@@40 T@U)(i@@23 Int)) (! (=> (= (type s@@40) (SeqType (SeqTypeInv0 (type s@@40)))) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40)))) :pattern ((|Seq#Rank| (|Seq#Take| s@@40 i@@23))) :skolemid |614| :qid |DafnyPreludebpl.1120:18|)))
(assert (forall ((s@@41 T@U)(i@@24 Int)(j@@3 Int)) (! (=> (= (type s@@41) (SeqType (SeqTypeInv0 (type s@@41)))) (=> (and (<= 0 i@@24) (< i@@24 j@@3) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41)))) :pattern ((|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24)
                                         (|Seq#Drop| s@@41 j@@3)))) :skolemid |615| :qid |DafnyPreludebpl.1123:18|)))
(assert (forall ((s@@42 T@U)(n@@22 Int)) (! (=> (and (= (type s@@42) (SeqType (SeqTypeInv0 (type s@@42)))) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42)) :pattern ((|Seq#Drop| s@@42 n@@22)) :skolemid |616| :qid |DafnyPreludebpl.1128:18|)))
(assert (forall ((s@@43 T@U)(n@@23 Int)) (! (=> (and (= (type s@@43) (SeqType (SeqTypeInv0 (type s@@43)))) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| (SeqTypeInv0 (type s@@43))))) :pattern ((|Seq#Take| s@@43 n@@23)) :skolemid |617| :qid |DafnyPreludebpl.1130:18|)))
(assert (forall ((s@@44 T@U)(m@@9 Int)(n@@24 Int)) (! (=> (= (type s@@44) (SeqType (SeqTypeInv0 (type s@@44)))) (=> (and (<= 0 m@@9) (<= 0 n@@24) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24))))) :pattern ((|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) :skolemid |618| :qid |DafnyPreludebpl.1132:18|)))
(assert (forall ((m@@10 T@U)) (! (=> (= (type m@@10) (MapType (MapTypeInv0 (type m@@10)) (MapTypeInv1 (type m@@10)))) (<= 0 (|Map#Card| m@@10))) :pattern ((|Map#Card| m@@10)) :skolemid |619| :qid |DafnyPreludebpl.1150:20|)))
(assert (forall ((U@@4 T@T)(V@@4 T@T)) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4)) :pattern ((|Map#Empty| U@@4 V@@4)) :qid |funType:Map#Empty|)))
(assert (forall ((m@@11 T@U)) (! (=> (= (type m@@11) (MapType (MapTypeInv0 (type m@@11)) (MapTypeInv1 (type m@@11)))) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| (MapTypeInv0 (type m@@11)) (MapTypeInv1 (type m@@11)))))) :pattern ((|Map#Card| m@@11)) :skolemid |620| :qid |DafnyPreludebpl.1152:21|)))
(assert (forall ((m@@12 T@U)) (! (or (not (= (type m@@12) (MapType (MapTypeInv0 (type m@@12)) (MapTypeInv1 (type m@@12))))) (= m@@12 (|Map#Empty| (MapTypeInv0 (type m@@12)) (MapTypeInv1 (type m@@12)))) (and (= (type (k@@4!621!30 m@@12)) (MapTypeInv0 (type m@@12))) (U_2_bool (MapType0Select (|Map#Domain| m@@12) (k@@4!621!30 m@@12))))) :pattern ((|Map#Domain| m@@12)) :skolemid |622| :qid |DafnyPreludebpl.1156:21|)))
(assert (forall ((m@@13 T@U)) (! (or (not (= (type m@@13) (MapType (MapTypeInv0 (type m@@13)) (MapTypeInv1 (type m@@13))))) (= m@@13 (|Map#Empty| (MapTypeInv0 (type m@@13)) (MapTypeInv1 (type m@@13)))) (and (= (type (v@@42!623!31 m@@13)) (MapTypeInv1 (type m@@13))) (U_2_bool (MapType0Select (|Map#Values| m@@13) (v@@42!623!31 m@@13))))) :pattern ((|Map#Values| m@@13)) :skolemid |624| :qid |DafnyPreludebpl.1159:21|)))
(assert (forall ((arg0@@102 T@U)(arg1@@44 T@U)) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType) :pattern ((|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) :qid |funType:#_System._tuple#2._#Make2|)))
(assert (forall ((m@@14 T@U)) (! (or (not (= (type m@@14) (MapType (MapTypeInv0 (type m@@14)) (MapTypeInv1 (type m@@14))))) (= m@@14 (|Map#Empty| (MapTypeInv0 (type m@@14)) (MapTypeInv1 (type m@@14)))) (and (= (type (k@@5!625!33 m@@14)) BoxType) (= (type (v@@43!625!32 m@@14)) BoxType) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| (k@@5!625!33 m@@14) (v@@43!625!32 m@@14))))))) :pattern ((|Map#Items| m@@14)) :skolemid |626| :qid |DafnyPreludebpl.1162:21|)))
(assert (forall ((m@@15 T@U)) (! (=> (= (type m@@15) (MapType (MapTypeInv0 (type m@@15)) (MapTypeInv1 (type m@@15)))) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15))) :pattern ((|Set#Card| (|Map#Domain| m@@15))) :skolemid |627| :qid |DafnyPreludebpl.1166:21|)))
(assert (forall ((m@@16 T@U)) (! (=> (= (type m@@16) (MapType (MapTypeInv0 (type m@@16)) (MapTypeInv1 (type m@@16)))) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16))) :pattern ((|Set#Card| (|Map#Values| m@@16))) :skolemid |628| :qid |DafnyPreludebpl.1169:21|)))
(assert (forall ((m@@17 T@U)) (! (=> (= (type m@@17) (MapType (MapTypeInv0 (type m@@17)) (MapTypeInv1 (type m@@17)))) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17))) :pattern ((|Set#Card| (|Map#Items| m@@17))) :skolemid |629| :qid |DafnyPreludebpl.1172:21|)))
(assert (forall ((v@@44 T@U)(m@@18 T@U)) (! (or (not (= (type m@@18) (MapType (MapTypeInv0 (type m@@18)) (type v@@44)))) (and (or (not (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44))) (and (= (type (u@@5!630!34 m@@18 v@@44)) (MapTypeInv0 (type m@@18))) (U_2_bool (MapType0Select (|Map#Domain| m@@18) (u@@5!630!34 m@@18 v@@44))) (= v@@44 (MapType0Select (|Map#Elements| m@@18) (u@@5!630!34 m@@18 v@@44))))) (or (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (forall ((u@@5 T@U)) (! (not (and (= (type u@@5) (MapTypeInv0 (type m@@18))) (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5)))) :pattern ((MapType0Select (|Map#Domain| m@@18) u@@5)) :pattern ((MapType0Select (|Map#Elements| m@@18) u@@5)) :skolemid |630| :qid |DafnyPreludebpl.1185:10|))))) :pattern ((MapType0Select (|Map#Values| m@@18) v@@44)) :skolemid |631| :qid |DafnyPreludebpl.1183:20|)))
(assert (forall ((arg0@@103 T@U)) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType) :pattern ((_System.Tuple2._0 arg0@@103)) :qid |funType:_System.Tuple2._0|)))
(assert (forall ((arg0@@104 T@U)) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType) :pattern ((_System.Tuple2._1 arg0@@104)) :qid |funType:_System.Tuple2._1|)))
(assert (forall ((m@@19 T@U)(item T@U)) (! (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))) :pattern ((MapType0Select (|Map#Items| m@@19) item)) :skolemid |632| :qid |DafnyPreludebpl.1204:15|)))
(assert (forall ((u@@6 T@U)(V@@13 T@T)) (! (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| (type u@@6) V@@13)) u@@6))) :pattern ((MapType0Select (|Map#Domain| (|Map#Empty| (type u@@6) V@@13))
                               u@@6)) :skolemid |633| :qid |DafnyPreludebpl.1212:21|)))
(assert (forall ((arg0@@105 T@U)(arg1@@45 T@U)(arg2@@4 T@U)) (! (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType (MapType0TypeInv0 (type arg0@@105)) (MapType0TypeInv1 (type arg1@@45)))) :pattern ((|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) :qid |funType:Map#Glue|)))
(assert (forall ((b@@52 T@U)(t@@27 T@U)(a@@73 T@U)) (! (=> (and (= (type a@@73) (MapType0Type (MapType0TypeInv0 (type a@@73)) boolType)) (= (type b@@52) (MapType0Type (MapType0TypeInv0 (type a@@73)) (MapType0TypeInv1 (type b@@52)))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73)) :pattern ((|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))) :skolemid |634| :qid |DafnyPreludebpl.1217:21|)))
(assert (forall ((a@@74 T@U)(b@@53 T@U)(t@@28 T@U)) (! (=> (and (= (type a@@74) (MapType0Type (MapType0TypeInv0 (type a@@74)) boolType)) (= (type b@@53) (MapType0Type (MapType0TypeInv0 (type a@@74)) (MapType0TypeInv1 (type b@@53)))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53)) :pattern ((|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28))) :skolemid |635| :qid |DafnyPreludebpl.1220:21|)))
(assert (forall ((b@@54 T@U)(t0@@14 T@U)(t1@@5 T@U)(a@@75 T@U)) (! (or (not (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType)) (= (type t0@@14) TyType) (= (type t1@@5) TyType))) (not (=> (and (= (type (bx@@24!636!35 a@@75 t1@@5 t0@@14 b@@54)) BoxType) (U_2_bool (MapType0Select a@@75 (bx@@24!636!35 a@@75 t1@@5 t0@@14 b@@54)))) (and ($IsBox (bx@@24!636!35 a@@75 t1@@5 t0@@14 b@@54) t0@@14) ($IsBox (MapType0Select b@@54 (bx@@24!636!35 a@@75 t1@@5 t0@@14 b@@54)) t1@@5)))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5))) :pattern ((|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5))) :skolemid |637| :qid |DafnyPreludebpl.1223:15|)))
(assert (forall ((arg0@@106 T@U)(arg1@@46 T@U)(arg2@@5 T@U)) (! (= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType (type arg1@@46) (type arg2@@5))) :pattern ((|Map#Build| arg0@@106 arg1@@46 arg2@@5)) :qid |funType:Map#Build|)))
(assert (forall ((v@@45 T@U)(m@@20 T@U)(u@@7 T@U)(|u'| T@U)) (! (=> (and (= (type m@@20) (MapType (type u@@7) (type v@@45))) (= (type |u'|) (type u@@7))) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|)))))) :pattern ((MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45))
                               |u'|)) :pattern ((MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45))
                               |u'|)) :skolemid |638| :qid |DafnyPreludebpl.1237:21|)))
(assert (forall ((v@@46 T@U)(m@@21 T@U)(u@@8 T@U)) (! (=> (and (= (type m@@21) (MapType (type u@@8) (type v@@46))) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21))) :pattern ((|Map#Card| (|Map#Build| m@@21 u@@8 v@@46))) :skolemid |639| :qid |DafnyPreludebpl.1243:21|)))
(assert (forall ((m@@22 T@U)(u@@9 T@U)(v@@47 T@U)) (! (=> (and (= (type m@@22) (MapType (type u@@9) (type v@@47))) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1))) :pattern ((|Map#Card| (|Map#Build| m@@22 u@@9 v@@47))) :skolemid |640| :qid |DafnyPreludebpl.1245:21|)))
(assert (forall ((arg0@@107 T@U)(arg1@@47 T@U)) (! (= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType (MapTypeInv0 (type arg0@@107)) (MapTypeInv1 (type arg0@@107)))) :pattern ((|Map#Merge| arg0@@107 arg1@@47)) :qid |funType:Map#Merge|)))
(assert (forall ((m@@23 T@U)(n@@25 T@U)) (! (=> (and (= (type m@@23) (MapType (MapTypeInv0 (type m@@23)) (MapTypeInv1 (type m@@23)))) (= (type n@@25) (MapType (MapTypeInv0 (type m@@23)) (MapTypeInv1 (type m@@23))))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25)))) :pattern ((|Map#Domain| (|Map#Merge| m@@23 n@@25))) :skolemid |641| :qid |DafnyPreludebpl.1250:21|)))
(assert (forall ((m@@24 T@U)(n@@26 T@U)(u@@10 T@U)) (! (=> (and (= (type m@@24) (MapType (type u@@10) (MapTypeInv1 (type m@@24)))) (= (type n@@26) (MapType (type u@@10) (MapTypeInv1 (type m@@24)))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10))))) :pattern ((MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10)) :skolemid |642| :qid |DafnyPreludebpl.1253:21|)))
(assert (forall ((arg0@@108 T@U)(arg1@@48 T@U)) (! (= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType (MapTypeInv0 (type arg0@@108)) (MapTypeInv1 (type arg0@@108)))) :pattern ((|Map#Subtract| arg0@@108 arg1@@48)) :qid |funType:Map#Subtract|)))
(assert (forall ((m@@25 T@U)(s@@45 T@U)) (! (=> (and (= (type m@@25) (MapType (MapTypeInv0 (type m@@25)) (MapTypeInv1 (type m@@25)))) (= (type s@@45) (MapType0Type (MapTypeInv0 (type m@@25)) boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45))) :pattern ((|Map#Domain| (|Map#Subtract| m@@25 s@@45))) :skolemid |643| :qid |DafnyPreludebpl.1260:21|)))
(assert (forall ((u@@11 T@U)(m@@26 T@U)(s@@46 T@U)) (! (=> (and (= (type m@@26) (MapType (type u@@11) (MapTypeInv1 (type m@@26)))) (= (type s@@46) (MapType0Type (type u@@11) boolType)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11))) :pattern ((MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46))
                               u@@11)) :skolemid |644| :qid |DafnyPreludebpl.1263:21|)))
(assert (forall ((m@@27 T@U)(|m'| T@U)) (! (or (not (and (= (type m@@27) (MapType (MapTypeInv0 (type m@@27)) (MapTypeInv1 (type m@@27)))) (= (type |m'|) (MapType (MapTypeInv0 (type m@@27)) (MapTypeInv1 (type m@@27)))))) (and (or (not (|Map#Equal| m@@27 |m'|)) (and (forall ((u@@12 T@U)) (! (=> (= (type u@@12) (MapTypeInv0 (type m@@27))) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)))) :no-pattern (U_2_bool u@@12) :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :skolemid |645| :qid |DafnyPreludebpl.1272:35|)) (forall ((u@@13 T@U)) (! (=> (and (= (type u@@13) (MapTypeInv0 (type m@@27))) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :no-pattern (U_2_bool u@@13) :no-pattern (U_2_int u@@13) :no-pattern (type u@@13) :skolemid |646| :qid |DafnyPreludebpl.1273:35|)))) (or (|Map#Equal| m@@27 |m'|) (not (=> (= (type (u@@12!645!36 |m'| m@@27)) (MapTypeInv0 (type m@@27))) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) (u@@12!645!36 |m'| m@@27))) (U_2_bool (MapType0Select (|Map#Domain| |m'|) (u@@12!645!36 |m'| m@@27)))))) (not (=> (and (= (type (u@@13!646!37 |m'| m@@27)) (MapTypeInv0 (type m@@27))) (U_2_bool (MapType0Select (|Map#Domain| m@@27) (u@@13!646!37 |m'| m@@27)))) (= (MapType0Select (|Map#Elements| m@@27) (u@@13!646!37 |m'| m@@27)) (MapType0Select (|Map#Elements| |m'|) (u@@13!646!37 |m'| m@@27)))))))) :pattern ((|Map#Equal| m@@27 |m'|)) :skolemid |647| :qid |DafnyPreludebpl.1270:21|)))
(assert (forall ((m@@28 T@U)(|m'@@0| T@U)) (! (=> (and (= (type m@@28) (MapType (MapTypeInv0 (type m@@28)) (MapTypeInv1 (type m@@28)))) (= (type |m'@@0|) (MapType (MapTypeInv0 (type m@@28)) (MapTypeInv1 (type m@@28)))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|)) :pattern ((|Map#Equal| m@@28 |m'@@0|)) :skolemid |648| :qid |DafnyPreludebpl.1275:21|)))
(assert (forall ((m@@29 T@U)(|m'@@1| T@U)) (! (or (not (and (= (type m@@29) (MapType (MapTypeInv0 (type m@@29)) (MapTypeInv1 (type m@@29)))) (= (type |m'@@1|) (MapType (MapTypeInv0 (type m@@29)) (MapTypeInv1 (type m@@29)))))) (and (or (not (|Map#Disjoint| m@@29 |m'@@1|)) (forall ((o@@43 T@U)) (! (=> (= (type o@@43) (MapTypeInv0 (type m@@29))) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43))))) :pattern ((MapType0Select (|Map#Domain| |m'@@1|) o@@43)) :pattern ((MapType0Select (|Map#Domain| m@@29) o@@43)) :skolemid |649| :qid |DafnyPreludebpl.1282:38|))) (or (|Map#Disjoint| m@@29 |m'@@1|) (not (=> (= (type (o@@43!649!38 |m'@@1| m@@29)) (MapTypeInv0 (type m@@29))) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) (o@@43!649!38 |m'@@1| m@@29)))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) (o@@43!649!38 |m'@@1| m@@29)))))))))) :pattern ((|Map#Disjoint| m@@29 |m'@@1|)) :skolemid |650| :qid |DafnyPreludebpl.1280:21|)))
(assert (forall ((U@@30 T@T)(V@@30 T@T)) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30)) :pattern ((|IMap#Empty| U@@30 V@@30)) :qid |funType:IMap#Empty|)))
(assert (forall ((m@@30 T@U)) (! (or (not (= (type m@@30) (IMapType (IMapTypeInv0 (type m@@30)) (IMapTypeInv1 (type m@@30))))) (= m@@30 (|IMap#Empty| (IMapTypeInv0 (type m@@30)) (IMapTypeInv1 (type m@@30)))) (and (= (type (k@@6!651!39 m@@30)) (IMapTypeInv0 (type m@@30))) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) (k@@6!651!39 m@@30))))) :pattern ((|IMap#Domain| m@@30)) :skolemid |652| :qid |DafnyPreludebpl.1296:21|)))
(assert (forall ((m@@31 T@U)) (! (or (not (= (type m@@31) (IMapType (IMapTypeInv0 (type m@@31)) (IMapTypeInv1 (type m@@31))))) (= m@@31 (|IMap#Empty| (IMapTypeInv0 (type m@@31)) (IMapTypeInv1 (type m@@31)))) (and (= (type (v@@48!653!40 m@@31)) (IMapTypeInv1 (type m@@31))) (U_2_bool (MapType0Select (|IMap#Values| m@@31) (v@@48!653!40 m@@31))))) :pattern ((|IMap#Values| m@@31)) :skolemid |654| :qid |DafnyPreludebpl.1299:21|)))
(assert (forall ((m@@32 T@U)) (! (or (not (= (type m@@32) (IMapType (IMapTypeInv0 (type m@@32)) (IMapTypeInv1 (type m@@32))))) (= m@@32 (|IMap#Empty| (IMapTypeInv0 (type m@@32)) (IMapTypeInv1 (type m@@32)))) (and (= (type (k@@7!655!42 m@@32)) BoxType) (= (type (v@@49!655!41 m@@32)) BoxType) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| (k@@7!655!42 m@@32) (v@@49!655!41 m@@32))))))) :pattern ((|IMap#Items| m@@32)) :skolemid |656| :qid |DafnyPreludebpl.1302:21|)))
(assert (forall ((m@@33 T@U)) (! (=> (= (type m@@33) (IMapType (IMapTypeInv0 (type m@@33)) (IMapTypeInv1 (type m@@33)))) (= (= m@@33 (|IMap#Empty| (IMapTypeInv0 (type m@@33)) (IMapTypeInv1 (type m@@33)))) (= (|IMap#Domain| m@@33) (|ISet#Empty| (IMapTypeInv0 (type m@@33)))))) :pattern ((|IMap#Domain| m@@33)) :skolemid |657| :qid |DafnyPreludebpl.1306:21|)))
(assert (forall ((m@@34 T@U)) (! (=> (= (type m@@34) (IMapType (IMapTypeInv0 (type m@@34)) (IMapTypeInv1 (type m@@34)))) (= (= m@@34 (|IMap#Empty| (IMapTypeInv0 (type m@@34)) (IMapTypeInv1 (type m@@34)))) (= (|IMap#Values| m@@34) (|ISet#Empty| (IMapTypeInv1 (type m@@34)))))) :pattern ((|IMap#Values| m@@34)) :skolemid |658| :qid |DafnyPreludebpl.1309:21|)))
(assert (forall ((m@@35 T@U)) (! (=> (= (type m@@35) (IMapType (IMapTypeInv0 (type m@@35)) (IMapTypeInv1 (type m@@35)))) (= (= m@@35 (|IMap#Empty| (IMapTypeInv0 (type m@@35)) (IMapTypeInv1 (type m@@35)))) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType)))) :pattern ((|IMap#Items| m@@35)) :skolemid |659| :qid |DafnyPreludebpl.1312:21|)))
(assert (forall ((m@@36 T@U)(v@@50 T@U)) (! (or (not (= (type m@@36) (IMapType (IMapTypeInv0 (type m@@36)) (type v@@50)))) (and (or (not (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50))) (and (= (type (u@@14!660!43 v@@50 m@@36)) (IMapTypeInv0 (type m@@36))) (U_2_bool (MapType0Select (|IMap#Domain| m@@36) (u@@14!660!43 v@@50 m@@36))) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) (u@@14!660!43 v@@50 m@@36))))) (or (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (forall ((u@@14 T@U)) (! (not (and (= (type u@@14) (IMapTypeInv0 (type m@@36))) (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14)))) :pattern ((MapType0Select (|IMap#Elements| m@@36)
                                                   u@@14)) :pattern ((MapType0Select (|IMap#Domain| m@@36) u@@14)) :skolemid |660| :qid |DafnyPreludebpl.1325:10|))))) :pattern ((MapType0Select (|IMap#Values| m@@36) v@@50)) :skolemid |661| :qid |DafnyPreludebpl.1323:20|)))
(assert (forall ((m@@37 T@U)(item@@0 T@U)) (! (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))) :pattern ((MapType0Select (|IMap#Items| m@@37) item@@0)) :skolemid |662| :qid |DafnyPreludebpl.1340:15|)))
(assert (forall ((u@@15 T@U)(V@@38 T@T)) (! (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| (type u@@15) V@@38)) u@@15))) :pattern ((MapType0Select (|IMap#Domain| (|IMap#Empty| (type u@@15) V@@38))
                               u@@15)) :skolemid |663| :qid |DafnyPreludebpl.1347:21|)))
(assert (forall ((arg0@@109 T@U)(arg1@@49 T@U)(arg2@@6 T@U)) (! (= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType (MapType0TypeInv0 (type arg0@@109)) (MapType0TypeInv1 (type arg1@@49)))) :pattern ((|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) :qid |funType:IMap#Glue|)))
(assert (forall ((a@@76 T@U)(b@@55 T@U)(t@@29 T@U)) (! (=> (and (= (type a@@76) (MapType0Type (MapType0TypeInv0 (type a@@76)) boolType)) (= (type b@@55) (MapType0Type (MapType0TypeInv0 (type a@@76)) (MapType0TypeInv1 (type b@@55)))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76)) :pattern ((|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29))) :skolemid |664| :qid |DafnyPreludebpl.1352:21|)))
(assert (forall ((a@@77 T@U)(b@@56 T@U)(t@@30 T@U)) (! (=> (and (= (type a@@77) (MapType0Type (MapType0TypeInv0 (type a@@77)) boolType)) (= (type b@@56) (MapType0Type (MapType0TypeInv0 (type a@@77)) (MapType0TypeInv1 (type b@@56)))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56)) :pattern ((|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30))) :skolemid |665| :qid |DafnyPreludebpl.1355:21|)))
(assert (forall ((t1@@6 T@U)(a@@78 T@U)(b@@57 T@U)(t0@@15 T@U)) (! (or (not (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType)) (= (type t0@@15) TyType) (= (type t1@@6) TyType))) (not (=> (and (= (type (bx@@25!666!44 t0@@15 b@@57 a@@78 t1@@6)) BoxType) (U_2_bool (MapType0Select a@@78 (bx@@25!666!44 t0@@15 b@@57 a@@78 t1@@6)))) (and ($IsBox (bx@@25!666!44 t0@@15 b@@57 a@@78 t1@@6) t0@@15) ($IsBox (MapType0Select b@@57 (bx@@25!666!44 t0@@15 b@@57 a@@78 t1@@6)) t1@@6)))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6))) :pattern ((|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6))) :skolemid |667| :qid |DafnyPreludebpl.1358:15|)))
(assert (forall ((arg2@@7 T@U)(arg0@@110 T@U)(arg1@@50 T@U)) (! (= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType (type arg1@@50) (type arg2@@7))) :pattern ((|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) :qid |funType:IMap#Build|)))
(assert (forall ((m@@38 T@U)(u@@16 T@U)(|u'@@0| T@U)(v@@51 T@U)) (! (=> (and (= (type m@@38) (IMapType (type u@@16) (type v@@51))) (= (type |u'@@0|) (type u@@16))) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|)))))) :pattern ((MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51))
                               |u'@@0|)) :pattern ((MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51))
                               |u'@@0|)) :skolemid |668| :qid |DafnyPreludebpl.1371:21|)))
(assert (forall ((|m'@@2| T@U)(m@@39 T@U)) (! (or (not (and (= (type m@@39) (IMapType (IMapTypeInv0 (type m@@39)) (IMapTypeInv1 (type m@@39)))) (= (type |m'@@2|) (IMapType (IMapTypeInv0 (type m@@39)) (IMapTypeInv1 (type m@@39)))))) (and (or (not (|IMap#Equal| m@@39 |m'@@2|)) (and (forall ((u@@17 T@U)) (! (=> (= (type u@@17) (IMapTypeInv0 (type m@@39))) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17)))) :no-pattern (U_2_bool u@@17) :no-pattern (U_2_int u@@17) :no-pattern (type u@@17) :skolemid |669| :qid |DafnyPreludebpl.1382:36|)) (forall ((u@@18 T@U)) (! (=> (and (= (type u@@18) (IMapTypeInv0 (type m@@39))) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18))) :no-pattern (type u@@18) :no-pattern (U_2_int u@@18) :no-pattern (U_2_bool u@@18) :skolemid |670| :qid |DafnyPreludebpl.1383:35|)))) (or (|IMap#Equal| m@@39 |m'@@2|) (not (=> (= (type (u@@17!669!45 |m'@@2| m@@39)) (IMapTypeInv0 (type m@@39))) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) (u@@17!669!45 |m'@@2| m@@39))) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) (u@@17!669!45 |m'@@2| m@@39)))))) (not (=> (and (= (type (u@@18!670!46 |m'@@2| m@@39)) (IMapTypeInv0 (type m@@39))) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) (u@@18!670!46 |m'@@2| m@@39)))) (= (MapType0Select (|IMap#Elements| m@@39) (u@@18!670!46 |m'@@2| m@@39)) (MapType0Select (|IMap#Elements| |m'@@2|) (u@@18!670!46 |m'@@2| m@@39)))))))) :pattern ((|IMap#Equal| m@@39 |m'@@2|)) :skolemid |671| :qid |DafnyPreludebpl.1380:21|)))
(assert (forall ((m@@40 T@U)(|m'@@3| T@U)) (! (=> (and (= (type m@@40) (IMapType (IMapTypeInv0 (type m@@40)) (IMapTypeInv1 (type m@@40)))) (= (type |m'@@3|) (IMapType (IMapTypeInv0 (type m@@40)) (IMapTypeInv1 (type m@@40)))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|)) :pattern ((|IMap#Equal| m@@40 |m'@@3|)) :skolemid |672| :qid |DafnyPreludebpl.1385:21|)))
(assert (forall ((arg0@@111 T@U)(arg1@@51 T@U)) (! (= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType (IMapTypeInv0 (type arg0@@111)) (IMapTypeInv1 (type arg0@@111)))) :pattern ((|IMap#Merge| arg0@@111 arg1@@51)) :qid |funType:IMap#Merge|)))
(assert (forall ((m@@41 T@U)(n@@27 T@U)) (! (=> (and (= (type m@@41) (IMapType (IMapTypeInv0 (type m@@41)) (IMapTypeInv1 (type m@@41)))) (= (type n@@27) (IMapType (IMapTypeInv0 (type m@@41)) (IMapTypeInv1 (type m@@41))))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27)))) :pattern ((|IMap#Domain| (|IMap#Merge| m@@41 n@@27))) :skolemid |673| :qid |DafnyPreludebpl.1391:21|)))
(assert (forall ((u@@19 T@U)(m@@42 T@U)(n@@28 T@U)) (! (=> (and (= (type m@@42) (IMapType (type u@@19) (IMapTypeInv1 (type m@@42)))) (= (type n@@28) (IMapType (type u@@19) (IMapTypeInv1 (type m@@42)))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19))))) :pattern ((MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28))
                               u@@19)) :skolemid |674| :qid |DafnyPreludebpl.1394:21|)))
(assert (forall ((arg1@@52 T@U)(arg0@@112 T@U)) (! (= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType (IMapTypeInv0 (type arg0@@112)) (IMapTypeInv1 (type arg0@@112)))) :pattern ((|IMap#Subtract| arg0@@112 arg1@@52)) :qid |funType:IMap#Subtract|)))
(assert (forall ((m@@43 T@U)(s@@47 T@U)) (! (=> (and (= (type m@@43) (IMapType (IMapTypeInv0 (type m@@43)) (IMapTypeInv1 (type m@@43)))) (= (type s@@47) (MapType0Type (IMapTypeInv0 (type m@@43)) boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47))) :pattern ((|IMap#Domain| (|IMap#Subtract| m@@43 s@@47))) :skolemid |675| :qid |DafnyPreludebpl.1401:21|)))
(assert (forall ((u@@20 T@U)(m@@44 T@U)(s@@48 T@U)) (! (=> (and (= (type m@@44) (IMapType (type u@@20) (IMapTypeInv1 (type m@@44)))) (= (type s@@48) (MapType0Type (type u@@20) boolType)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20))) :pattern ((MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48))
                               u@@20)) :skolemid |676| :qid |DafnyPreludebpl.1404:21|)))
(assert (forall ((x@@42 Int)(y@@12 Int)) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12)) :pattern ((INTERNAL_add_boogie x@@42 y@@12)) :skolemid |677| :qid |DafnyPreludebpl.1413:30|)))
(assert (forall ((x@@43 Int)(y@@13 Int)) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :pattern ((INTERNAL_sub_boogie x@@43 y@@13)) :skolemid |678| :qid |DafnyPreludebpl.1414:30|)))
(assert (forall ((y@@14 Int)(x@@44 Int)) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14)) :pattern ((INTERNAL_mul_boogie x@@44 y@@14)) :skolemid |679| :qid |DafnyPreludebpl.1415:30|)))
(assert (forall ((y@@15 Int)(x@@45 Int)) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15)) :pattern ((INTERNAL_div_boogie x@@45 y@@15)) :skolemid |680| :qid |DafnyPreludebpl.1416:30|)))
(assert (forall ((x@@46 Int)(y@@16 Int)) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16)) :pattern ((INTERNAL_mod_boogie x@@46 y@@16)) :skolemid |681| :qid |DafnyPreludebpl.1417:30|)))
(assert (forall ((x@@47 Int)(y@@17 Int)) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :pattern ((INTERNAL_lt_boogie x@@47 y@@17)) :skolemid |682| :qid |DafnyPreludebpl.1418:51|)))
(assert (forall ((y@@18 Int)(x@@48 Int)) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :pattern ((INTERNAL_le_boogie x@@48 y@@18)) :skolemid |683| :qid |DafnyPreludebpl.1419:51|)))
(assert (forall ((y@@19 Int)(x@@49 Int)) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (< y@@19 x@@49)) :pattern ((INTERNAL_gt_boogie x@@49 y@@19)) :skolemid |684| :qid |DafnyPreludebpl.1420:51|)))
(assert (forall ((x@@50 Int)(y@@20 Int)) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (<= y@@20 x@@50)) :pattern ((INTERNAL_ge_boogie x@@50 y@@20)) :skolemid |685| :qid |DafnyPreludebpl.1421:51|)))
(assert (forall ((x@@51 Int)(y@@21 Int)) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21)) :pattern ((Mul x@@51 y@@21)) :skolemid |686| :qid |DafnyPreludebpl.1423:14|)))
(assert (forall ((y@@22 Int)(x@@52 Int)) (! (= (Div x@@52 y@@22) (div x@@52 y@@22)) :pattern ((Div x@@52 y@@22)) :skolemid |687| :qid |DafnyPreludebpl.1424:14|)))
(assert (forall ((y@@23 Int)(x@@53 Int)) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23)) :pattern ((Mod x@@53 y@@23)) :skolemid |688| :qid |DafnyPreludebpl.1425:14|)))
(assert (forall ((x@@54 Int)(y@@24 Int)) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24)) :pattern ((Add x@@54 y@@24)) :skolemid |689| :qid |DafnyPreludebpl.1426:14|)))
(assert (forall ((x@@55 Int)(y@@25 Int)) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25)) :pattern ((Sub x@@55 y@@25)) :skolemid |690| :qid |DafnyPreludebpl.1427:14|)))
(assert (forall ((B T@U)(a@@79 T@U)(b@@58 T@U)(A@@2 T@U)) (! (=> (and (= (type A@@2) TyType) (= (type B) TyType) (= (type a@@79) BoxType) (= (type b@@58) BoxType) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :pattern ((_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)
               (BoxRank a@@79)) :pattern ((_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)
               (BoxRank b@@58)) :skolemid |691| :qid |DafnyPreludebpl.1468:15|)))
(assert (forall ((b@@59 T@U)(A@@3 T@U)(B@@0 T@U)(a@@80 T@U)) (! (=> (and (= (type A@@3) TyType) (= (type B@@0) TyType) (= (type a@@80) BoxType) (= (type b@@59) (SeqType BoxType)) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :pattern ((_System.__default.rank__is__less__than
                 A@@3
                 B@@0
                 a@@80
                 ($Box b@@59))
               (BoxRank a@@80)) :pattern ((_System.__default.rank__is__less__than
                 A@@3
                 B@@0
                 a@@80
                 ($Box b@@59))
               (|Seq#Rank| b@@59)) :skolemid |692| :qid |DafnyPreludebpl.1473:15|)))
(assert (forall ((A@@4 T@U)(B@@1 T@U)(a@@81 T@U)(b@@60 T@U)) (! (=> (and (= (type A@@4) TyType) (= (type B@@1) TyType) (= (type a@@81) (SeqType BoxType)) (= (type b@@60) BoxType) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :pattern ((_System.__default.rank__is__less__than
                 A@@4
                 B@@1
                 ($Box a@@81)
                 b@@60)
               (|Seq#Rank| a@@81)) :pattern ((_System.__default.rank__is__less__than
                 A@@4
                 B@@1
                 ($Box a@@81)
                 b@@60)
               (BoxRank b@@60)) :skolemid |693| :qid |DafnyPreludebpl.1478:15|)))
(assert (forall ((arg0@@113 T@U)) (! (= (type (TagFamily arg0@@113)) TyTagFamilyType) :pattern ((TagFamily arg0@@113)) :qid |funType:TagFamily|)))
(assert (forall ((bx@@26 T@U)) (! (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@26)) bx@@26) ($Is ($Unbox intType bx@@26) Tclass._System.nat))) :pattern (($IsBox bx@@26 Tclass._System.nat)) :skolemid |694| :qid |unknown.0:0!26|)))
(assert (forall ((|x#0| T@U)) (! (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (INTERNAL_le_boogie 0 (U_2_int |x#0|)))) :pattern (($Is |x#0| Tclass._System.nat)) :skolemid |695| :qid |unknown.0:0!29|)))
(assert (forall ((|x#0@@0| T@U)($h T@U)) (! (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :pattern (($IsAlloc |x#0@@0| Tclass._System.nat $h)) :skolemid |696| :qid |unknown.0:0!31|)))
(assert (forall ((bx@@27 T@U)) (! (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@27)) bx@@27) ($Is ($Unbox refType bx@@27) Tclass._System.object?))) :pattern (($IsBox bx@@27 Tclass._System.object?)) :skolemid |697| :qid |unknown.0:0!34|)))
(assert (forall (($o T@U)) (! (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :pattern (($Is $o Tclass._System.object?)) :skolemid |698| :qid |unknown.0:0!37|)))
(assert (forall (($o@@0 T@U)($h@@0 T@U)) (! (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))))) :pattern (($IsAlloc $o@@0 Tclass._System.object? $h@@0)) :skolemid |699| :qid |unknown.0:0!41|)))
(assert (forall ((bx@@28 T@U)) (! (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object))) :pattern (($IsBox bx@@28 Tclass._System.object)) :skolemid |700| :qid |unknown.0:0!44|)))
(assert (forall ((|c#0| T@U)) (! (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))))) :pattern (($Is |c#0| Tclass._System.object)) :skolemid |701| :qid |unknown.0:0!49|)))
(assert (forall ((|c#0@@0| T@U)($h@@1 T@U)) (! (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1))) :pattern (($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) :skolemid |702| :qid |unknown.0:0!52|)))
(assert (forall ((arg0@@114 T@U)) (! (= (type (Tclass._System.array? arg0@@114)) TyType) :pattern ((Tclass._System.array? arg0@@114)) :qid |funType:Tclass._System.array?|)))
(assert (forall ((_System.array$arg T@U)) (! (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array))) :pattern ((Tclass._System.array? _System.array$arg)) :skolemid |703| :qid |unknown.0:0!56|)))
(assert (forall ((arg0@@115 T@U)) (! (= (type (Tclass._System.array?_0 arg0@@115)) TyType) :pattern ((Tclass._System.array?_0 arg0@@115)) :qid |funType:Tclass._System.array?_0|)))
(assert (forall ((_System.array$arg@@0 T@U)) (! (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0)) :pattern ((Tclass._System.array? _System.array$arg@@0)) :skolemid |704| :qid |unknown.0:0!60|)))
(assert (forall ((_System.array$arg@@1 T@U)(bx@@29 T@U)) (! (=> (and (= (type _System.array$arg@@1) TyType) (= (type bx@@29) BoxType) ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) (Tclass._System.array? _System.array$arg@@1)))) :pattern (($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) :skolemid |705| :qid |unknown.0:0!66|)))
(assert (forall ((arg0@@116 T@U)) (! (= (type (dtype arg0@@116)) TyType) :pattern ((dtype arg0@@116)) :qid |funType:dtype|)))
(assert (forall ((_System.array$arg@@2 T@U)($h@@2 T@U)($o@@1 T@U)($i0 Int)) (! (=> (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type)) (= (type $o@@1) refType) ($IsGoodHeap $h@@2) (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)) (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2)) :pattern ((MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0))
               (Tclass._System.array? _System.array$arg@@2)) :skolemid |706| :qid |unknown.0:0!74|)))
(assert (forall ((_System.array$arg@@3 T@U)($h@@3 T@U)($o@@2 T@U)($i0@@0 Int)) (! (=> (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type)) (= (type $o@@2) refType)) (=> (and ($IsGoodHeap $h@@3) (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)) (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3))) :pattern ((MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0))
               (Tclass._System.array? _System.array$arg@@3)) :skolemid |707| :qid |unknown.0:0!81|)))
(assert (forall ((_System.array$arg@@4 T@U)($o@@3 T@U)) (! (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4))))) :pattern (($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))) :skolemid |708| :qid |unknown.0:0!86|)))
(assert (forall ((_System.array$arg@@5 T@U)($o@@4 T@U)($h@@4 T@U)) (! (=> (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))))) :pattern (($IsAlloc $o@@4
                         (Tclass._System.array? _System.array$arg@@5)
                         $h@@4)) :skolemid |709| :qid |unknown.0:0!91|)))
(assert (forall ((_System.array$arg@@6 T@U)($o@@5 T@U)) (! (=> (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType) (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :pattern ((_System.array.Length $o@@5)
               (Tclass._System.array? _System.array$arg@@6)) :skolemid |710| :qid |unknown.0:0!97|)))
(assert (forall (($o@@6 T@U)(_System.array$arg@@7 T@U)($h@@5 T@U)) (! (=> (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type)) (= (type $o@@6) refType) ($IsGoodHeap $h@@5) (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :pattern ((_System.array.Length $o@@6)
               (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)
               (Tclass._System.array? _System.array$arg@@7)) :skolemid |711| :qid |unknown.0:0!104|)))
(assert (forall ((arg0@@117 T@U)) (! (= (type (Tclass._System.array arg0@@117)) TyType) :pattern ((Tclass._System.array arg0@@117)) :qid |funType:Tclass._System.array|)))
(assert (forall ((_System.array$arg@@8 T@U)) (! (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array))) :pattern ((Tclass._System.array _System.array$arg@@8)) :skolemid |712| :qid |unknown.0:0!106|)))
(assert (forall ((arg0@@118 T@U)) (! (= (type (Tclass._System.array_0 arg0@@118)) TyType) :pattern ((Tclass._System.array_0 arg0@@118)) :qid |funType:Tclass._System.array_0|)))
(assert (forall ((_System.array$arg@@9 T@U)) (! (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9)) :pattern ((Tclass._System.array _System.array$arg@@9)) :skolemid |713| :qid |unknown.0:0!109|)))
(assert (forall ((_System.array$arg@@10 T@U)(bx@@30 T@U)) (! (=> (and (= (type _System.array$arg@@10) TyType) (= (type bx@@30) BoxType) ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array _System.array$arg@@10)))) :pattern (($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) :skolemid |714| :qid |unknown.0:0!113|)))
(assert (forall ((|c#0@@1| T@U)(_System.array$arg@@11 T@U)) (! (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null))))) :pattern (($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))) :skolemid |715| :qid |unknown.0:0!116|)))
(assert (forall ((_System.array$arg@@12 T@U)(|c#0@@2| T@U)($h@@6 T@U)) (! (=> (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6))) :pattern (($IsAlloc |c#0@@2|
                         (Tclass._System.array _System.array$arg@@12)
                         $h@@6)) :skolemid |716| :qid |unknown.0:0!119|)))
(assert (forall ((arg0@@119 T@U)(arg1@@53 T@U)) (! (= (type (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) TyType) :pattern ((Tclass._System.___hFunc1 arg0@@119 arg1@@53)) :qid |funType:Tclass._System.___hFunc1|)))
(assert (forall ((|#$T0| T@U)(|#$R| T@U)) (! (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|))) :pattern ((Tclass._System.___hFunc1 |#$T0| |#$R|)) :skolemid |717| :qid |unknown.0:0!122|)))
(assert (forall ((arg0@@120 T@U)) (! (= (type (Tclass._System.___hFunc1_0 arg0@@120)) TyType) :pattern ((Tclass._System.___hFunc1_0 arg0@@120)) :qid |funType:Tclass._System.___hFunc1_0|)))
(assert (forall ((|#$R@@0| T@U)(|#$T0@@0| T@U)) (! (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)) :pattern ((Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) :skolemid |718| :qid |unknown.0:0!125|)))
(assert (forall ((arg0@@121 T@U)) (! (= (type (Tclass._System.___hFunc1_1 arg0@@121)) TyType) :pattern ((Tclass._System.___hFunc1_1 arg0@@121)) :qid |funType:Tclass._System.___hFunc1_1|)))
(assert (forall ((|#$T0@@1| T@U)(|#$R@@1| T@U)) (! (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)) :pattern ((Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) :skolemid |719| :qid |unknown.0:0!128|)))
(assert (forall ((|#$T0@@2| T@U)(|#$R@@2| T@U)(bx@@31 T@U)) (! (=> (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType) (= (type bx@@31) BoxType) ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@31)) bx@@31) ($Is ($Unbox HandleTypeType bx@@31) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))) :pattern (($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) :skolemid |720| :qid |unknown.0:0!132|)))
(assert (forall ((arg0@@122 T@T)(arg1@@54 T@T)(arg2@@8 T@T)) (! (= (Ctor (MapType2Type arg0@@122 arg1@@54 arg2@@8)) 24) :qid |ctor:MapType2Type|)))
(assert (forall ((arg0@@123 T@T)(arg1@@55 T@T)(arg2@@9 T@T)) (! (= (MapType2TypeInv0 (MapType2Type arg0@@123 arg1@@55 arg2@@9)) arg0@@123) :pattern ((MapType2Type arg0@@123 arg1@@55 arg2@@9)) :qid |typeInv:MapType2TypeInv0|)))
(assert (forall ((arg1@@56 T@T)(arg2@@10 T@T)(arg0@@124 T@T)) (! (= (MapType2TypeInv1 (MapType2Type arg0@@124 arg1@@56 arg2@@10)) arg1@@56) :pattern ((MapType2Type arg0@@124 arg1@@56 arg2@@10)) :qid |typeInv:MapType2TypeInv1|)))
(assert (forall ((arg2@@11 T@T)(arg0@@125 T@T)(arg1@@57 T@T)) (! (= (MapType2TypeInv2 (MapType2Type arg0@@125 arg1@@57 arg2@@11)) arg2@@11) :pattern ((MapType2Type arg0@@125 arg1@@57 arg2@@11)) :qid |typeInv:MapType2TypeInv2|)))
(assert (forall ((arg2@@12 T@U)(arg0@@126 T@U)(arg1@@58 T@U)) (! (= (type (MapType2Select arg0@@126 arg1@@58 arg2@@12)) (MapType2TypeInv2 (type arg0@@126))) :pattern ((MapType2Select arg0@@126 arg1@@58 arg2@@12)) :qid |funType:MapType2Select|)))
(assert (forall ((arg3@@1 T@U)(arg0@@127 T@U)(arg1@@59 T@U)(arg2@@13 T@U)) (! (= (type (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type (type arg1@@59) (type arg2@@13) (type arg3@@1))) :pattern ((MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) :qid |funType:MapType2Store|)))
(assert (forall ((val@@6 T@U)(m@@45 T@U)(x0@@5 T@U)(x1 T@U)) (! (=> (= (type val@@6) (MapType2TypeInv2 (type m@@45))) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6)) :weight 0 :qid |mapAx0:MapType2Select|)))
(assert (forall ((x0@@6 T@U)(x1@@0 T@U)(y0@@3 T@U)(y1 T@U)(val@@7 T@U)(m@@46 T@U)) (! (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1))) :weight 0 :qid |mapAx1:MapType2Select:0|)))
(assert (forall ((val@@8 T@U)(m@@47 T@U)(x0@@7 T@U)(x1@@1 T@U)(y0@@4 T@U)(y1@@0 T@U)) (! (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0))) :weight 0 :qid |mapAx1:MapType2Select:1|)))
(assert (forall ((x0@@8 T@U)(x1@@2 T@U)(y0@@5 T@U)(y1@@1 T@U)(val@@9 T@U)(m@@48 T@U)) (! (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1))) :weight 0 :qid |mapAx2:MapType2Select|)))
(assert (forall ((arg0@@128 T@U)(arg1@@60 T@U)(arg2@@14 T@U)) (! (= (type (Handle1 arg0@@128 arg1@@60 arg2@@14)) HandleTypeType) :pattern ((Handle1 arg0@@128 arg1@@60 arg2@@14)) :qid |funType:Handle1|)))
(assert (forall ((t0@@16 T@U)(t1@@7 T@U)(heap@@1 T@U)(h@@21 T@U)(r@@6 T@U)(rd T@U)(bx0 T@U)) (! (=> (and (= (type t0@@16) TyType) (= (type t1@@7) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type)) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@1 bx0))) :pattern ((Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0)) :skolemid |721| :qid |unknown.0:0!149|)))
(assert (forall ((t0@@17 T@U)(t1@@8 T@U)(heap@@2 T@U)(h@@22 T@U)(r@@7 T@U)(rd@@0 T@U)(bx0@@0 T@U)) (! (=> (and (= (type t0@@17) TyType) (= (type t1@@8) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type)) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) (= (type bx0@@0) BoxType) (U_2_bool (MapType2Select r@@7 heap@@2 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) :pattern ((Requires1 t0@@17
                          t1@@8
                          heap@@2
                          (Handle1 h@@22 r@@7 rd@@0)
                          bx0@@0)) :skolemid |722| :qid |unknown.0:0!150|)))
(assert (forall ((arg0@@129 T@U)(arg1@@61 T@U)(arg2@@15 T@U)(arg3@@2 T@U)(arg4@@0 T@U)) (! (= (type (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :pattern ((Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) :qid |funType:Reads1|)))
(assert (forall ((t0@@18 T@U)(t1@@9 T@U)(heap@@3 T@U)(h@@23 T@U)(r@@8 T@U)(rd@@1 T@U)(bx0@@1 T@U)(bx@@32 T@U)) (! (=> (and (= (type t0@@18) TyType) (= (type t1@@9) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type)) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) (= (type bx0@@1) BoxType) (= (type bx@@32) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@3 bx0@@1) bx@@32)))) :pattern ((MapType0Select (Reads1 t0@@18
                                       t1@@9
                                       heap@@3
                                       (Handle1 h@@23 r@@8 rd@@1)
                                       bx0@@1)
                               bx@@32)) :skolemid |723| :qid |unknown.0:0!155|)))
(assert (forall ((t0@@19 T@U)(t1@@10 T@U)(h0@@0 T@U)(h1@@0 T@U)(f@@5 T@U)(bx0@@2 T@U)) (! (or (not (and (= (type t0@@19) TyType) (= (type t1@@10) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type)) (= (type h1@@0) (MapType0Type refType MapType1Type)) (= (type f@@5) HandleTypeType) (= (type bx0@@2) BoxType))) (not (and ($HeapSucc h0@@0 h1@@0) ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0) ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (not (=> (and (= (type (o@@44!724!48 bx0@@2 f@@5 h1@@0 h0@@0 t1@@10 t0@@19)) refType) (= (type (fld!724!47 bx0@@2 f@@5 h1@@0 h0@@0 t1@@10 t0@@19)) (FieldType (FieldTypeInv0 (type (fld!724!47 bx0@@2 f@@5 h1@@0 h0@@0 t1@@10 t0@@19))))) (not (= (o@@44!724!48 bx0@@2 f@@5 h1@@0 h0@@0 t1@@10 t0@@19) null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box (o@@44!724!48 bx0@@2 f@@5 h1@@0 h0@@0 t1@@10 t0@@19))))) (= (MapType1Select (MapType0Select h0@@0 (o@@44!724!48 bx0@@2 f@@5 h1@@0 h0@@0 t1@@10 t0@@19)) (fld!724!47 bx0@@2 f@@5 h1@@0 h0@@0 t1@@10 t0@@19)) (MapType1Select (MapType0Select h1@@0 (o@@44!724!48 bx0@@2 f@@5 h1@@0 h0@@0 t1@@10 t0@@19)) (fld!724!47 bx0@@2 f@@5 h1@@0 h0@@0 t1@@10 t0@@19))))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))) :pattern (($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)) :skolemid |725| :qid |unknown.0:0!165|)))
(assert (forall ((t0@@20 T@U)(t1@@11 T@U)(h0@@1 T@U)(h1@@1 T@U)(f@@6 T@U)(bx0@@3 T@U)) (! (or (not (and (= (type t0@@20) TyType) (= (type t1@@11) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type)) (= (type h1@@1) (MapType0Type refType MapType1Type)) (= (type f@@6) HandleTypeType) (= (type bx0@@3) BoxType))) (not (and ($HeapSucc h0@@1 h1@@1) ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1) ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (not (=> (and (= (type (o@@45!726!50 bx0@@3 f@@6 h1@@1 h0@@1 t1@@11 t0@@20)) refType) (= (type (fld@@0!726!49 bx0@@3 f@@6 h1@@1 h0@@1 t1@@11 t0@@20)) (FieldType (FieldTypeInv0 (type (fld@@0!726!49 bx0@@3 f@@6 h1@@1 h0@@1 t1@@11 t0@@20))))) (not (= (o@@45!726!50 bx0@@3 f@@6 h1@@1 h0@@1 t1@@11 t0@@20) null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box (o@@45!726!50 bx0@@3 f@@6 h1@@1 h0@@1 t1@@11 t0@@20))))) (= (MapType1Select (MapType0Select h0@@1 (o@@45!726!50 bx0@@3 f@@6 h1@@1 h0@@1 t1@@11 t0@@20)) (fld@@0!726!49 bx0@@3 f@@6 h1@@1 h0@@1 t1@@11 t0@@20)) (MapType1Select (MapType0Select h1@@1 (o@@45!726!50 bx0@@3 f@@6 h1@@1 h0@@1 t1@@11 t0@@20)) (fld@@0!726!49 bx0@@3 f@@6 h1@@1 h0@@1 t1@@11 t0@@20))))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))) :pattern (($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)) :skolemid |727| :qid |unknown.0:0!175|)))
(assert (forall ((h0@@2 T@U)(h1@@2 T@U)(f@@7 T@U)(bx0@@4 T@U)(t0@@21 T@U)(t1@@12 T@U)) (! (or (not (and (= (type t0@@21) TyType) (= (type t1@@12) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type)) (= (type h1@@2) (MapType0Type refType MapType1Type)) (= (type f@@7) HandleTypeType) (= (type bx0@@4) BoxType))) (not (and ($HeapSucc h0@@2 h1@@2) ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2) ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (not (=> (and (= (type (o@@46!728!52 bx0@@4 f@@7 h1@@2 h0@@2 t1@@12 t0@@21)) refType) (= (type (fld@@1!728!51 bx0@@4 f@@7 h1@@2 h0@@2 t1@@12 t0@@21)) (FieldType (FieldTypeInv0 (type (fld@@1!728!51 bx0@@4 f@@7 h1@@2 h0@@2 t1@@12 t0@@21))))) (not (= (o@@46!728!52 bx0@@4 f@@7 h1@@2 h0@@2 t1@@12 t0@@21) null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box (o@@46!728!52 bx0@@4 f@@7 h1@@2 h0@@2 t1@@12 t0@@21))))) (= (MapType1Select (MapType0Select h0@@2 (o@@46!728!52 bx0@@4 f@@7 h1@@2 h0@@2 t1@@12 t0@@21)) (fld@@1!728!51 bx0@@4 f@@7 h1@@2 h0@@2 t1@@12 t0@@21)) (MapType1Select (MapType0Select h1@@2 (o@@46!728!52 bx0@@4 f@@7 h1@@2 h0@@2 t1@@12 t0@@21)) (fld@@1!728!51 bx0@@4 f@@7 h1@@2 h0@@2 t1@@12 t0@@21))))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))) :pattern (($HeapSucc h0@@2 h1@@2)
               (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)) :skolemid |729| :qid |unknown.0:0!185|)))
(assert (forall ((t0@@22 T@U)(t1@@13 T@U)(h0@@3 T@U)(h1@@3 T@U)(f@@8 T@U)(bx0@@5 T@U)) (! (or (not (and (= (type t0@@22) TyType) (= (type t1@@13) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type)) (= (type h1@@3) (MapType0Type refType MapType1Type)) (= (type f@@8) HandleTypeType) (= (type bx0@@5) BoxType))) (not (and ($HeapSucc h0@@3 h1@@3) ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3) ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (not (=> (and (= (type (o@@47!730!54 bx0@@5 f@@8 h1@@3 h0@@3 t1@@13 t0@@22)) refType) (= (type (fld@@2!730!53 bx0@@5 f@@8 h1@@3 h0@@3 t1@@13 t0@@22)) (FieldType (FieldTypeInv0 (type (fld@@2!730!53 bx0@@5 f@@8 h1@@3 h0@@3 t1@@13 t0@@22))))) (not (= (o@@47!730!54 bx0@@5 f@@8 h1@@3 h0@@3 t1@@13 t0@@22) null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box (o@@47!730!54 bx0@@5 f@@8 h1@@3 h0@@3 t1@@13 t0@@22))))) (= (MapType1Select (MapType0Select h0@@3 (o@@47!730!54 bx0@@5 f@@8 h1@@3 h0@@3 t1@@13 t0@@22)) (fld@@2!730!53 bx0@@5 f@@8 h1@@3 h0@@3 t1@@13 t0@@22)) (MapType1Select (MapType0Select h1@@3 (o@@47!730!54 bx0@@5 f@@8 h1@@3 h0@@3 t1@@13 t0@@22)) (fld@@2!730!53 bx0@@5 f@@8 h1@@3 h0@@3 t1@@13 t0@@22))))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))) :pattern (($HeapSucc h0@@3 h1@@3)
               (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)) :skolemid |731| :qid |unknown.0:0!193|)))
(assert (forall ((t0@@23 T@U)(t1@@14 T@U)(h0@@4 T@U)(h1@@4 T@U)(f@@9 T@U)(bx0@@6 T@U)) (! (or (not (and (= (type t0@@23) TyType) (= (type t1@@14) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type)) (= (type h1@@4) (MapType0Type refType MapType1Type)) (= (type f@@9) HandleTypeType) (= (type bx0@@6) BoxType))) (not (and ($HeapSucc h0@@4 h1@@4) ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4) ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (not (=> (and (= (type (o@@48!732!56 bx0@@6 f@@9 h1@@4 h0@@4 t1@@14 t0@@23)) refType) (= (type (fld@@3!732!55 bx0@@6 f@@9 h1@@4 h0@@4 t1@@14 t0@@23)) (FieldType (FieldTypeInv0 (type (fld@@3!732!55 bx0@@6 f@@9 h1@@4 h0@@4 t1@@14 t0@@23))))) (not (= (o@@48!732!56 bx0@@6 f@@9 h1@@4 h0@@4 t1@@14 t0@@23) null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box (o@@48!732!56 bx0@@6 f@@9 h1@@4 h0@@4 t1@@14 t0@@23))))) (= (MapType1Select (MapType0Select h0@@4 (o@@48!732!56 bx0@@6 f@@9 h1@@4 h0@@4 t1@@14 t0@@23)) (fld@@3!732!55 bx0@@6 f@@9 h1@@4 h0@@4 t1@@14 t0@@23)) (MapType1Select (MapType0Select h1@@4 (o@@48!732!56 bx0@@6 f@@9 h1@@4 h0@@4 t1@@14 t0@@23)) (fld@@3!732!55 bx0@@6 f@@9 h1@@4 h0@@4 t1@@14 t0@@23))))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))) :pattern (($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)) :skolemid |733| :qid |unknown.0:0!203|)))
(assert (forall ((t0@@24 T@U)(t1@@15 T@U)(h0@@5 T@U)(h1@@5 T@U)(f@@10 T@U)(bx0@@7 T@U)) (! (or (not (and (= (type t0@@24) TyType) (= (type t1@@15) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type)) (= (type h1@@5) (MapType0Type refType MapType1Type)) (= (type f@@10) HandleTypeType) (= (type bx0@@7) BoxType))) (not (and ($HeapSucc h0@@5 h1@@5) ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5) ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (not (=> (and (= (type (o@@49!734!58 bx0@@7 f@@10 h1@@5 h0@@5 t1@@15 t0@@24)) refType) (= (type (fld@@4!734!57 bx0@@7 f@@10 h1@@5 h0@@5 t1@@15 t0@@24)) (FieldType (FieldTypeInv0 (type (fld@@4!734!57 bx0@@7 f@@10 h1@@5 h0@@5 t1@@15 t0@@24))))) (not (= (o@@49!734!58 bx0@@7 f@@10 h1@@5 h0@@5 t1@@15 t0@@24) null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box (o@@49!734!58 bx0@@7 f@@10 h1@@5 h0@@5 t1@@15 t0@@24))))) (= (MapType1Select (MapType0Select h0@@5 (o@@49!734!58 bx0@@7 f@@10 h1@@5 h0@@5 t1@@15 t0@@24)) (fld@@4!734!57 bx0@@7 f@@10 h1@@5 h0@@5 t1@@15 t0@@24)) (MapType1Select (MapType0Select h1@@5 (o@@49!734!58 bx0@@7 f@@10 h1@@5 h0@@5 t1@@15 t0@@24)) (fld@@4!734!57 bx0@@7 f@@10 h1@@5 h0@@5 t1@@15 t0@@24))))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))) :pattern (($HeapSucc h0@@5 h1@@5)
               (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)) :skolemid |735| :qid |unknown.0:0!209|)))
(assert (forall ((t0@@25 T@U)(t1@@16 T@U)(heap@@4 T@U)(f@@11 T@U)(bx0@@8 T@U)) (! (=> (and (= (type t0@@25) TyType) (= (type t1@@16) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type)) (= (type f@@11) HandleTypeType) (= (type bx0@@8) BoxType) ($IsGoodHeap heap@@4) ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8) (|Set#Empty| BoxType)))) :pattern ((Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8)
               ($IsGoodHeap heap@@4)) :pattern ((Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8)) :skolemid |736| :qid |unknown.0:0!215|)))
(assert (forall ((t0@@26 T@U)(t1@@17 T@U)(heap@@5 T@U)(f@@12 T@U)(bx0@@9 T@U)) (! (=> (and (= (type t0@@26) TyType) (= (type t1@@17) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type)) (= (type f@@12) HandleTypeType) (= (type bx0@@9) BoxType) ($IsGoodHeap heap@@5) ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9))) :pattern ((Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9)
               ($IsGoodHeap heap@@5)) :pattern ((Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9)) :skolemid |737| :qid |unknown.0:0!219|)))
(assert (forall ((t1@@18 T@U)(f@@13 T@U)(t0@@27 T@U)) (! (or (not (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType) (= (type t1@@18) TyType))) (and (or (not ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) (forall ((h@@24 T@U)(bx0@@10 T@U)) (! (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18))) :pattern ((Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) :skolemid |738| :qid |DafnyPreludebpl.545:12!223|))) (or ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (not (=> (and (= (type (h@@24!738!60 t0@@27 f@@13 t1@@18)) (MapType0Type refType MapType1Type)) (= (type (bx0@@10!738!59 t0@@27 f@@13 t1@@18)) BoxType)) (=> (and ($IsGoodHeap (h@@24!738!60 t0@@27 f@@13 t1@@18)) ($IsBox (bx0@@10!738!59 t0@@27 f@@13 t1@@18) t0@@27) (Requires1 t0@@27 t1@@18 (h@@24!738!60 t0@@27 f@@13 t1@@18) f@@13 (bx0@@10!738!59 t0@@27 f@@13 t1@@18))) ($IsBox (Apply1 t0@@27 t1@@18 (h@@24!738!60 t0@@27 f@@13 t1@@18) f@@13 (bx0@@10!738!59 t0@@27 f@@13 t1@@18)) t1@@18))))))) :pattern (($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) :skolemid |739| :qid |unknown.0:0!224|)))
(assert (forall ((f@@14 T@U)(t0@@28 T@U)(t1@@19 T@U)(u0 T@U)(u1 T@U)) (! (or (not (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType) (= (type t1@@19) TyType) (= (type u0) TyType) (= (type u1) TyType))) (not ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19))) (not (=> (and (= (type (bx@@33!740!61 u0 t0@@28)) BoxType) ($IsBox (bx@@33!740!61 u0 t0@@28) u0)) ($IsBox (bx@@33!740!61 u0 t0@@28) t0@@28))) (not (=> (and (= (type (bx@@34!741!62 u1 t1@@19)) BoxType) ($IsBox (bx@@34!741!62 u1 t1@@19) t1@@19)) ($IsBox (bx@@34!741!62 u1 t1@@19) u1))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :pattern (($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19))
               ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :skolemid |742| :qid |unknown.0:0!233|)))
(assert (forall ((f@@15 T@U)(t0@@29 T@U)(t1@@20 T@U)(h@@25 T@U)) (! (or (not (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType) (= (type t1@@20) TyType) (= (type h@@25) (MapType0Type refType MapType1Type)) ($IsGoodHeap h@@25))) (and (or (not ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) (forall ((bx0@@11 T@U)) (! (or (not (= (type bx0@@11) BoxType)) (not (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11))) (forall ((r@@9 T@U)) (! (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :pattern ((MapType0Select (Reads1 t0@@29
                                                                       t1@@20
                                                                       h@@25
                                                                       f@@15
                                                                       bx0@@11)
                                                               ($Box r@@9))) :skolemid |743| :qid |unknown.0:0!238|))) :pattern ((Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :pattern ((Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :skolemid |744| :qid |unknown.0:0!239|))) (or ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (and (= (type (bx0@@11!744!63 h@@25 t1@@20 t0@@29 f@@15)) BoxType) ($IsBox (bx0@@11!744!63 h@@25 t1@@20 t0@@29 f@@15) t0@@29) ($IsAllocBox (bx0@@11!744!63 h@@25 t1@@20 t0@@29 f@@15) t0@@29 h@@25) (Requires1 t0@@29 t1@@20 h@@25 f@@15 (bx0@@11!744!63 h@@25 t1@@20 t0@@29 f@@15)) (not (=> (= (type (r@@9!743!64 h@@25 t1@@20 t0@@29 f@@15)) refType) (=> (and (not (= (r@@9!743!64 h@@25 t1@@20 t0@@29 f@@15) null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 (bx0@@11!744!63 h@@25 t1@@20 t0@@29 f@@15)) ($Box (r@@9!743!64 h@@25 t1@@20 t0@@29 f@@15))))) (U_2_bool (MapType1Select (MapType0Select h@@25 (r@@9!743!64 h@@25 t1@@20 t0@@29 f@@15)) alloc))))))))) :pattern (($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) :skolemid |745| :qid |unknown.0:0!240|)))
(assert (forall ((h@@26 T@U)(f@@16 T@U)(t0@@30 T@U)(t1@@21 T@U)) (! (or (not (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType) (= (type t1@@21) TyType) (= (type h@@26) (MapType0Type refType MapType1Type)) ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U)) (! (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26))) :pattern ((Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) :skolemid |746| :qid |unknown.0:0!242|))) :pattern (($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26)) :skolemid |747| :qid |unknown.0:0!243|)))
(assert (forall ((arg0@@130 T@U)(arg1@@62 T@U)) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) TyType) :pattern ((Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) :qid |funType:Tclass._System.___hPartialFunc1|)))
(assert (forall ((|#$T0@@3| T@U)(|#$R@@3| T@U)) (! (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|))) :pattern ((Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) :skolemid |748| :qid |unknown.0:0!246|)))
(assert (forall ((arg0@@131 T@U)) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@131)) TyType) :pattern ((Tclass._System.___hPartialFunc1_0 arg0@@131)) :qid |funType:Tclass._System.___hPartialFunc1_0|)))
(assert (forall ((|#$R@@4| T@U)(|#$T0@@4| T@U)) (! (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)) :pattern ((Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) :skolemid |749| :qid |unknown.0:0!249|)))
(assert (forall ((arg0@@132 T@U)) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@132)) TyType) :pattern ((Tclass._System.___hPartialFunc1_1 arg0@@132)) :qid |funType:Tclass._System.___hPartialFunc1_1|)))
(assert (forall ((|#$T0@@5| T@U)(|#$R@@5| T@U)) (! (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)) :pattern ((Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) :skolemid |750| :qid |unknown.0:0!252|)))
(assert (forall ((|#$T0@@6| T@U)(|#$R@@6| T@U)(bx@@35 T@U)) (! (=> (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType) (= (type bx@@35) BoxType) ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@35)) bx@@35) ($Is ($Unbox HandleTypeType bx@@35) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))) :pattern (($IsBox bx@@35
                       (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) :skolemid |751| :qid |unknown.0:0!254|)))
(assert (forall ((|#$T0@@7| T@U)(|#$R@@7| T@U)(|f#0| T@U)) (! (or (not (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType) (= (type |f#0|) HandleTypeType))) (and (or (not ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U)) (! (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType))) :no-pattern (U_2_bool |x0#0|) :no-pattern (type |x0#0|) :no-pattern (U_2_int |x0#0|) :skolemid |752| :qid |unknown.0:0!257|)))) (or ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|)) (not ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|))) (not (=> (and (= (type (|x0#0!752!65| |f#0| |#$R@@7| |#$T0@@7|)) BoxType) ($IsBox (|x0#0!752!65| |f#0| |#$R@@7| |#$T0@@7|) |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| (|x0#0!752!65| |f#0| |#$R@@7| |#$T0@@7|)) (|Set#Empty| BoxType))))))) :pattern (($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) :skolemid |753| :qid |unknown.0:0!259|)))
(assert (forall ((|#$R@@8| T@U)(|f#0@@0| T@U)($h@@7 T@U)(|#$T0@@8| T@U)) (! (=> (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType) (= (type |f#0@@0|) HandleTypeType) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7))) :pattern (($IsAlloc |f#0@@0|
                         (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|)
                         $h@@7)) :skolemid |754| :qid |unknown.0:0!261|)))
(assert (forall ((arg0@@133 T@U)(arg1@@63 T@U)) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) TyType) :pattern ((Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) :qid |funType:Tclass._System.___hTotalFunc1|)))
(assert (forall ((|#$T0@@9| T@U)(|#$R@@9| T@U)) (! (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|))) :pattern ((Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) :skolemid |755| :qid |unknown.0:0!266|)))
(assert (forall ((arg0@@134 T@U)) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@134)) TyType) :pattern ((Tclass._System.___hTotalFunc1_0 arg0@@134)) :qid |funType:Tclass._System.___hTotalFunc1_0|)))
(assert (forall ((|#$T0@@10| T@U)(|#$R@@10| T@U)) (! (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|)) :pattern ((Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) :skolemid |756| :qid |unknown.0:0!268|)))
(assert (forall ((arg0@@135 T@U)) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@135)) TyType) :pattern ((Tclass._System.___hTotalFunc1_1 arg0@@135)) :qid |funType:Tclass._System.___hTotalFunc1_1|)))
(assert (forall ((|#$T0@@11| T@U)(|#$R@@11| T@U)) (! (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|)) :pattern ((Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) :skolemid |757| :qid |unknown.0:0!270|)))
(assert (forall ((|#$T0@@12| T@U)(|#$R@@12| T@U)(bx@@36 T@U)) (! (=> (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType) (= (type bx@@36) BoxType) ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))) :pattern (($IsBox bx@@36
                       (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) :skolemid |758| :qid |unknown.0:0!272|)))
(assert (forall ((|#$R@@13| T@U)(|f#0@@1| T@U)(|#$T0@@13| T@U)) (! (or (not (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType) (= (type |f#0@@1|) HandleTypeType))) (and (or (not ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U)) (! (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|)) :no-pattern (type |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :skolemid |759| :qid |unknown.0:0!278|)))) (or ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|)) (not ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|))) (not (=> (and (= (type (|x0#0@@0!759!66| |#$T0@@13| |f#0@@1| |#$R@@13|)) BoxType) ($IsBox (|x0#0@@0!759!66| |#$T0@@13| |f#0@@1| |#$R@@13|) |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| (|x0#0@@0!759!66| |#$T0@@13| |f#0@@1| |#$R@@13|))))))) :pattern (($Is |f#0@@1|
                    (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) :skolemid |760| :qid |unknown.0:0!279|)))
(assert (forall ((|#$T0@@14| T@U)(|#$R@@14| T@U)(|f#0@@2| T@U)($h@@8 T@U)) (! (=> (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType) (= (type |f#0@@2|) HandleTypeType) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8))) :pattern (($IsAlloc |f#0@@2|
                         (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|)
                         $h@@8)) :skolemid |761| :qid |unknown.0:0!281|)))
(assert (forall ((arg0@@136 T@U)) (! (= (type (Tclass._System.___hFunc0 arg0@@136)) TyType) :pattern ((Tclass._System.___hFunc0 arg0@@136)) :qid |funType:Tclass._System.___hFunc0|)))
(assert (forall ((|#$R@@15| T@U)) (! (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|))) :pattern ((Tclass._System.___hFunc0 |#$R@@15|)) :skolemid |762| :qid |unknown.0:0!285|)))
(assert (forall ((arg0@@137 T@U)) (! (= (type (Tclass._System.___hFunc0_0 arg0@@137)) TyType) :pattern ((Tclass._System.___hFunc0_0 arg0@@137)) :qid |funType:Tclass._System.___hFunc0_0|)))
(assert (forall ((|#$R@@16| T@U)) (! (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|)) :pattern ((Tclass._System.___hFunc0 |#$R@@16|)) :skolemid |763| :qid |unknown.0:0!287|)))
(assert (forall ((|#$R@@17| T@U)(bx@@37 T@U)) (! (=> (and (= (type |#$R@@17|) TyType) (= (type bx@@37) BoxType) ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hFunc0 |#$R@@17|)))) :pattern (($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) :skolemid |764| :qid |unknown.0:0!290|)))
(assert (forall ((arg2@@16 T@U)(arg0@@138 T@U)(arg1@@64 T@U)) (! (= (type (Apply0 arg0@@138 arg1@@64 arg2@@16)) BoxType) :pattern ((Apply0 arg0@@138 arg1@@64 arg2@@16)) :qid |funType:Apply0|)))
(assert (forall ((arg0@@139 T@U)(arg1@@65 T@U)(arg2@@17 T@U)) (! (= (type (Handle0 arg0@@139 arg1@@65 arg2@@17)) HandleTypeType) :pattern ((Handle0 arg0@@139 arg1@@65 arg2@@17)) :qid |funType:Handle0|)))
(assert (forall ((t0@@31 T@U)(heap@@6 T@U)(h@@27 T@U)(r@@10 T@U)(rd@@2 T@U)) (! (=> (and (= (type t0@@31) TyType) (= (type heap@@6) (MapType0Type refType MapType1Type)) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType)) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType)) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@6))) :pattern ((Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2))) :skolemid |765| :qid |unknown.0:0!296|)))
(assert (forall ((t0@@32 T@U)(heap@@7 T@U)(h@@28 T@U)(r@@11 T@U)(rd@@3 T@U)) (! (=> (and (= (type t0@@32) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type)) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType)) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType)) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType))) (U_2_bool (MapType0Select r@@11 heap@@7))) (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) :pattern ((Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) :skolemid |766| :qid |unknown.0:0!299|)))
(assert (forall ((arg0@@140 T@U)(arg1@@66 T@U)(arg2@@18 T@U)) (! (= (type (Reads0 arg0@@140 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType)) :pattern ((Reads0 arg0@@140 arg1@@66 arg2@@18)) :qid |funType:Reads0|)))
(assert (forall ((t0@@33 T@U)(heap@@8 T@U)(h@@29 T@U)(r@@12 T@U)(rd@@4 T@U)(bx@@38 T@U)) (! (=> (and (= (type t0@@33) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type)) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType)) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType)) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType))) (= (type bx@@38) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@8) bx@@38)))) :pattern ((MapType0Select (Reads0 t0@@33
                                       heap@@8
                                       (Handle0 h@@29 r@@12 rd@@4))
                               bx@@38)) :skolemid |767| :qid |unknown.0:0!303|)))
(assert (forall ((f@@17 T@U)(t0@@34 T@U)(h0@@6 T@U)(h1@@6 T@U)) (! (or (not (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type)) (= (type h1@@6) (MapType0Type refType MapType1Type)) (= (type f@@17) HandleTypeType))) (not (and ($HeapSucc h0@@6 h1@@6) ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34)))) (not (=> (and (= (type (o@@50!768!68 f@@17 h1@@6 h0@@6 t0@@34)) refType) (= (type (fld@@5!768!67 f@@17 h1@@6 h0@@6 t0@@34)) (FieldType (FieldTypeInv0 (type (fld@@5!768!67 f@@17 h1@@6 h0@@6 t0@@34))))) (not (= (o@@50!768!68 f@@17 h1@@6 h0@@6 t0@@34) null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box (o@@50!768!68 f@@17 h1@@6 h0@@6 t0@@34))))) (= (MapType1Select (MapType0Select h0@@6 (o@@50!768!68 f@@17 h1@@6 h0@@6 t0@@34)) (fld@@5!768!67 f@@17 h1@@6 h0@@6 t0@@34)) (MapType1Select (MapType0Select h1@@6 (o@@50!768!68 f@@17 h1@@6 h0@@6 t0@@34)) (fld@@5!768!67 f@@17 h1@@6 h0@@6 t0@@34))))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17))) :pattern (($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17)) :skolemid |769| :qid |unknown.0:0!309|)))
(assert (forall ((t0@@35 T@U)(h0@@7 T@U)(h1@@7 T@U)(f@@18 T@U)) (! (or (not (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type)) (= (type h1@@7) (MapType0Type refType MapType1Type)) (= (type f@@18) HandleTypeType))) (not (and ($HeapSucc h0@@7 h1@@7) ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35)))) (not (=> (and (= (type (o@@51!770!69 f@@18 h1@@7 h0@@7 t0@@35)) refType) (= (type (fld@@6!770!70 f@@18 h1@@7 h0@@7 t0@@35)) (FieldType (FieldTypeInv0 (type (fld@@6!770!70 f@@18 h1@@7 h0@@7 t0@@35))))) (not (= (o@@51!770!69 f@@18 h1@@7 h0@@7 t0@@35) null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box (o@@51!770!69 f@@18 h1@@7 h0@@7 t0@@35))))) (= (MapType1Select (MapType0Select h0@@7 (o@@51!770!69 f@@18 h1@@7 h0@@7 t0@@35)) (fld@@6!770!70 f@@18 h1@@7 h0@@7 t0@@35)) (MapType1Select (MapType0Select h1@@7 (o@@51!770!69 f@@18 h1@@7 h0@@7 t0@@35)) (fld@@6!770!70 f@@18 h1@@7 h0@@7 t0@@35))))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18))) :pattern (($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18)) :skolemid |771| :qid |unknown.0:0!318|)))
(assert (forall ((f@@19 T@U)(t0@@36 T@U)(h0@@8 T@U)(h1@@8 T@U)) (! (or (not (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type)) (= (type h1@@8) (MapType0Type refType MapType1Type)) (= (type f@@19) HandleTypeType))) (not (and ($HeapSucc h0@@8 h1@@8) ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36)))) (not (=> (and (= (type (o@@52!772!72 h1@@8 h0@@8 t0@@36 f@@19)) refType) (= (type (fld@@7!772!71 h1@@8 h0@@8 t0@@36 f@@19)) (FieldType (FieldTypeInv0 (type (fld@@7!772!71 h1@@8 h0@@8 t0@@36 f@@19))))) (not (= (o@@52!772!72 h1@@8 h0@@8 t0@@36 f@@19) null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box (o@@52!772!72 h1@@8 h0@@8 t0@@36 f@@19))))) (= (MapType1Select (MapType0Select h0@@8 (o@@52!772!72 h1@@8 h0@@8 t0@@36 f@@19)) (fld@@7!772!71 h1@@8 h0@@8 t0@@36 f@@19)) (MapType1Select (MapType0Select h1@@8 (o@@52!772!72 h1@@8 h0@@8 t0@@36 f@@19)) (fld@@7!772!71 h1@@8 h0@@8 t0@@36 f@@19))))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19))) :pattern (($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19)) :skolemid |773| :qid |unknown.0:0!3|)))
(assert (forall ((t0@@37 T@U)(h0@@9 T@U)(h1@@9 T@U)(f@@20 T@U)) (! (or (not (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type)) (= (type h1@@9) (MapType0Type refType MapType1Type)) (= (type f@@20) HandleTypeType))) (not (and ($HeapSucc h0@@9 h1@@9) ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37)))) (not (=> (and (= (type (o@@53!774!74 f@@20 h1@@9 h0@@9 t0@@37)) refType) (= (type (fld@@8!774!73 f@@20 h1@@9 h0@@9 t0@@37)) (FieldType (FieldTypeInv0 (type (fld@@8!774!73 f@@20 h1@@9 h0@@9 t0@@37))))) (not (= (o@@53!774!74 f@@20 h1@@9 h0@@9 t0@@37) null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box (o@@53!774!74 f@@20 h1@@9 h0@@9 t0@@37))))) (= (MapType1Select (MapType0Select h0@@9 (o@@53!774!74 f@@20 h1@@9 h0@@9 t0@@37)) (fld@@8!774!73 f@@20 h1@@9 h0@@9 t0@@37)) (MapType1Select (MapType0Select h1@@9 (o@@53!774!74 f@@20 h1@@9 h0@@9 t0@@37)) (fld@@8!774!73 f@@20 h1@@9 h0@@9 t0@@37))))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20))) :pattern (($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20)) :skolemid |775| :qid |unknown.0:0!11|)))
(assert (forall ((t0@@38 T@U)(h0@@10 T@U)(h1@@10 T@U)(f@@21 T@U)) (! (or (not (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type)) (= (type h1@@10) (MapType0Type refType MapType1Type)) (= (type f@@21) HandleTypeType))) (not (and ($HeapSucc h0@@10 h1@@10) ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38)))) (not (=> (and (= (type (o@@54!776!76 f@@21 h1@@10 h0@@10 t0@@38)) refType) (= (type (fld@@9!776!75 f@@21 h1@@10 h0@@10 t0@@38)) (FieldType (FieldTypeInv0 (type (fld@@9!776!75 f@@21 h1@@10 h0@@10 t0@@38))))) (not (= (o@@54!776!76 f@@21 h1@@10 h0@@10 t0@@38) null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box (o@@54!776!76 f@@21 h1@@10 h0@@10 t0@@38))))) (= (MapType1Select (MapType0Select h0@@10 (o@@54!776!76 f@@21 h1@@10 h0@@10 t0@@38)) (fld@@9!776!75 f@@21 h1@@10 h0@@10 t0@@38)) (MapType1Select (MapType0Select h1@@10 (o@@54!776!76 f@@21 h1@@10 h0@@10 t0@@38)) (fld@@9!776!75 f@@21 h1@@10 h0@@10 t0@@38))))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21))) :pattern (($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21)) :skolemid |777| :qid |unknown.0:0!19|)))
(assert (forall ((h0@@11 T@U)(h1@@11 T@U)(f@@22 T@U)(t0@@39 T@U)) (! (or (not (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type)) (= (type h1@@11) (MapType0Type refType MapType1Type)) (= (type f@@22) HandleTypeType))) (not (and ($HeapSucc h0@@11 h1@@11) ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39)))) (not (=> (and (= (type (o@@55!778!78 t0@@39 f@@22 h1@@11 h0@@11)) refType) (= (type (fld@@10!778!77 t0@@39 f@@22 h1@@11 h0@@11)) (FieldType (FieldTypeInv0 (type (fld@@10!778!77 t0@@39 f@@22 h1@@11 h0@@11))))) (not (= (o@@55!778!78 t0@@39 f@@22 h1@@11 h0@@11) null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box (o@@55!778!78 t0@@39 f@@22 h1@@11 h0@@11))))) (= (MapType1Select (MapType0Select h0@@11 (o@@55!778!78 t0@@39 f@@22 h1@@11 h0@@11)) (fld@@10!778!77 t0@@39 f@@22 h1@@11 h0@@11)) (MapType1Select (MapType0Select h1@@11 (o@@55!778!78 t0@@39 f@@22 h1@@11 h0@@11)) (fld@@10!778!77 t0@@39 f@@22 h1@@11 h0@@11))))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22))) :pattern (($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22)) :skolemid |779| :qid |unknown.0:0!25|)))
(assert (forall ((t0@@40 T@U)(heap@@9 T@U)(f@@23 T@U)) (! (=> (and (= (type t0@@40) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type)) (= (type f@@23) HandleTypeType) ($IsGoodHeap heap@@9) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@9 f@@23) (|Set#Empty| BoxType)))) :pattern ((Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@9)) :pattern ((Reads0 t0@@40 heap@@9 f@@23)) :skolemid |780| :qid |unknown.0:0!30|)))
(assert (forall ((heap@@10 T@U)(f@@24 T@U)(t0@@41 T@U)) (! (=> (and (= (type t0@@41) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type)) (= (type f@@24) HandleTypeType) ($IsGoodHeap heap@@10) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41)) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@10 f@@24))) :pattern ((Requires0 t0@@41 heap@@10 f@@24)) :pattern ((Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@10)) :skolemid |781| :qid |unknown.0:0!33|)))
(assert (forall ((f@@25 T@U)(t0@@42 T@U)) (! (or (not (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType))) (and (or (not ($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) (forall ((h@@30 T@U)) (! (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42))) :pattern ((Apply0 t0@@42 h@@30 f@@25)) :skolemid |782| :qid |DafnyPreludebpl.545:12|))) (or ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (not (=> (= (type (h@@30!782!79 t0@@42 f@@25)) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap (h@@30!782!79 t0@@42 f@@25)) (Requires0 t0@@42 (h@@30!782!79 t0@@42 f@@25) f@@25)) ($IsBox (Apply0 t0@@42 (h@@30!782!79 t0@@42 f@@25) f@@25) t0@@42))))))) :pattern (($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) :skolemid |783| :qid |unknown.0:0!40|)))
(assert (forall ((f@@26 T@U)(t0@@43 T@U)(u0@@0 T@U)) (! (or (not (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType) (= (type u0@@0) TyType))) (not ($Is f@@26 (Tclass._System.___hFunc0 t0@@43))) (not (=> (and (= (type (bx@@39!784!80 u0@@0 t0@@43)) BoxType) ($IsBox (bx@@39!784!80 u0@@0 t0@@43) t0@@43)) ($IsBox (bx@@39!784!80 u0@@0 t0@@43) u0@@0))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :pattern (($Is f@@26 (Tclass._System.___hFunc0 t0@@43))
               ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :skolemid |785| :qid |unknown.0:0!48|)))
(assert (forall ((h@@31 T@U)(f@@27 T@U)(t0@@44 T@U)) (! (or (not (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType) (= (type h@@31) (MapType0Type refType MapType1Type)) ($IsGoodHeap h@@31))) (and (or (not ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) (not (Requires0 t0@@44 h@@31 f@@27)) (forall ((r@@13 T@U)) (! (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc)))) :pattern ((MapType0Select (Reads0 t0@@44 h@@31 f@@27)
                                               ($Box r@@13))) :skolemid |786| :qid |unknown.0:0!57|))) (or ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31) (and (Requires0 t0@@44 h@@31 f@@27) (not (=> (= (type (r@@13!786!81 t0@@44 f@@27 h@@31)) refType) (=> (and (not (= (r@@13!786!81 t0@@44 f@@27 h@@31) null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box (r@@13!786!81 t0@@44 f@@27 h@@31))))) (U_2_bool (MapType1Select (MapType0Select h@@31 (r@@13!786!81 t0@@44 f@@27 h@@31)) alloc))))))))) :pattern (($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) :skolemid |787| :qid |unknown.0:0!58|)))
(assert (forall ((f@@28 T@U)(t0@@45 T@U)(h@@32 T@U)) (! (=> (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType) (= (type h@@32) (MapType0Type refType MapType1Type)) ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32)) :pattern (($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32)) :skolemid |788| :qid |unknown.0:0!63|)))
(assert (forall ((arg0@@141 T@U)) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@141)) TyType) :pattern ((Tclass._System.___hPartialFunc0 arg0@@141)) :qid |funType:Tclass._System.___hPartialFunc0|)))
(assert (forall ((|#$R@@18| T@U)) (! (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|))) :pattern ((Tclass._System.___hPartialFunc0 |#$R@@18|)) :skolemid |789| :qid |unknown.0:0!68|)))
(assert (forall ((arg0@@142 T@U)) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@142)) TyType) :pattern ((Tclass._System.___hPartialFunc0_0 arg0@@142)) :qid |funType:Tclass._System.___hPartialFunc0_0|)))
(assert (forall ((|#$R@@19| T@U)) (! (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|)) :pattern ((Tclass._System.___hPartialFunc0 |#$R@@19|)) :skolemid |790| :qid |unknown.0:0!71|)))
(assert (forall ((|#$R@@20| T@U)(bx@@40 T@U)) (! (=> (and (= (type |#$R@@20|) TyType) (= (type bx@@40) BoxType) ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@40)) bx@@40) ($Is ($Unbox HandleTypeType bx@@40) (Tclass._System.___hPartialFunc0 |#$R@@20|)))) :pattern (($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) :skolemid |791| :qid |unknown.0:0!75|)))
(assert (forall ((|#$R@@21| T@U)(|f#0@@3| T@U)) (! (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType))))) :pattern (($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))) :skolemid |792| :qid |unknown.0:0!79|)))
(assert (forall ((|f#0@@4| T@U)($h@@9 T@U)(|#$R@@22| T@U)) (! (=> (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9))) :pattern (($IsAlloc |f#0@@4|
                         (Tclass._System.___hPartialFunc0 |#$R@@22|)
                         $h@@9)) :skolemid |793| :qid |unknown.0:0!82|)))
(assert (forall ((arg0@@143 T@U)) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@143)) TyType) :pattern ((Tclass._System.___hTotalFunc0 arg0@@143)) :qid |funType:Tclass._System.___hTotalFunc0|)))
(assert (forall ((|#$R@@23| T@U)) (! (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|))) :pattern ((Tclass._System.___hTotalFunc0 |#$R@@23|)) :skolemid |794| :qid |unknown.0:0!87|)))
(assert (forall ((arg0@@144 T@U)) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@144)) TyType) :pattern ((Tclass._System.___hTotalFunc0_0 arg0@@144)) :qid |funType:Tclass._System.___hTotalFunc0_0|)))
(assert (forall ((|#$R@@24| T@U)) (! (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|)) :pattern ((Tclass._System.___hTotalFunc0 |#$R@@24|)) :skolemid |795| :qid |unknown.0:0!89|)))
(assert (forall ((bx@@41 T@U)(|#$R@@25| T@U)) (! (=> (and (= (type |#$R@@25|) TyType) (= (type bx@@41) BoxType) ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hTotalFunc0 |#$R@@25|)))) :pattern (($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) :skolemid |796| :qid |unknown.0:0!94|)))
(assert (forall ((|#$R@@26| T@U)(|f#0@@5| T@U)) (! (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))) :pattern (($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))) :skolemid |797| :qid |unknown.0:0!99|)))
(assert (forall (($h@@10 T@U)(|#$R@@27| T@U)(|f#0@@6| T@U)) (! (=> (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10))) :pattern (($IsAlloc |f#0@@6|
                         (Tclass._System.___hTotalFunc0 |#$R@@27|)
                         $h@@10)) :skolemid |798| :qid |unknown.0:0!105|)))
(assert (forall ((bx@@42 T@U)) (! (=> (and (= (type bx@@42) BoxType) ($IsBox bx@@42 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@42)) bx@@42) ($Is ($Unbox refType bx@@42) Tclass._System.__default))) :pattern (($IsBox bx@@42 Tclass._System.__default)) :skolemid |799| :qid |unknown.0:0!107|)))
(assert (forall (($o@@7 T@U)) (! (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)))) :pattern (($Is $o@@7 Tclass._System.__default)) :skolemid |800| :qid |unknown.0:0!110|)))
(assert (forall (($o@@8 T@U)($h@@11 T@U)) (! (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc))))) :pattern (($IsAlloc $o@@8 Tclass._System.__default $h@@11)) :skolemid |801| :qid |unknown.0:0!114|)))
(assert (forall ((|a#0@@0| T@U)(|b#0@@0| T@U)(|#$A@@0| T@U)(|#$B@@0| T@U)) (! (=> (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType) (= (type |a#0@@0|) BoxType) (= (type |b#0@@0|) BoxType) ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|)) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true)) :pattern ((|_System.__default.rank__is__less__than#requires|
                 |#$A@@0|
                 |#$B@@0|
                 |a#0@@0|
                 |b#0@@0|)) :skolemid |803| :qid |unknown.0:0!121|)))
(assert (forall ((arg2@@19 T@U)(arg0@@145 T@U)(arg1@@67 T@U)) (! (= (type (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) TyType) :pattern ((Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) :qid |funType:Tclass._System.___hFunc2|)))
(assert (forall ((|#$T0@@15| T@U)(|#$T1| T@U)(|#$R@@28| T@U)) (! (=> (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|))) :pattern ((Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) :skolemid |804| :qid |unknown.0:0!126|)))
(assert (forall ((arg0@@146 T@U)) (! (= (type (Tclass._System.___hFunc2_0 arg0@@146)) TyType) :pattern ((Tclass._System.___hFunc2_0 arg0@@146)) :qid |funType:Tclass._System.___hFunc2_0|)))
(assert (forall ((|#$T0@@16| T@U)(|#$T1@@0| T@U)(|#$R@@29| T@U)) (! (=> (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|)) :pattern ((Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) :skolemid |805| :qid |unknown.0:0!129|)))
(assert (forall ((arg0@@147 T@U)) (! (= (type (Tclass._System.___hFunc2_1 arg0@@147)) TyType) :pattern ((Tclass._System.___hFunc2_1 arg0@@147)) :qid |funType:Tclass._System.___hFunc2_1|)))
(assert (forall ((|#$T0@@17| T@U)(|#$T1@@1| T@U)(|#$R@@30| T@U)) (! (=> (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|)) :pattern ((Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) :skolemid |806| :qid |unknown.0:0!133|)))
(assert (forall ((arg0@@148 T@U)) (! (= (type (Tclass._System.___hFunc2_2 arg0@@148)) TyType) :pattern ((Tclass._System.___hFunc2_2 arg0@@148)) :qid |funType:Tclass._System.___hFunc2_2|)))
(assert (forall ((|#$R@@31| T@U)(|#$T0@@18| T@U)(|#$T1@@2| T@U)) (! (=> (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|)) :pattern ((Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) :skolemid |807| :qid |unknown.0:0!136|)))
(assert (forall ((|#$R@@32| T@U)(bx@@43 T@U)(|#$T0@@19| T@U)(|#$T1@@3| T@U)) (! (=> (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType) (= (type |#$R@@32|) TyType) (= (type bx@@43) BoxType) ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))) :pattern (($IsBox bx@@43
                       (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) :skolemid |808| :qid |unknown.0:0!139|)))
(assert (forall ((arg1@@68 T@T)(arg2@@20 T@T)(arg3@@3 T@T)(arg0@@149 T@T)) (! (= (Ctor (MapType3Type arg0@@149 arg1@@68 arg2@@20 arg3@@3)) 25) :qid |ctor:MapType3Type|)))
(assert (forall ((arg0@@150 T@T)(arg1@@69 T@T)(arg2@@21 T@T)(arg3@@4 T@T)) (! (= (MapType3TypeInv0 (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) arg0@@150) :pattern ((MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) :qid |typeInv:MapType3TypeInv0|)))
(assert (forall ((arg0@@151 T@T)(arg1@@70 T@T)(arg2@@22 T@T)(arg3@@5 T@T)) (! (= (MapType3TypeInv1 (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) arg1@@70) :pattern ((MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) :qid |typeInv:MapType3TypeInv1|)))
(assert (forall ((arg0@@152 T@T)(arg1@@71 T@T)(arg2@@23 T@T)(arg3@@6 T@T)) (! (= (MapType3TypeInv2 (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) arg2@@23) :pattern ((MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) :qid |typeInv:MapType3TypeInv2|)))
(assert (forall ((arg0@@153 T@T)(arg1@@72 T@T)(arg2@@24 T@T)(arg3@@7 T@T)) (! (= (MapType3TypeInv3 (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) arg3@@7) :pattern ((MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) :qid |typeInv:MapType3TypeInv3|)))
(assert (forall ((arg0@@154 T@U)(arg1@@73 T@U)(arg2@@25 T@U)(arg3@@8 T@U)) (! (= (type (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) (MapType3TypeInv3 (type arg0@@154))) :pattern ((MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) :qid |funType:MapType3Select|)))
(assert (forall ((arg0@@155 T@U)(arg1@@74 T@U)(arg2@@26 T@U)(arg3@@9 T@U)(arg4@@1 T@U)) (! (= (type (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type (type arg1@@74) (type arg2@@26) (type arg3@@9) (type arg4@@1))) :pattern ((MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) :qid |funType:MapType3Store|)))
(assert (forall ((m@@49 T@U)(x0@@9 T@U)(x1@@3 T@U)(x2 T@U)(val@@10 T@U)) (! (=> (= (type val@@10) (MapType3TypeInv3 (type m@@49))) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10)) :weight 0 :qid |mapAx0:MapType3Select|)))
(assert (forall ((val@@11 T@U)(m@@50 T@U)(x0@@10 T@U)(x1@@4 T@U)(x2@@0 T@U)(y0@@6 T@U)(y1@@2 T@U)(y2 T@U)) (! (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2))) :weight 0 :qid |mapAx1:MapType3Select:0|)))
(assert (forall ((val@@12 T@U)(m@@51 T@U)(x0@@11 T@U)(x1@@5 T@U)(x2@@1 T@U)(y0@@7 T@U)(y1@@3 T@U)(y2@@0 T@U)) (! (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0))) :weight 0 :qid |mapAx1:MapType3Select:1|)))
(assert (forall ((val@@13 T@U)(m@@52 T@U)(x0@@12 T@U)(x1@@6 T@U)(x2@@2 T@U)(y0@@8 T@U)(y1@@4 T@U)(y2@@1 T@U)) (! (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1))) :weight 0 :qid |mapAx1:MapType3Select:2|)))
(assert (forall ((val@@14 T@U)(m@@53 T@U)(x0@@13 T@U)(x1@@7 T@U)(x2@@3 T@U)(y0@@9 T@U)(y1@@5 T@U)(y2@@2 T@U)) (! (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2))) :weight 0 :qid |mapAx2:MapType3Select|)))
(assert (forall ((arg0@@156 T@U)(arg1@@75 T@U)(arg2@@27 T@U)(arg3@@10 T@U)(arg4@@2 T@U)(arg5 T@U)(arg6 T@U)) (! (= (type (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :pattern ((Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) :qid |funType:Apply2|)))
(assert (forall ((arg2@@28 T@U)(arg0@@157 T@U)(arg1@@76 T@U)) (! (= (type (Handle2 arg0@@157 arg1@@76 arg2@@28)) HandleTypeType) :pattern ((Handle2 arg0@@157 arg1@@76 arg2@@28)) :qid |funType:Handle2|)))
(assert (forall ((bx1 T@U)(t0@@46 T@U)(t1@@22 T@U)(t2 T@U)(heap@@11 T@U)(h@@33 T@U)(r@@14 T@U)(rd@@5 T@U)(bx0@@13 T@U)) (! (=> (and (= (type t0@@46) TyType) (= (type t1@@22) TyType) (= (type t2) TyType) (= (type heap@@11) (MapType0Type refType MapType1Type)) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType)) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType)) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType))) (= (type bx0@@13) BoxType) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@11 bx0@@13 bx1))) :pattern ((Apply2 t0@@46
                       t1@@22
                       t2
                       heap@@11
                       (Handle2 h@@33 r@@14 rd@@5)
                       bx0@@13
                       bx1)) :skolemid |809| :qid |unknown.0:0!158|)))
(assert (forall ((rd@@6 T@U)(bx0@@14 T@U)(bx1@@0 T@U)(t0@@47 T@U)(t1@@23 T@U)(t2@@0 T@U)(heap@@12 T@U)(h@@34 T@U)(r@@15 T@U)) (! (=> (and (= (type t0@@47) TyType) (= (type t1@@23) TyType) (= (type t2@@0) TyType) (= (type heap@@12) (MapType0Type refType MapType1Type)) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType)) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType)) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType))) (= (type bx0@@14) BoxType) (= (type bx1@@0) BoxType) (U_2_bool (MapType3Select r@@15 heap@@12 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) :pattern ((Requires2 t0@@47
                          t1@@23
                          t2@@0
                          heap@@12
                          (Handle2 h@@34 r@@15 rd@@6)
                          bx0@@14
                          bx1@@0)) :skolemid |810| :qid |unknown.0:0!166|)))
(assert (forall ((arg4@@3 T@U)(arg5@@0 T@U)(arg6@@0 T@U)(arg0@@158 T@U)(arg1@@77 T@U)(arg2@@29 T@U)(arg3@@11 T@U)) (! (= (type (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :pattern ((Reads2 arg0@@158
                       arg1@@77
                       arg2@@29
                       arg3@@11
                       arg4@@3
                       arg5@@0
                       arg6@@0)) :qid |funType:Reads2|)))
(assert (forall ((bx0@@15 T@U)(bx1@@1 T@U)(bx@@44 T@U)(t0@@48 T@U)(t1@@24 T@U)(t2@@1 T@U)(heap@@13 T@U)(h@@35 T@U)(r@@16 T@U)(rd@@7 T@U)) (! (=> (and (= (type t0@@48) TyType) (= (type t1@@24) TyType) (= (type t2@@1) TyType) (= (type heap@@13) (MapType0Type refType MapType1Type)) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType)) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType)) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType))) (= (type bx0@@15) BoxType) (= (type bx1@@1) BoxType) (= (type bx@@44) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@15 bx1@@1) bx@@44)))) :pattern ((MapType0Select (Reads2 t0@@48
                                       t1@@24
                                       t2@@1
                                       heap@@13
                                       (Handle2 h@@35 r@@16 rd@@7)
                                       bx0@@15
                                       bx1@@1)
                               bx@@44)) :skolemid |811| :qid |unknown.0:0!176|)))
(assert (forall ((t0@@49 T@U)(t1@@25 T@U)(t2@@2 T@U)(h0@@12 T@U)(h1@@12 T@U)(f@@29 T@U)(bx0@@16 T@U)(bx1@@2 T@U)) (! (or (not (and (= (type t0@@49) TyType) (= (type t1@@25) TyType) (= (type t2@@2) TyType) (= (type h0@@12) (MapType0Type refType MapType1Type)) (= (type h1@@12) (MapType0Type refType MapType1Type)) (= (type f@@29) HandleTypeType) (= (type bx0@@16) BoxType) (= (type bx1@@2) BoxType))) (not (and ($HeapSucc h0@@12 h1@@12) ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12) ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (not (=> (and (= (type (o@@56!812!83 bx1@@2 bx0@@16 f@@29 h1@@12 h0@@12 t2@@2 t1@@25 t0@@49)) refType) (= (type (fld@@11!812!82 bx1@@2 bx0@@16 f@@29 h1@@12 h0@@12 t2@@2 t1@@25 t0@@49)) (FieldType (FieldTypeInv0 (type (fld@@11!812!82 bx1@@2 bx0@@16 f@@29 h1@@12 h0@@12 t2@@2 t1@@25 t0@@49))))) (not (= (o@@56!812!83 bx1@@2 bx0@@16 f@@29 h1@@12 h0@@12 t2@@2 t1@@25 t0@@49) null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box (o@@56!812!83 bx1@@2 bx0@@16 f@@29 h1@@12 h0@@12 t2@@2 t1@@25 t0@@49))))) (= (MapType1Select (MapType0Select h0@@12 (o@@56!812!83 bx1@@2 bx0@@16 f@@29 h1@@12 h0@@12 t2@@2 t1@@25 t0@@49)) (fld@@11!812!82 bx1@@2 bx0@@16 f@@29 h1@@12 h0@@12 t2@@2 t1@@25 t0@@49)) (MapType1Select (MapType0Select h1@@12 (o@@56!812!83 bx1@@2 bx0@@16 f@@29 h1@@12 h0@@12 t2@@2 t1@@25 t0@@49)) (fld@@11!812!82 bx1@@2 bx0@@16 f@@29 h1@@12 h0@@12 t2@@2 t1@@25 t0@@49))))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))) :pattern (($HeapSucc h0@@12 h1@@12)
               (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)) :skolemid |813| :qid |unknown.0:0!187|)))
(assert (forall ((t0@@50 T@U)(t1@@26 T@U)(t2@@3 T@U)(h0@@13 T@U)(h1@@13 T@U)(f@@30 T@U)(bx0@@17 T@U)(bx1@@3 T@U)) (! (or (not (and (= (type t0@@50) TyType) (= (type t1@@26) TyType) (= (type t2@@3) TyType) (= (type h0@@13) (MapType0Type refType MapType1Type)) (= (type h1@@13) (MapType0Type refType MapType1Type)) (= (type f@@30) HandleTypeType) (= (type bx0@@17) BoxType) (= (type bx1@@3) BoxType))) (not (and ($HeapSucc h0@@13 h1@@13) ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13) ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (not (=> (and (= (type (o@@57!814!85 bx1@@3 bx0@@17 f@@30 h1@@13 h0@@13 t2@@3 t1@@26 t0@@50)) refType) (= (type (fld@@12!814!84 bx1@@3 bx0@@17 f@@30 h1@@13 h0@@13 t2@@3 t1@@26 t0@@50)) (FieldType (FieldTypeInv0 (type (fld@@12!814!84 bx1@@3 bx0@@17 f@@30 h1@@13 h0@@13 t2@@3 t1@@26 t0@@50))))) (not (= (o@@57!814!85 bx1@@3 bx0@@17 f@@30 h1@@13 h0@@13 t2@@3 t1@@26 t0@@50) null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box (o@@57!814!85 bx1@@3 bx0@@17 f@@30 h1@@13 h0@@13 t2@@3 t1@@26 t0@@50))))) (= (MapType1Select (MapType0Select h0@@13 (o@@57!814!85 bx1@@3 bx0@@17 f@@30 h1@@13 h0@@13 t2@@3 t1@@26 t0@@50)) (fld@@12!814!84 bx1@@3 bx0@@17 f@@30 h1@@13 h0@@13 t2@@3 t1@@26 t0@@50)) (MapType1Select (MapType0Select h1@@13 (o@@57!814!85 bx1@@3 bx0@@17 f@@30 h1@@13 h0@@13 t2@@3 t1@@26 t0@@50)) (fld@@12!814!84 bx1@@3 bx0@@17 f@@30 h1@@13 h0@@13 t2@@3 t1@@26 t0@@50))))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))) :pattern (($HeapSucc h0@@13 h1@@13)
               (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)) :skolemid |815| :qid |unknown.0:0!197|)))
(assert (forall ((h1@@14 T@U)(f@@31 T@U)(bx0@@18 T@U)(bx1@@4 T@U)(t0@@51 T@U)(t1@@27 T@U)(t2@@4 T@U)(h0@@14 T@U)) (! (or (not (and (= (type t0@@51) TyType) (= (type t1@@27) TyType) (= (type t2@@4) TyType) (= (type h0@@14) (MapType0Type refType MapType1Type)) (= (type h1@@14) (MapType0Type refType MapType1Type)) (= (type f@@31) HandleTypeType) (= (type bx0@@18) BoxType) (= (type bx1@@4) BoxType))) (not (and ($HeapSucc h0@@14 h1@@14) ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14) ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (not (=> (and (= (type (o@@58!816!86 h0@@14 t2@@4 t1@@27 t0@@51 bx1@@4 bx0@@18 f@@31 h1@@14)) refType) (= (type (fld@@13!816!87 h0@@14 t2@@4 t1@@27 t0@@51 bx1@@4 bx0@@18 f@@31 h1@@14)) (FieldType (FieldTypeInv0 (type (fld@@13!816!87 h0@@14 t2@@4 t1@@27 t0@@51 bx1@@4 bx0@@18 f@@31 h1@@14))))) (not (= (o@@58!816!86 h0@@14 t2@@4 t1@@27 t0@@51 bx1@@4 bx0@@18 f@@31 h1@@14) null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box (o@@58!816!86 h0@@14 t2@@4 t1@@27 t0@@51 bx1@@4 bx0@@18 f@@31 h1@@14))))) (= (MapType1Select (MapType0Select h0@@14 (o@@58!816!86 h0@@14 t2@@4 t1@@27 t0@@51 bx1@@4 bx0@@18 f@@31 h1@@14)) (fld@@13!816!87 h0@@14 t2@@4 t1@@27 t0@@51 bx1@@4 bx0@@18 f@@31 h1@@14)) (MapType1Select (MapType0Select h1@@14 (o@@58!816!86 h0@@14 t2@@4 t1@@27 t0@@51 bx1@@4 bx0@@18 f@@31 h1@@14)) (fld@@13!816!87 h0@@14 t2@@4 t1@@27 t0@@51 bx1@@4 bx0@@18 f@@31 h1@@14))))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))) :pattern (($HeapSucc h0@@14 h1@@14)
               (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)) :skolemid |817| :qid |unknown.0:0!205|)))
(assert (forall ((t0@@52 T@U)(t1@@28 T@U)(t2@@5 T@U)(h0@@15 T@U)(h1@@15 T@U)(f@@32 T@U)(bx0@@19 T@U)(bx1@@5 T@U)) (! (or (not (and (= (type t0@@52) TyType) (= (type t1@@28) TyType) (= (type t2@@5) TyType) (= (type h0@@15) (MapType0Type refType MapType1Type)) (= (type h1@@15) (MapType0Type refType MapType1Type)) (= (type f@@32) HandleTypeType) (= (type bx0@@19) BoxType) (= (type bx1@@5) BoxType))) (not (and ($HeapSucc h0@@15 h1@@15) ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15) ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (not (=> (and (= (type (o@@59!818!89 bx1@@5 bx0@@19 f@@32 h1@@15 h0@@15 t2@@5 t1@@28 t0@@52)) refType) (= (type (fld@@14!818!88 bx1@@5 bx0@@19 f@@32 h1@@15 h0@@15 t2@@5 t1@@28 t0@@52)) (FieldType (FieldTypeInv0 (type (fld@@14!818!88 bx1@@5 bx0@@19 f@@32 h1@@15 h0@@15 t2@@5 t1@@28 t0@@52))))) (not (= (o@@59!818!89 bx1@@5 bx0@@19 f@@32 h1@@15 h0@@15 t2@@5 t1@@28 t0@@52) null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box (o@@59!818!89 bx1@@5 bx0@@19 f@@32 h1@@15 h0@@15 t2@@5 t1@@28 t0@@52))))) (= (MapType1Select (MapType0Select h0@@15 (o@@59!818!89 bx1@@5 bx0@@19 f@@32 h1@@15 h0@@15 t2@@5 t1@@28 t0@@52)) (fld@@14!818!88 bx1@@5 bx0@@19 f@@32 h1@@15 h0@@15 t2@@5 t1@@28 t0@@52)) (MapType1Select (MapType0Select h1@@15 (o@@59!818!89 bx1@@5 bx0@@19 f@@32 h1@@15 h0@@15 t2@@5 t1@@28 t0@@52)) (fld@@14!818!88 bx1@@5 bx0@@19 f@@32 h1@@15 h0@@15 t2@@5 t1@@28 t0@@52))))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))) :pattern (($HeapSucc h0@@15 h1@@15)
               (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)) :skolemid |819| :qid |unknown.0:0!216|)))
(assert (forall ((t0@@53 T@U)(t1@@29 T@U)(t2@@6 T@U)(h0@@16 T@U)(h1@@16 T@U)(f@@33 T@U)(bx0@@20 T@U)(bx1@@6 T@U)) (! (or (not (and (= (type t0@@53) TyType) (= (type t1@@29) TyType) (= (type t2@@6) TyType) (= (type h0@@16) (MapType0Type refType MapType1Type)) (= (type h1@@16) (MapType0Type refType MapType1Type)) (= (type f@@33) HandleTypeType) (= (type bx0@@20) BoxType) (= (type bx1@@6) BoxType))) (not (and ($HeapSucc h0@@16 h1@@16) ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16) ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (not (=> (and (= (type (o@@60!820!91 bx1@@6 bx0@@20 f@@33 h1@@16 h0@@16 t2@@6 t1@@29 t0@@53)) refType) (= (type (fld@@15!820!90 bx1@@6 bx0@@20 f@@33 h1@@16 h0@@16 t2@@6 t1@@29 t0@@53)) (FieldType (FieldTypeInv0 (type (fld@@15!820!90 bx1@@6 bx0@@20 f@@33 h1@@16 h0@@16 t2@@6 t1@@29 t0@@53))))) (not (= (o@@60!820!91 bx1@@6 bx0@@20 f@@33 h1@@16 h0@@16 t2@@6 t1@@29 t0@@53) null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box (o@@60!820!91 bx1@@6 bx0@@20 f@@33 h1@@16 h0@@16 t2@@6 t1@@29 t0@@53))))) (= (MapType1Select (MapType0Select h0@@16 (o@@60!820!91 bx1@@6 bx0@@20 f@@33 h1@@16 h0@@16 t2@@6 t1@@29 t0@@53)) (fld@@15!820!90 bx1@@6 bx0@@20 f@@33 h1@@16 h0@@16 t2@@6 t1@@29 t0@@53)) (MapType1Select (MapType0Select h1@@16 (o@@60!820!91 bx1@@6 bx0@@20 f@@33 h1@@16 h0@@16 t2@@6 t1@@29 t0@@53)) (fld@@15!820!90 bx1@@6 bx0@@20 f@@33 h1@@16 h0@@16 t2@@6 t1@@29 t0@@53))))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))) :pattern (($HeapSucc h0@@16 h1@@16)
               (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)) :skolemid |821| :qid |unknown.0:0!228|)))
(assert (forall ((bx0@@21 T@U)(bx1@@7 T@U)(t0@@54 T@U)(t1@@30 T@U)(t2@@7 T@U)(h0@@17 T@U)(h1@@17 T@U)(f@@34 T@U)) (! (or (not (and (= (type t0@@54) TyType) (= (type t1@@30) TyType) (= (type t2@@7) TyType) (= (type h0@@17) (MapType0Type refType MapType1Type)) (= (type h1@@17) (MapType0Type refType MapType1Type)) (= (type f@@34) HandleTypeType) (= (type bx0@@21) BoxType) (= (type bx1@@7) BoxType))) (not (and ($HeapSucc h0@@17 h1@@17) ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17) ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (not (=> (and (= (type (o@@61!822!93 f@@34 h1@@17 h0@@17 t2@@7 t1@@30 t0@@54 bx1@@7 bx0@@21)) refType) (= (type (fld@@16!822!92 f@@34 h1@@17 h0@@17 t2@@7 t1@@30 t0@@54 bx1@@7 bx0@@21)) (FieldType (FieldTypeInv0 (type (fld@@16!822!92 f@@34 h1@@17 h0@@17 t2@@7 t1@@30 t0@@54 bx1@@7 bx0@@21))))) (not (= (o@@61!822!93 f@@34 h1@@17 h0@@17 t2@@7 t1@@30 t0@@54 bx1@@7 bx0@@21) null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box (o@@61!822!93 f@@34 h1@@17 h0@@17 t2@@7 t1@@30 t0@@54 bx1@@7 bx0@@21))))) (= (MapType1Select (MapType0Select h0@@17 (o@@61!822!93 f@@34 h1@@17 h0@@17 t2@@7 t1@@30 t0@@54 bx1@@7 bx0@@21)) (fld@@16!822!92 f@@34 h1@@17 h0@@17 t2@@7 t1@@30 t0@@54 bx1@@7 bx0@@21)) (MapType1Select (MapType0Select h1@@17 (o@@61!822!93 f@@34 h1@@17 h0@@17 t2@@7 t1@@30 t0@@54 bx1@@7 bx0@@21)) (fld@@16!822!92 f@@34 h1@@17 h0@@17 t2@@7 t1@@30 t0@@54 bx1@@7 bx0@@21))))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))) :pattern (($HeapSucc h0@@17 h1@@17)
               (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)) :skolemid |823| :qid |unknown.0:0!237|)))
(assert (forall ((t0@@55 T@U)(t1@@31 T@U)(t2@@8 T@U)(heap@@14 T@U)(f@@35 T@U)(bx0@@22 T@U)(bx1@@8 T@U)) (! (=> (and (= (type t0@@55) TyType) (= (type t1@@31) TyType) (= (type t2@@8) TyType) (= (type heap@@14) (MapType0Type refType MapType1Type)) (= (type f@@35) HandleTypeType) (= (type bx0@@22) BoxType) (= (type bx1@@8) BoxType) ($IsGoodHeap heap@@14) ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)))) :pattern ((Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8)
               ($IsGoodHeap heap@@14)) :pattern ((Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8)) :skolemid |824| :qid |unknown.0:0!244|)))
(assert (forall ((t0@@56 T@U)(t1@@32 T@U)(t2@@9 T@U)(heap@@15 T@U)(f@@36 T@U)(bx0@@23 T@U)(bx1@@9 T@U)) (! (=> (and (= (type t0@@56) TyType) (= (type t1@@32) TyType) (= (type t2@@9) TyType) (= (type heap@@15) (MapType0Type refType MapType1Type)) (= (type f@@36) HandleTypeType) (= (type bx0@@23) BoxType) (= (type bx1@@9) BoxType) ($IsGoodHeap heap@@15) ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9))) :pattern ((Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9)) :pattern ((Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9)
               ($IsGoodHeap heap@@15)) :skolemid |825| :qid |unknown.0:0!250|)))
(assert (forall ((t1@@33 T@U)(t2@@10 T@U)(f@@37 T@U)(t0@@57 T@U)) (! (or (not (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType) (= (type t1@@33) TyType) (= (type t2@@10) TyType))) (and (or (not ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) (forall ((h@@36 T@U)(bx0@@24 T@U)(bx1@@10 T@U)) (! (=> (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType) (= (type bx1@@10) BoxType) ($IsGoodHeap h@@36) ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10)) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10)) :pattern ((Apply2 t0@@57
                                       t1@@33
                                       t2@@10
                                       h@@36
                                       f@@37
                                       bx0@@24
                                       bx1@@10)) :skolemid |826| :qid |DafnyPreludebpl.545:12!255|))) (or ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (not (=> (and (= (type (h@@36!826!96 t2@@10 t1@@33 t0@@57 f@@37)) (MapType0Type refType MapType1Type)) (= (type (bx0@@24!826!95 t2@@10 t1@@33 t0@@57 f@@37)) BoxType) (= (type (bx1@@10!826!94 t2@@10 t1@@33 t0@@57 f@@37)) BoxType) ($IsGoodHeap (h@@36!826!96 t2@@10 t1@@33 t0@@57 f@@37)) ($IsBox (bx0@@24!826!95 t2@@10 t1@@33 t0@@57 f@@37) t0@@57) ($IsBox (bx1@@10!826!94 t2@@10 t1@@33 t0@@57 f@@37) t1@@33) (Requires2 t0@@57 t1@@33 t2@@10 (h@@36!826!96 t2@@10 t1@@33 t0@@57 f@@37) f@@37 (bx0@@24!826!95 t2@@10 t1@@33 t0@@57 f@@37) (bx1@@10!826!94 t2@@10 t1@@33 t0@@57 f@@37))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 (h@@36!826!96 t2@@10 t1@@33 t0@@57 f@@37) f@@37 (bx0@@24!826!95 t2@@10 t1@@33 t0@@57 f@@37) (bx1@@10!826!94 t2@@10 t1@@33 t0@@57 f@@37)) t2@@10)))))) :pattern (($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) :skolemid |827| :qid |unknown.0:0!256|)))
(assert (forall ((f@@38 T@U)(t0@@58 T@U)(t1@@34 T@U)(t2@@11 T@U)(u0@@1 T@U)(u1@@0 T@U)(u2 T@U)) (! (or (not (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType) (= (type t1@@34) TyType) (= (type t2@@11) TyType) (= (type u0@@1) TyType) (= (type u1@@0) TyType) (= (type u2) TyType))) (not ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11))) (not (=> (and (= (type (bx@@45!828!97 u0@@1 t0@@58)) BoxType) ($IsBox (bx@@45!828!97 u0@@1 t0@@58) u0@@1)) ($IsBox (bx@@45!828!97 u0@@1 t0@@58) t0@@58))) (not (=> (and (= (type (bx@@46!829!98 u1@@0 t1@@34)) BoxType) ($IsBox (bx@@46!829!98 u1@@0 t1@@34) u1@@0)) ($IsBox (bx@@46!829!98 u1@@0 t1@@34) t1@@34))) (not (=> (and (= (type (bx@@47!830!99 u2 t2@@11)) BoxType) ($IsBox (bx@@47!830!99 u2 t2@@11) t2@@11)) ($IsBox (bx@@47!830!99 u2 t2@@11) u2))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :pattern (($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11))
               ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :skolemid |831| :qid |unknown.0:0!267|)))
(assert (forall ((f@@39 T@U)(t0@@59 T@U)(t1@@35 T@U)(t2@@12 T@U)(h@@37 T@U)) (! (or (not (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType) (= (type t1@@35) TyType) (= (type t2@@12) TyType) (= (type h@@37) (MapType0Type refType MapType1Type)) ($IsGoodHeap h@@37))) (and (or (not ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37)) (forall ((bx0@@25 T@U)(bx1@@11 T@U)) (! (or (not (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType))) (not (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37) ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11))) (forall ((r@@17 T@U)) (! (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc)))) :pattern ((MapType0Select (Reads2 t0@@59
                                                                       t1@@35
                                                                       t2@@12
                                                                       h@@37
                                                                       f@@39
                                                                       bx0@@25
                                                                       bx1@@11)
                                                               ($Box r@@17))) :skolemid |832| :qid |unknown.0:0!274|))) :pattern ((Reads2 t0@@59
                                       t1@@35
                                       t2@@12
                                       h@@37
                                       f@@39
                                       bx0@@25
                                       bx1@@11)) :pattern ((Apply2 t0@@59
                                       t1@@35
                                       t2@@12
                                       h@@37
                                       f@@39
                                       bx0@@25
                                       bx1@@11)) :skolemid |833| :qid |unknown.0:0!275|))) (or ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (and (= (type (bx0@@25!833!101 h@@37 t2@@12 t1@@35 t0@@59 f@@39)) BoxType) (= (type (bx1@@11!833!100 h@@37 t2@@12 t1@@35 t0@@59 f@@39)) BoxType) ($IsBox (bx0@@25!833!101 h@@37 t2@@12 t1@@35 t0@@59 f@@39) t0@@59) ($IsAllocBox (bx0@@25!833!101 h@@37 t2@@12 t1@@35 t0@@59 f@@39) t0@@59 h@@37) ($IsBox (bx1@@11!833!100 h@@37 t2@@12 t1@@35 t0@@59 f@@39) t1@@35) ($IsAllocBox (bx1@@11!833!100 h@@37 t2@@12 t1@@35 t0@@59 f@@39) t1@@35 h@@37) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 (bx0@@25!833!101 h@@37 t2@@12 t1@@35 t0@@59 f@@39) (bx1@@11!833!100 h@@37 t2@@12 t1@@35 t0@@59 f@@39)) (not (=> (= (type (r@@17!832!102 h@@37 t2@@12 t1@@35 t0@@59 f@@39)) refType) (=> (and (not (= (r@@17!832!102 h@@37 t2@@12 t1@@35 t0@@59 f@@39) null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 (bx0@@25!833!101 h@@37 t2@@12 t1@@35 t0@@59 f@@39) (bx1@@11!833!100 h@@37 t2@@12 t1@@35 t0@@59 f@@39)) ($Box (r@@17!832!102 h@@37 t2@@12 t1@@35 t0@@59 f@@39))))) (U_2_bool (MapType1Select (MapType0Select h@@37 (r@@17!832!102 h@@37 t2@@12 t1@@35 t0@@59 f@@39)) alloc))))))))) :pattern (($IsAlloc f@@39
                         (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12)
                         h@@37)) :skolemid |834| :qid |unknown.0:0!276|)))
(assert (forall ((f@@40 T@U)(t0@@60 T@U)(t1@@36 T@U)(t2@@13 T@U)(h@@38 T@U)) (! (or (not (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType) (= (type t1@@36) TyType) (= (type t2@@13) TyType) (= (type h@@38) (MapType0Type refType MapType1Type)) ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U)(bx1@@12 T@U)) (! (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38))) :pattern ((Apply2 t0@@60
                                       t1@@36
                                       t2@@13
                                       h@@38
                                       f@@40
                                       bx0@@26
                                       bx1@@12)) :skolemid |835| :qid |unknown.0:0!282|))) :pattern (($IsAlloc f@@40
                         (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13)
                         h@@38)) :skolemid |836| :qid |unknown.0:0!284|)))
(assert (forall ((arg0@@159 T@U)(arg1@@78 T@U)(arg2@@30 T@U)) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) TyType) :pattern ((Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) :qid |funType:Tclass._System.___hPartialFunc2|)))
(assert (forall ((|#$T0@@20| T@U)(|#$T1@@4| T@U)(|#$R@@33| T@U)) (! (=> (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|))) :pattern ((Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) :skolemid |837| :qid |unknown.0:0!288|)))
(assert (forall ((arg0@@160 T@U)) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@160)) TyType) :pattern ((Tclass._System.___hPartialFunc2_0 arg0@@160)) :qid |funType:Tclass._System.___hPartialFunc2_0|)))
(assert (forall ((|#$T0@@21| T@U)(|#$T1@@5| T@U)(|#$R@@34| T@U)) (! (=> (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|)) :pattern ((Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) :skolemid |838| :qid |unknown.0:0!291|)))
(assert (forall ((arg0@@161 T@U)) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@161)) TyType) :pattern ((Tclass._System.___hPartialFunc2_1 arg0@@161)) :qid |funType:Tclass._System.___hPartialFunc2_1|)))
(assert (forall ((|#$T1@@6| T@U)(|#$R@@35| T@U)(|#$T0@@22| T@U)) (! (=> (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|)) :pattern ((Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) :skolemid |839| :qid |unknown.0:0!294|)))
(assert (forall ((arg0@@162 T@U)) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@162)) TyType) :pattern ((Tclass._System.___hPartialFunc2_2 arg0@@162)) :qid |funType:Tclass._System.___hPartialFunc2_2|)))
(assert (forall ((|#$T0@@23| T@U)(|#$T1@@7| T@U)(|#$R@@36| T@U)) (! (=> (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|)) :pattern ((Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) :skolemid |840| :qid |unknown.0:0!297|)))
(assert (forall ((|#$T0@@24| T@U)(|#$T1@@8| T@U)(|#$R@@37| T@U)(bx@@48 T@U)) (! (=> (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType) (= (type |#$R@@37|) TyType) (= (type bx@@48) BoxType) ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@48)) bx@@48) ($Is ($Unbox HandleTypeType bx@@48) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))) :pattern (($IsBox bx@@48
                       (Tclass._System.___hPartialFunc2
                         |#$T0@@24|
                         |#$T1@@8|
                         |#$R@@37|))) :skolemid |841| :qid |unknown.0:0!300|)))
(assert (forall ((|#$T1@@9| T@U)(|#$R@@38| T@U)(|f#0@@7| T@U)(|#$T0@@25| T@U)) (! (or (not (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType) (= (type |#$R@@38|) TyType) (= (type |f#0@@7|) HandleTypeType))) (and (or (not ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U)(|x1#0| T@U)) (! (=> (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType) ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|)) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType))) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (type |x1#0|) :no-pattern (U_2_bool |x1#0|) :no-pattern (type |x0#0@@1|) :skolemid |842| :qid |unknown.0:0!302|)))) (or ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (not ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) (not (=> (and (= (type (|x0#0@@1!842!104| |#$R@@38| |#$T1@@9| |#$T0@@25| |f#0@@7|)) BoxType) (= (type (|x1#0!842!103| |#$R@@38| |#$T1@@9| |#$T0@@25| |f#0@@7|)) BoxType) ($IsBox (|x0#0@@1!842!104| |#$R@@38| |#$T1@@9| |#$T0@@25| |f#0@@7|) |#$T0@@25|) ($IsBox (|x1#0!842!103| |#$R@@38| |#$T1@@9| |#$T0@@25| |f#0@@7|) |#$T1@@9|)) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| (|x0#0@@1!842!104| |#$R@@38| |#$T1@@9| |#$T0@@25| |f#0@@7|) (|x1#0!842!103| |#$R@@38| |#$T1@@9| |#$T0@@25| |f#0@@7|)) (|Set#Empty| BoxType))))))) :pattern (($Is |f#0@@7|
                    (Tclass._System.___hPartialFunc2
                      |#$T0@@25|
                      |#$T1@@9|
                      |#$R@@38|))) :skolemid |843| :qid |unknown.0:0!304|)))
(assert (forall ((|#$T0@@26| T@U)(|#$T1@@10| T@U)(|#$R@@39| T@U)(|f#0@@8| T@U)($h@@12 T@U)) (! (=> (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType) (= (type |#$R@@39|) TyType) (= (type |f#0@@8|) HandleTypeType) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))) :pattern (($IsAlloc |f#0@@8|
                         (Tclass._System.___hPartialFunc2
                           |#$T0@@26|
                           |#$T1@@10|
                           |#$R@@39|)
                         $h@@12)) :skolemid |844| :qid |unknown.0:0!307|)))
(assert (forall ((arg0@@163 T@U)(arg1@@79 T@U)(arg2@@31 T@U)) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) TyType) :pattern ((Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) :qid |funType:Tclass._System.___hTotalFunc2|)))
(assert (forall ((|#$T0@@27| T@U)(|#$T1@@11| T@U)(|#$R@@40| T@U)) (! (=> (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|))) :pattern ((Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) :skolemid |845| :qid |unknown.0:0!310|)))
(assert (forall ((arg0@@164 T@U)) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@164)) TyType) :pattern ((Tclass._System.___hTotalFunc2_0 arg0@@164)) :qid |funType:Tclass._System.___hTotalFunc2_0|)))
(assert (forall ((|#$T1@@12| T@U)(|#$R@@41| T@U)(|#$T0@@28| T@U)) (! (=> (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|)) :pattern ((Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) :skolemid |846| :qid |unknown.0:0!312|)))
(assert (forall ((arg0@@165 T@U)) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@165)) TyType) :pattern ((Tclass._System.___hTotalFunc2_1 arg0@@165)) :qid |funType:Tclass._System.___hTotalFunc2_1|)))
(assert (forall ((|#$T0@@29| T@U)(|#$T1@@13| T@U)(|#$R@@42| T@U)) (! (=> (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|)) :pattern ((Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) :skolemid |847| :qid |unknown.0:0!315|)))
(assert (forall ((arg0@@166 T@U)) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@166)) TyType) :pattern ((Tclass._System.___hTotalFunc2_2 arg0@@166)) :qid |funType:Tclass._System.___hTotalFunc2_2|)))
(assert (forall ((|#$T0@@30| T@U)(|#$T1@@14| T@U)(|#$R@@43| T@U)) (! (=> (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|)) :pattern ((Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) :skolemid |848| :qid |unknown.0:0!320|)))
(assert (forall ((|#$T0@@31| T@U)(|#$T1@@15| T@U)(|#$R@@44| T@U)(bx@@49 T@U)) (! (=> (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType) (= (type |#$R@@44|) TyType) (= (type bx@@49) BoxType) ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :pattern (($IsBox bx@@49
                       (Tclass._System.___hTotalFunc2
                         |#$T0@@31|
                         |#$T1@@15|
                         |#$R@@44|))) :skolemid |849| :qid |unknown.0:0|)))
(assert (forall ((|#$T1@@16| T@U)(|#$R@@45| T@U)(|f#0@@9| T@U)(|#$T0@@32| T@U)) (! (or (not (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType) (= (type |#$R@@45|) TyType) (= (type |f#0@@9|) HandleTypeType))) (and (or (not ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U)(|x1#0@@0| T@U)) (! (=> (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType) ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|)) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|)) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_bool |x1#0@@0|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (type |x0#0@@2|) :no-pattern (U_2_int |x1#0@@0|) :skolemid |850| :qid |unknown.0:0!4|)))) (or ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (not ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) (not (=> (and (= (type (|x0#0@@2!850!106| |#$T0@@32| |f#0@@9| |#$R@@45| |#$T1@@16|)) BoxType) (= (type (|x1#0@@0!850!105| |#$T0@@32| |f#0@@9| |#$R@@45| |#$T1@@16|)) BoxType) ($IsBox (|x0#0@@2!850!106| |#$T0@@32| |f#0@@9| |#$R@@45| |#$T1@@16|) |#$T0@@32|) ($IsBox (|x1#0@@0!850!105| |#$T0@@32| |f#0@@9| |#$R@@45| |#$T1@@16|) |#$T1@@16|)) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| (|x0#0@@2!850!106| |#$T0@@32| |f#0@@9| |#$R@@45| |#$T1@@16|) (|x1#0@@0!850!105| |#$T0@@32| |f#0@@9| |#$R@@45| |#$T1@@16|))))))) :pattern (($Is |f#0@@9|
                    (Tclass._System.___hTotalFunc2
                      |#$T0@@32|
                      |#$T1@@16|
                      |#$R@@45|))) :skolemid |851| :qid |unknown.0:0!6|)))
(assert (forall ((|#$T0@@33| T@U)(|#$T1@@17| T@U)(|#$R@@46| T@U)(|f#0@@10| T@U)($h@@13 T@U)) (! (=> (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType) (= (type |#$R@@46|) TyType) (= (type |f#0@@10|) HandleTypeType) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))) :pattern (($IsAlloc |f#0@@10|
                         (Tclass._System.___hTotalFunc2
                           |#$T0@@33|
                           |#$T1@@17|
                           |#$R@@46|)
                         $h@@13)) :skolemid |852| :qid |unknown.0:0!9|)))
(assert (forall ((arg0@@167 T@U)) (! (= (type (DatatypeCtorId arg0@@167)) DtCtorIdType) :pattern ((DatatypeCtorId arg0@@167)) :qid |funType:DatatypeCtorId|)))
(assert (forall ((|a#0#0#0| T@U)(|a#0#1#0| T@U)) (! (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :pattern ((|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) :skolemid |853| :qid |unknown.0:0!12|)))
(assert (forall ((d@@0 T@U)) (! (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))) :pattern ((_System.Tuple2.___hMake2_q d@@0)) :skolemid |854| :qid |unknown.0:0!13|)))
(assert (forall ((d@@1 T@U)) (! (or (not (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1))) (and (= (type (|a#1#0#0!855!108| d@@1)) BoxType) (= (type (|a#1#1#0!855!107| d@@1)) BoxType) (= d@@1 (|#_System._tuple#2._#Make2| (|a#1#0#0!855!108| d@@1) (|a#1#1#0!855!107| d@@1))))) :pattern ((_System.Tuple2.___hMake2_q d@@1)) :skolemid |856| :qid |unknown.0:0!15|)))
(assert (forall ((|_System._tuple#2$T0| T@U)(|_System._tuple#2$T1| T@U)) (! (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|))) :pattern ((Tclass._System.Tuple2
                 |_System._tuple#2$T0|
                 |_System._tuple#2$T1|)) :skolemid |857| :qid |unknown.0:0!18|)))
(assert (forall ((arg0@@168 T@U)) (! (= (type (Tclass._System.Tuple2_0 arg0@@168)) TyType) :pattern ((Tclass._System.Tuple2_0 arg0@@168)) :qid |funType:Tclass._System.Tuple2_0|)))
(assert (forall ((|_System._tuple#2$T0@@0| T@U)(|_System._tuple#2$T1@@0| T@U)) (! (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|)) :pattern ((Tclass._System.Tuple2
                 |_System._tuple#2$T0@@0|
                 |_System._tuple#2$T1@@0|)) :skolemid |858| :qid |unknown.0:0!20|)))
(assert (forall ((arg0@@169 T@U)) (! (= (type (Tclass._System.Tuple2_1 arg0@@169)) TyType) :pattern ((Tclass._System.Tuple2_1 arg0@@169)) :qid |funType:Tclass._System.Tuple2_1|)))
(assert (forall ((|_System._tuple#2$T1@@1| T@U)(|_System._tuple#2$T0@@1| T@U)) (! (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|)) :pattern ((Tclass._System.Tuple2
                 |_System._tuple#2$T0@@1|
                 |_System._tuple#2$T1@@1|)) :skolemid |859| :qid |unknown.0:0!22|)))
(assert (forall ((|_System._tuple#2$T0@@2| T@U)(|_System._tuple#2$T1@@2| T@U)(bx@@50 T@U)) (! (=> (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType) (= (type bx@@50) BoxType) ($IsBox bx@@50 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@50)) bx@@50) ($Is ($Unbox DatatypeTypeType bx@@50) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :pattern (($IsBox bx@@50
                       (Tclass._System.Tuple2
                         |_System._tuple#2$T0@@2|
                         |_System._tuple#2$T1@@2|))) :skolemid |860| :qid |unknown.0:0!24|)))
(assert (forall ((|_System._tuple#2$T0@@3| T@U)(|_System._tuple#2$T1@@3| T@U)(|a#2#0#0| T@U)(|a#2#1#0| T@U)) (! (=> (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType) (= (type |a#2#0#0|) BoxType) (= (type |a#2#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|)) (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@3|)))) :pattern (($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|)
                    (Tclass._System.Tuple2
                      |_System._tuple#2$T0@@3|
                      |_System._tuple#2$T1@@3|))) :skolemid |861| :qid |unknown.0:0!28|)))
(assert (forall ((|_System._tuple#2$T0@@4| T@U)(|_System._tuple#2$T1@@4| T@U)(|a#3#0#0| T@U)(|a#3#1#0| T@U)($h@@14 T@U)) (! (=> (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType) (= (type |a#3#0#0|) BoxType) (= (type |a#3#1#0|) BoxType) (= (type $h@@14) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@14)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@14) (and ($IsAllocBox |a#3#0#0| |_System._tuple#2$T0@@4| $h@@14) ($IsAllocBox |a#3#1#0| |_System._tuple#2$T1@@4| $h@@14)))) :pattern (($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|)
                         (Tclass._System.Tuple2
                           |_System._tuple#2$T0@@4|
                           |_System._tuple#2$T1@@4|)
                         $h@@14)) :skolemid |862| :qid |unknown.0:0!35|)))
(assert (forall (($h@@15 T@U)(d@@2 T@U)(|_System._tuple#2$T0@@5| T@U)) (! (or (not (and (= (type d@@2) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType) (= (type $h@@15) (MapType0Type refType MapType1Type)))) (not ($IsGoodHeap $h@@15)) (not (_System.Tuple2.___hMake2_q d@@2)) (forall ((|_System._tuple#2$T1@@5| T@U)) (! (not (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@15))) :pattern (($IsAlloc d@@2
                                         (Tclass._System.Tuple2
                                           |_System._tuple#2$T0@@5|
                                           |_System._tuple#2$T1@@5|)
                                         $h@@15)) :skolemid |863| :qid |unknown.0:0!39|)) ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@15)) :pattern (($IsAllocBox (_System.Tuple2._0 d@@2)
                            |_System._tuple#2$T0@@5|
                            $h@@15)) :skolemid |864| :qid |unknown.0:0!42|)))
(assert (forall ((|_System._tuple#2$T1@@6| T@U)($h@@16 T@U)(d@@3 T@U)) (! (or (not (and (= (type d@@3) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType) (= (type $h@@16) (MapType0Type refType MapType1Type)))) (not ($IsGoodHeap $h@@16)) (not (_System.Tuple2.___hMake2_q d@@3)) (forall ((|_System._tuple#2$T0@@6| T@U)) (! (not (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@16))) :pattern (($IsAlloc d@@3
                                         (Tclass._System.Tuple2
                                           |_System._tuple#2$T0@@6|
                                           |_System._tuple#2$T1@@6|)
                                         $h@@16)) :skolemid |865| :qid |unknown.0:0!47|)) ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@16)) :pattern (($IsAllocBox (_System.Tuple2._1 d@@3)
                            |_System._tuple#2$T1@@6|
                            $h@@16)) :skolemid |866| :qid |unknown.0:0!50|)))
(assert (forall ((|a#4#0#0| T@U)(|a#4#1#0| T@U)) (! (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :pattern ((|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) :skolemid |867| :qid |unknown.0:0!54|)))
(assert (forall ((|a#5#0#0| T@U)(|a#5#1#0| T@U)) (! (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :pattern ((|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) :skolemid |868| :qid |unknown.0:0!59|)))
(assert (forall ((|a#6#1#0| T@U)(|a#6#0#0| T@U)) (! (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :pattern ((|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) :skolemid |869| :qid |unknown.0:0!61|)))
(assert (forall ((|a#7#0#0| T@U)(|a#7#1#0| T@U)) (! (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :pattern ((|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) :skolemid |870| :qid |unknown.0:0!64|)))
(assert (forall ((|a#8#0#0| T@U)(|a#8#1#0| T@U)) (! (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :pattern ((|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) :skolemid |871| :qid |unknown.0:0!67|)))
(assert (forall ((d@@4 T@U)) (! (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :pattern ((|$IsA#_System.Tuple2| d@@4)) :skolemid |872| :qid |unknown.0:0!70|)))
(assert (forall ((|_System._tuple#2$T0@@7| T@U)(|_System._tuple#2$T1@@7| T@U)(d@@5 T@U)) (! (=> (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType) (= (type d@@5) DatatypeTypeType) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@5)) :pattern ((_System.Tuple2.___hMake2_q d@@5)
               ($Is d@@5
                    (Tclass._System.Tuple2
                      |_System._tuple#2$T0@@7|
                      |_System._tuple#2$T1@@7|))) :skolemid |873| :qid |unknown.0:0!73|)))
(assert (forall ((a@@100 T@U)(b@@61 T@U)) (! (=> (and (= (type a@@100) DatatypeTypeType) (= (type b@@61) DatatypeTypeType) true) (= (|_System.Tuple2#Equal| a@@100 b@@61) (and (= (_System.Tuple2._0 a@@100) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@100) (_System.Tuple2._1 b@@61))))) :pattern ((|_System.Tuple2#Equal| a@@100 b@@61)) :skolemid |874| :qid |unknown.0:0!77|)))
(assert (forall ((a@@101 T@U)(b@@62 T@U)) (! (=> (and (= (type a@@101) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@101 b@@62) (= a@@101 b@@62))) :pattern ((|_System.Tuple2#Equal| a@@101 b@@62)) :skolemid |875| :qid |unknown.0:0!80|)))
(assert (forall ((d@@6 T@U)) (! (=> (= (type d@@6) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|))) :pattern ((_System.Tuple0.___hMake0_q d@@6)) :skolemid |876| :qid |unknown.0:0!83|)))
(assert (forall ((d@@7 T@U)) (! (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :pattern ((_System.Tuple0.___hMake0_q d@@7)) :skolemid |877| :qid |unknown.0:0!85|)))
(assert (forall ((bx@@51 T@U)) (! (=> (and (= (type bx@@51) BoxType) ($IsBox bx@@51 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@51)) bx@@51) ($Is ($Unbox DatatypeTypeType bx@@51) Tclass._System.Tuple0))) :pattern (($IsBox bx@@51 Tclass._System.Tuple0)) :skolemid |878| :qid |unknown.0:0!88|)))
(assert (forall (($h@@17 T@U)) (! (=> (and (= (type $h@@17) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@17)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@17)) :pattern (($IsAlloc |#_System._tuple#0._#Make0|
                         Tclass._System.Tuple0
                         $h@@17)) :skolemid |879| :qid |DafnyPreludebpl.545:12!93|)))
(assert (forall ((d@@8 T@U)) (! (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :pattern ((|$IsA#_System.Tuple0| d@@8)) :skolemid |880| :qid |unknown.0:0!95|)))
(assert (forall ((d@@9 T@U)) (! (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :pattern ((_System.Tuple0.___hMake0_q d@@9)
               ($Is d@@9 Tclass._System.Tuple0)) :skolemid |881| :qid |unknown.0:0!98|)))
(assert (forall ((b@@63 T@U)(a@@102 T@U)) (! (=> (and (= (type a@@102) DatatypeTypeType) (= (type b@@63) DatatypeTypeType) true) (= (|_System.Tuple0#Equal| a@@102 b@@63) true)) :pattern ((|_System.Tuple0#Equal| a@@102 b@@63)) :skolemid |882| :qid |unknown.0:0!101|)))
(assert (forall ((a@@103 T@U)(b@@64 T@U)) (! (=> (and (= (type a@@103) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@103 b@@64) (= a@@103 b@@64))) :pattern ((|_System.Tuple0#Equal| a@@103 b@@64)) :skolemid |883| :qid |unknown.0:0!103|)))
(assert (forall ((arg0@@170 T@U)) (! (= (type (|#Test.ChildMap.ChildMap| arg0@@170)) DatatypeTypeType) :pattern ((|#Test.ChildMap.ChildMap| arg0@@170)) :qid |funType:#Test.ChildMap.ChildMap|)))
(assert (forall ((|a#14#0#0| T@U)) (! (=> (= (type |a#14#0#0|) (IMapType BoxType BoxType)) (= (DatatypeCtorId (|#Test.ChildMap.ChildMap| |a#14#0#0|)) |##Test.ChildMap.ChildMap|)) :pattern ((|#Test.ChildMap.ChildMap| |a#14#0#0|)) :skolemid |884| :qid |Testidfy.6:30|)))
(assert (forall ((d@@10 T@U)) (! (=> (= (type d@@10) DatatypeTypeType) (= (Test.ChildMap.ChildMap_q d@@10) (= (DatatypeCtorId d@@10) |##Test.ChildMap.ChildMap|))) :pattern ((Test.ChildMap.ChildMap_q d@@10)) :skolemid |885| :qid |unknown.0:0!108|)))
(assert (forall ((d@@11 T@U)) (! (or (not (and (= (type d@@11) DatatypeTypeType) (Test.ChildMap.ChildMap_q d@@11))) (and (= (type (|a#15#0#0!886!109| d@@11)) (IMapType BoxType BoxType)) (= d@@11 (|#Test.ChildMap.ChildMap| (|a#15#0#0!886!109| d@@11))))) :pattern ((Test.ChildMap.ChildMap_q d@@11)) :skolemid |887| :qid |unknown.0:0!112|)))
(assert (forall ((bx@@52 T@U)) (! (=> (and (= (type bx@@52) BoxType) ($IsBox bx@@52 Tclass.Common.Key)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@52)) bx@@52) ($Is ($Unbox (SeqType BoxType) bx@@52) Tclass.Common.Key))) :pattern (($IsBox bx@@52 Tclass.Common.Key)) :skolemid |888| :qid |unknown.0:0!115|)))
(assert (forall ((bx@@53 T@U)) (! (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 Tclass.Test.BetreeNode)) (and (= ($Box ($Unbox DatatypeTypeType bx@@53)) bx@@53) ($Is ($Unbox DatatypeTypeType bx@@53) Tclass.Test.BetreeNode))) :pattern (($IsBox bx@@53 Tclass.Test.BetreeNode)) :skolemid |889| :qid |unknown.0:0!118|)))
(assert (forall ((bx@@54 T@U)) (! (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 Tclass.Test.ChildMap)) (and (= ($Box ($Unbox DatatypeTypeType bx@@54)) bx@@54) ($Is ($Unbox DatatypeTypeType bx@@54) Tclass.Test.ChildMap))) :pattern (($IsBox bx@@54 Tclass.Test.ChildMap)) :skolemid |890| :qid |unknown.0:0!120|)))
(assert (forall ((|a#16#0#0| T@U)) (! (=> (= (type |a#16#0#0|) (IMapType BoxType BoxType)) (= ($Is (|#Test.ChildMap.ChildMap| |a#16#0#0|) Tclass.Test.ChildMap) ($Is |a#16#0#0| (TIMap Tclass.Common.Key Tclass.Test.BetreeNode)))) :pattern (($Is (|#Test.ChildMap.ChildMap| |a#16#0#0|) Tclass.Test.ChildMap)) :skolemid |891| :qid |Testidfy.6:30!123|)))
(assert (forall ((|a#17#0#0| T@U)($h@@18 T@U)) (! (=> (and (= (type |a#17#0#0|) (IMapType BoxType BoxType)) (= (type $h@@18) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@18)) (= ($IsAlloc (|#Test.ChildMap.ChildMap| |a#17#0#0|) Tclass.Test.ChildMap $h@@18) ($IsAlloc |a#17#0#0| (TIMap Tclass.Common.Key Tclass.Test.BetreeNode) $h@@18))) :pattern (($IsAlloc (|#Test.ChildMap.ChildMap| |a#17#0#0|)
                         Tclass.Test.ChildMap
                         $h@@18)) :skolemid |892| :qid |Testidfy.6:30!124|)))
(assert (forall ((arg0@@171 T@U)) (! (= (type (Test.ChildMap.mapp arg0@@171)) (IMapType BoxType BoxType)) :pattern ((Test.ChildMap.mapp arg0@@171)) :qid |funType:Test.ChildMap.mapp|)))
(assert (forall (($h@@19 T@U)(d@@12 T@U)) (! (=> (and (= (type d@@12) DatatypeTypeType) (= (type $h@@19) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@19) (Test.ChildMap.ChildMap_q d@@12) ($IsAlloc d@@12 Tclass.Test.ChildMap $h@@19)) ($IsAlloc (Test.ChildMap.mapp d@@12) (TIMap Tclass.Common.Key Tclass.Test.BetreeNode) $h@@19)) :pattern (($IsAlloc (Test.ChildMap.mapp d@@12)
                         (TIMap Tclass.Common.Key Tclass.Test.BetreeNode)
                         $h@@19)) :skolemid |893| :qid |unknown.0:0!127|)))
(assert (forall ((|a#18#0#0| T@U)) (! (=> (= (type |a#18#0#0|) (IMapType BoxType BoxType)) (= (|#Test.ChildMap.ChildMap| (Lit |a#18#0#0|)) (Lit (|#Test.ChildMap.ChildMap| |a#18#0#0|)))) :pattern ((|#Test.ChildMap.ChildMap| (Lit |a#18#0#0|))) :skolemid |894| :qid |Testidfy.6:30!130|)))
(assert (forall ((|a#19#0#0| T@U)) (! (=> (= (type |a#19#0#0|) (IMapType BoxType BoxType)) (= (Test.ChildMap.mapp (|#Test.ChildMap.ChildMap| |a#19#0#0|)) |a#19#0#0|)) :pattern ((|#Test.ChildMap.ChildMap| |a#19#0#0|)) :skolemid |895| :qid |Testidfy.6:30!131|)))
(assert (forall ((|a#20#0#0| T@U)(d@@13 T@U)) (! (=> (and (= (type |a#20#0#0|) (IMapType BoxType BoxType)) (= (type d@@13) DatatypeTypeType) (U_2_bool (MapType0Select (|IMap#Domain| |a#20#0#0|) ($Box d@@13)))) (< (DtRank d@@13) (DtRank (|#Test.ChildMap.ChildMap| |a#20#0#0|)))) :pattern ((MapType0Select (|IMap#Domain| |a#20#0#0|) ($Box d@@13))
               (|#Test.ChildMap.ChildMap| |a#20#0#0|)) :skolemid |896| :qid |Testidfy.6:30!134|)))
(assert (forall ((|a#21#0#0| T@U)(bx@@55 T@U)) (! (=> (and (= (type |a#21#0#0|) (IMapType BoxType BoxType)) (= (type bx@@55) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| |a#21#0#0|) bx@@55))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#21#0#0|) bx@@55))) (DtRank (|#Test.ChildMap.ChildMap| |a#21#0#0|)))) :pattern ((MapType0Select (|IMap#Domain| |a#21#0#0|) bx@@55)
               (|#Test.ChildMap.ChildMap| |a#21#0#0|)) :skolemid |897| :qid |Testidfy.6:30!137|)))
(assert (forall ((d@@14 T@U)) (! (=> (and (= (type d@@14) DatatypeTypeType) (|$IsA#Test.ChildMap| d@@14)) (Test.ChildMap.ChildMap_q d@@14)) :pattern ((|$IsA#Test.ChildMap| d@@14)) :skolemid |898| :qid |unknown.0:0!138|)))
(assert (forall ((d@@15 T@U)) (! (=> (and (= (type d@@15) DatatypeTypeType) ($Is d@@15 Tclass.Test.ChildMap)) (Test.ChildMap.ChildMap_q d@@15)) :pattern ((Test.ChildMap.ChildMap_q d@@15)
               ($Is d@@15 Tclass.Test.ChildMap)) :skolemid |899| :qid |unknown.0:0!140|)))
(assert (forall ((a@@104 T@U)(b@@65 T@U)) (! (=> (and (= (type a@@104) DatatypeTypeType) (= (type b@@65) DatatypeTypeType) true) (= (|Test.ChildMap#Equal| a@@104 b@@65) (|IMap#Equal| (Test.ChildMap.mapp a@@104) (Test.ChildMap.mapp b@@65)))) :pattern ((|Test.ChildMap#Equal| a@@104 b@@65)) :skolemid |900| :qid |unknown.0:0!142|)))
(assert (forall ((b@@66 T@U)(a@@105 T@U)) (! (=> (and (= (type a@@105) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (= (|Test.ChildMap#Equal| a@@105 b@@66) (= a@@105 b@@66))) :pattern ((|Test.ChildMap#Equal| a@@105 b@@66)) :skolemid |901| :qid |unknown.0:0!143|)))
(assert (forall (($ly T@U)(this T@U)) (! (=> (and (= (type $ly) LayerTypeType) (= (type this) DatatypeTypeType)) (= (Test.ChildMap.WF ($LS $ly) this) (Test.ChildMap.WF $ly this))) :pattern ((Test.ChildMap.WF ($LS $ly) this)) :skolemid |902| :qid |Testidfy.7:15|)))
(assert (forall ((arg0@@172 T@U)) (! (= (type (AsFuelBottom arg0@@172)) LayerTypeType) :pattern ((AsFuelBottom arg0@@172)) :qid |funType:AsFuelBottom|)))
(assert (! (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U)(this@@0 T@U)) (! (=> (and (= (type $ly@@0) LayerTypeType) (= (type this@@0) DatatypeTypeType)) (= (Test.ChildMap.WF $ly@@0 this@@0) (Test.ChildMap.WF $LZ this@@0))) :pattern ((Test.ChildMap.WF (AsFuelBottom $ly@@0) this@@0)) :skolemid |903| :qid |Testidfy.7:15!145|)))
(assert (forall (($ly@@2 T@U)(this@@2 T@U)) (! (=> (and (= (type $ly@@2) LayerTypeType) (= (type this@@2) DatatypeTypeType) ($Is this@@2 Tclass.Test.ChildMap)) (= (|Test.ChildMap.WF#requires| $ly@@2 this@@2) true)) :pattern ((|Test.ChildMap.WF#requires| $ly@@2 this@@2)) :skolemid |905| :qid |Testidfy.7:15!147|)))
(assert (! (or (not (<= 5 $FunctionContextHeight)) (forall (($ly@@3 T@U)(this@@3 T@U)) (! (or (not (and (= (type $ly@@3) LayerTypeType) (= (type this@@3) DatatypeTypeType) (or (|Test.ChildMap.WF#canCall| this@@3) (and (not (= 5 $FunctionContextHeight)) ($Is this@@3 Tclass.Test.ChildMap))))) (and (Test.ChildMap.ChildMap_q this@@3) (|Common.__default.TotalSet#canCall| (|IMap#Domain| (Test.ChildMap.mapp this@@3))) (or (not (Common.__default.TotalSet (|IMap#Domain| (Test.ChildMap.mapp this@@3)))) (forall ((|k#0| T@U)) (! (=> (and (= (type |k#0|) (SeqType BoxType)) ($Is |k#0| Tclass.Common.Key)) (and (|Common.__default.AnyKey#canCall| |k#0|) (=> (Common.__default.AnyKey |k#0|) (and (Test.ChildMap.ChildMap_q this@@3) (|Test.BetreeNode.WF#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp this@@3)) ($Box |k#0|)))))))) :pattern ((Common.__default.AnyKey |k#0|)) :pattern (($Unbox DatatypeTypeType
                                           (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp
                                                                              this@@3))
                                                           ($Box |k#0|)))) :skolemid |907| :qid |Testidfy.9:20|))) (or (not (Test.ChildMap.WF ($LS $ly@@3) this@@3)) (and (Common.__default.TotalSet (|IMap#Domain| (Test.ChildMap.mapp this@@3))) (forall ((|k#0@@0| T@U)) (! (=> (= (type |k#0@@0|) (SeqType BoxType)) (=> (and ($Is |k#0@@0| Tclass.Common.Key) (Common.__default.AnyKey |k#0@@0|)) (Test.BetreeNode.WF $ly@@3 ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp this@@3)) ($Box |k#0@@0|)))))) :pattern (($Unbox DatatypeTypeType
                                           (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp
                                                                              this@@3))
                                                           ($Box |k#0@@0|)))) :pattern ((Common.__default.AnyKey |k#0@@0|)) :skolemid |906| :qid |Testidfy.9:20!152|)))) (or (Test.ChildMap.WF ($LS $ly@@3) this@@3) (not (Common.__default.TotalSet (|IMap#Domain| (Test.ChildMap.mapp this@@3)))) (not (=> (= (type (|k#0@@0!906!110| this@@3 $ly@@3)) (SeqType BoxType)) (=> (and ($Is (|k#0@@0!906!110| this@@3 $ly@@3) Tclass.Common.Key) (Common.__default.AnyKey (|k#0@@0!906!110| this@@3 $ly@@3))) (Test.BetreeNode.WF $ly@@3 ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp this@@3)) ($Box (|k#0@@0!906!110| this@@3 $ly@@3))))))))))) :pattern ((Test.ChildMap.WF ($LS $ly@@3) this@@3)) :skolemid |908| :qid |Testidfy.7:15!153|)))))
(assert (forall ((d@@16 T@U)) (! (=> (= (type d@@16) DatatypeTypeType) (= (Test.BetreeNode.Nil_q d@@16) (= (DatatypeCtorId d@@16) |##Test.BetreeNode.Nil|))) :pattern ((Test.BetreeNode.Nil_q d@@16)) :skolemid |917| :qid |unknown.0:0!161|)))
(assert (forall ((d@@17 T@U)) (! (=> (and (= (type d@@17) DatatypeTypeType) (Test.BetreeNode.Nil_q d@@17)) (= d@@17 |#Test.BetreeNode.Nil|)) :pattern ((Test.BetreeNode.Nil_q d@@17)) :skolemid |918| :qid |unknown.0:0!162|)))
(assert (forall (($h@@20 T@U)) (! (=> (and (= (type $h@@20) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@20)) ($IsAlloc |#Test.BetreeNode.Nil| Tclass.Test.BetreeNode $h@@20)) :pattern (($IsAlloc |#Test.BetreeNode.Nil| Tclass.Test.BetreeNode $h@@20)) :skolemid |919| :qid |DafnyPreludebpl.545:12!163|)))
(assert (forall ((arg0@@173 T@U)) (! (= (type (|#Test.BetreeNode.BetreeNode| arg0@@173)) DatatypeTypeType) :pattern ((|#Test.BetreeNode.BetreeNode| arg0@@173)) :qid |funType:#Test.BetreeNode.BetreeNode|)))
(assert (forall ((|a#5#0#0@@0| T@U)) (! (=> (= (type |a#5#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#Test.BetreeNode.BetreeNode| |a#5#0#0@@0|)) |##Test.BetreeNode.BetreeNode|)) :pattern ((|#Test.BetreeNode.BetreeNode| |a#5#0#0@@0|)) :skolemid |920| :qid |Testidfy.13:40|)))
(assert (forall ((d@@18 T@U)) (! (=> (= (type d@@18) DatatypeTypeType) (= (Test.BetreeNode.BetreeNode_q d@@18) (= (DatatypeCtorId d@@18) |##Test.BetreeNode.BetreeNode|))) :pattern ((Test.BetreeNode.BetreeNode_q d@@18)) :skolemid |921| :qid |unknown.0:0!167|)))
(assert (forall ((d@@19 T@U)) (! (or (not (and (= (type d@@19) DatatypeTypeType) (Test.BetreeNode.BetreeNode_q d@@19))) (and (= (type (|a#6#0#0@@0!922!112| d@@19)) DatatypeTypeType) (= d@@19 (|#Test.BetreeNode.BetreeNode| (|a#6#0#0@@0!922!112| d@@19))))) :pattern ((Test.BetreeNode.BetreeNode_q d@@19)) :skolemid |923| :qid |unknown.0:0!170|)))
(assert (forall ((|a#7#0#0@@0| T@U)) (! (=> (= (type |a#7#0#0@@0|) DatatypeTypeType) (= ($Is (|#Test.BetreeNode.BetreeNode| |a#7#0#0@@0|) Tclass.Test.BetreeNode) ($Is |a#7#0#0@@0| Tclass.Test.ChildMap))) :pattern (($Is (|#Test.BetreeNode.BetreeNode| |a#7#0#0@@0|)
                    Tclass.Test.BetreeNode)) :skolemid |924| :qid |Testidfy.13:40!171|)))
(assert (forall ((|a#8#0#0@@0| T@U)($h@@21 T@U)) (! (=> (and (= (type |a#8#0#0@@0|) DatatypeTypeType) (= (type $h@@21) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@21)) (= ($IsAlloc (|#Test.BetreeNode.BetreeNode| |a#8#0#0@@0|) Tclass.Test.BetreeNode $h@@21) ($IsAlloc |a#8#0#0@@0| Tclass.Test.ChildMap $h@@21))) :pattern (($IsAlloc (|#Test.BetreeNode.BetreeNode| |a#8#0#0@@0|)
                         Tclass.Test.BetreeNode
                         $h@@21)) :skolemid |925| :qid |Testidfy.13:40!172|)))
(assert (forall ((arg0@@174 T@U)) (! (= (type (Test.BetreeNode.children arg0@@174)) DatatypeTypeType) :pattern ((Test.BetreeNode.children arg0@@174)) :qid |funType:Test.BetreeNode.children|)))
(assert (forall ((d@@20 T@U)($h@@22 T@U)) (! (=> (and (= (type d@@20) DatatypeTypeType) (= (type $h@@22) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@22) (Test.BetreeNode.BetreeNode_q d@@20) ($IsAlloc d@@20 Tclass.Test.BetreeNode $h@@22)) ($IsAlloc (Test.BetreeNode.children d@@20) Tclass.Test.ChildMap $h@@22)) :pattern (($IsAlloc (Test.BetreeNode.children d@@20)
                         Tclass.Test.ChildMap
                         $h@@22)) :skolemid |926| :qid |unknown.0:0!177|)))
(assert (forall ((|a#9#0#0| T@U)) (! (=> (= (type |a#9#0#0|) DatatypeTypeType) (= (|#Test.BetreeNode.BetreeNode| (Lit |a#9#0#0|)) (Lit (|#Test.BetreeNode.BetreeNode| |a#9#0#0|)))) :pattern ((|#Test.BetreeNode.BetreeNode| (Lit |a#9#0#0|))) :skolemid |927| :qid |Testidfy.13:40!178|)))
(assert (forall ((|a#10#0#0| T@U)) (! (=> (= (type |a#10#0#0|) DatatypeTypeType) (= (Test.BetreeNode.children (|#Test.BetreeNode.BetreeNode| |a#10#0#0|)) |a#10#0#0|)) :pattern ((|#Test.BetreeNode.BetreeNode| |a#10#0#0|)) :skolemid |928| :qid |Testidfy.13:40!179|)))
(assert (forall ((|a#11#0#0| T@U)) (! (=> (= (type |a#11#0#0|) DatatypeTypeType) (< (DtRank |a#11#0#0|) (DtRank (|#Test.BetreeNode.BetreeNode| |a#11#0#0|)))) :pattern ((|#Test.BetreeNode.BetreeNode| |a#11#0#0|)) :skolemid |929| :qid |Testidfy.13:40!180|)))
(assert (forall ((d@@21 T@U)) (! (=> (and (= (type d@@21) DatatypeTypeType) (|$IsA#Test.BetreeNode| d@@21)) (or (Test.BetreeNode.Nil_q d@@21) (Test.BetreeNode.BetreeNode_q d@@21))) :pattern ((|$IsA#Test.BetreeNode| d@@21)) :skolemid |930| :qid |unknown.0:0!182|)))
(assert (forall ((d@@22 T@U)) (! (=> (and (= (type d@@22) DatatypeTypeType) ($Is d@@22 Tclass.Test.BetreeNode)) (or (Test.BetreeNode.Nil_q d@@22) (Test.BetreeNode.BetreeNode_q d@@22))) :pattern ((Test.BetreeNode.BetreeNode_q d@@22)
               ($Is d@@22 Tclass.Test.BetreeNode)) :pattern ((Test.BetreeNode.Nil_q d@@22) ($Is d@@22 Tclass.Test.BetreeNode)) :skolemid |931| :qid |unknown.0:0!184|)))
(assert (forall ((a@@106 T@U)(b@@67 T@U)) (! (=> (and (= (type a@@106) DatatypeTypeType) (= (type b@@67) DatatypeTypeType) (Test.BetreeNode.Nil_q a@@106) (Test.BetreeNode.Nil_q b@@67)) (= (|Test.BetreeNode#Equal| a@@106 b@@67) true)) :pattern ((|Test.BetreeNode#Equal| a@@106 b@@67)
               (Test.BetreeNode.Nil_q b@@67)) :pattern ((|Test.BetreeNode#Equal| a@@106 b@@67)
               (Test.BetreeNode.Nil_q a@@106)) :skolemid |932| :qid |unknown.0:0!188|)))
(assert (forall ((a@@107 T@U)(b@@68 T@U)) (! (=> (and (= (type a@@107) DatatypeTypeType) (= (type b@@68) DatatypeTypeType) (Test.BetreeNode.BetreeNode_q a@@107) (Test.BetreeNode.BetreeNode_q b@@68)) (= (|Test.BetreeNode#Equal| a@@107 b@@68) (|Test.ChildMap#Equal| (Test.BetreeNode.children a@@107) (Test.BetreeNode.children b@@68)))) :pattern ((|Test.BetreeNode#Equal| a@@107 b@@68)
               (Test.BetreeNode.BetreeNode_q b@@68)) :pattern ((|Test.BetreeNode#Equal| a@@107 b@@68)
               (Test.BetreeNode.BetreeNode_q a@@107)) :skolemid |933| :qid |unknown.0:0!190|)))
(assert (forall ((b@@69 T@U)(a@@108 T@U)) (! (=> (and (= (type a@@108) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (= (|Test.BetreeNode#Equal| a@@108 b@@69) (= a@@108 b@@69))) :pattern ((|Test.BetreeNode#Equal| a@@108 b@@69)) :skolemid |934| :qid |unknown.0:0!191|)))
(assert (forall (($ly@@5 T@U)(this@@5 T@U)) (! (=> (and (= (type $ly@@5) LayerTypeType) (= (type this@@5) DatatypeTypeType)) (= (Test.BetreeNode.WF ($LS $ly@@5) this@@5) (Test.BetreeNode.WF $ly@@5 this@@5))) :pattern ((Test.BetreeNode.WF ($LS $ly@@5) this@@5)) :skolemid |935| :qid |Testidfy.14:15|)))
(assert (forall (($ly@@6 T@U)(this@@6 T@U)) (! (=> (and (= (type $ly@@6) LayerTypeType) (= (type this@@6) DatatypeTypeType)) (= (Test.BetreeNode.WF $ly@@6 this@@6) (Test.BetreeNode.WF $LZ this@@6))) :pattern ((Test.BetreeNode.WF (AsFuelBottom $ly@@6) this@@6)) :skolemid |936| :qid |Testidfy.14:15!194|)))
(assert (forall (($ly@@8 T@U)(this@@8 T@U)) (! (=> (and (= (type $ly@@8) LayerTypeType) (= (type this@@8) DatatypeTypeType) ($Is this@@8 Tclass.Test.BetreeNode)) (= (|Test.BetreeNode.WF#requires| $ly@@8 this@@8) true)) :pattern ((|Test.BetreeNode.WF#requires| $ly@@8 this@@8)) :skolemid |938| :qid |Testidfy.14:15!199|)))
(assert (! (or (not (<= 5 $FunctionContextHeight)) (forall (($ly@@9 T@U)(this@@9 T@U)) (! (=> (and (= (type $ly@@9) LayerTypeType) (= (type this@@9) DatatypeTypeType) (or (|Test.BetreeNode.WF#canCall| this@@9) (and (not (= 5 $FunctionContextHeight)) ($Is this@@9 Tclass.Test.BetreeNode)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (=> (Test.BetreeNode.BetreeNode_q this@@9) (|Test.ChildMap.WF#canCall| (Test.BetreeNode.children this@@9)))) (= (Test.BetreeNode.WF ($LS $ly@@9) this@@9) (and true (=> (Test.BetreeNode.BetreeNode_q this@@9) (Test.ChildMap.WF $ly@@9 (Test.BetreeNode.children this@@9))))))) :pattern ((Test.BetreeNode.WF ($LS $ly@@9) this@@9)) :skolemid |939| :qid |Testidfy.14:15!202|)))))
(assert (forall ((arg0@@175 T@U)) (! (= (type (|#Test.QueryReceiptLine.QueryReceiptLine| arg0@@175)) DatatypeTypeType) :pattern ((|#Test.QueryReceiptLine.QueryReceiptLine| arg0@@175)) :qid |funType:#Test.QueryReceiptLine.QueryReceiptLine|)))
(assert (forall ((|a#0#0#0@@0| T@U)) (! (=> (= (type |a#0#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#Test.QueryReceiptLine.QueryReceiptLine| |a#0#0#0@@0|)) |##Test.QueryReceiptLine.QueryReceiptLine|)) :pattern ((|#Test.QueryReceiptLine.QueryReceiptLine| |a#0#0#0@@0|)) :skolemid |942| :qid |Testidfy.19:46|)))
(assert (forall ((d@@23 T@U)) (! (=> (= (type d@@23) DatatypeTypeType) (= (Test.QueryReceiptLine.QueryReceiptLine_q d@@23) (= (DatatypeCtorId d@@23) |##Test.QueryReceiptLine.QueryReceiptLine|))) :pattern ((Test.QueryReceiptLine.QueryReceiptLine_q d@@23)) :skolemid |943| :qid |unknown.0:0!207|)))
(assert (forall ((d@@24 T@U)) (! (or (not (and (= (type d@@24) DatatypeTypeType) (Test.QueryReceiptLine.QueryReceiptLine_q d@@24))) (and (= (type (|a#1#0#0@@0!944!113| d@@24)) DatatypeTypeType) (= d@@24 (|#Test.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!944!113| d@@24))))) :pattern ((Test.QueryReceiptLine.QueryReceiptLine_q d@@24)) :skolemid |945| :qid |unknown.0:0!211|)))
(assert (forall ((bx@@56 T@U)) (! (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 Tclass.Test.QueryReceiptLine)) (and (= ($Box ($Unbox DatatypeTypeType bx@@56)) bx@@56) ($Is ($Unbox DatatypeTypeType bx@@56) Tclass.Test.QueryReceiptLine))) :pattern (($IsBox bx@@56 Tclass.Test.QueryReceiptLine)) :skolemid |946| :qid |unknown.0:0!212|)))
(assert (forall ((|a#2#0#0@@0| T@U)) (! (=> (= (type |a#2#0#0@@0|) DatatypeTypeType) (= ($Is (|#Test.QueryReceiptLine.QueryReceiptLine| |a#2#0#0@@0|) Tclass.Test.QueryReceiptLine) ($Is |a#2#0#0@@0| Tclass.Test.BetreeNode))) :pattern (($Is (|#Test.QueryReceiptLine.QueryReceiptLine| |a#2#0#0@@0|)
                    Tclass.Test.QueryReceiptLine)) :skolemid |947| :qid |Testidfy.19:46!214|)))
(assert (forall ((|a#3#0#0@@0| T@U)($h@@23 T@U)) (! (=> (and (= (type |a#3#0#0@@0|) DatatypeTypeType) (= (type $h@@23) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@23)) (= ($IsAlloc (|#Test.QueryReceiptLine.QueryReceiptLine| |a#3#0#0@@0|) Tclass.Test.QueryReceiptLine $h@@23) ($IsAlloc |a#3#0#0@@0| Tclass.Test.BetreeNode $h@@23))) :pattern (($IsAlloc (|#Test.QueryReceiptLine.QueryReceiptLine|
                           |a#3#0#0@@0|)
                         Tclass.Test.QueryReceiptLine
                         $h@@23)) :skolemid |948| :qid |Testidfy.19:46!217|)))
(assert (forall ((arg0@@176 T@U)) (! (= (type (Test.QueryReceiptLine.node arg0@@176)) DatatypeTypeType) :pattern ((Test.QueryReceiptLine.node arg0@@176)) :qid |funType:Test.QueryReceiptLine.node|)))
(assert (forall ((d@@25 T@U)($h@@24 T@U)) (! (=> (and (= (type d@@25) DatatypeTypeType) (= (type $h@@24) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@24) (Test.QueryReceiptLine.QueryReceiptLine_q d@@25) ($IsAlloc d@@25 Tclass.Test.QueryReceiptLine $h@@24)) ($IsAlloc (Test.QueryReceiptLine.node d@@25) Tclass.Test.BetreeNode $h@@24)) :pattern (($IsAlloc (Test.QueryReceiptLine.node d@@25)
                         Tclass.Test.BetreeNode
                         $h@@24)) :skolemid |949| :qid |unknown.0:0!218|)))
(assert (forall ((|a#4#0#0@@0| T@U)) (! (=> (= (type |a#4#0#0@@0|) DatatypeTypeType) (= (|#Test.QueryReceiptLine.QueryReceiptLine| (Lit |a#4#0#0@@0|)) (Lit (|#Test.QueryReceiptLine.QueryReceiptLine| |a#4#0#0@@0|)))) :pattern ((|#Test.QueryReceiptLine.QueryReceiptLine| (Lit |a#4#0#0@@0|))) :skolemid |950| :qid |Testidfy.19:46!220|)))
(assert (forall ((|a#5#0#0@@1| T@U)) (! (=> (= (type |a#5#0#0@@1|) DatatypeTypeType) (= (Test.QueryReceiptLine.node (|#Test.QueryReceiptLine.QueryReceiptLine| |a#5#0#0@@1|)) |a#5#0#0@@1|)) :pattern ((|#Test.QueryReceiptLine.QueryReceiptLine| |a#5#0#0@@1|)) :skolemid |951| :qid |Testidfy.19:46!221|)))
(assert (forall ((|a#6#0#0@@1| T@U)) (! (=> (= (type |a#6#0#0@@1|) DatatypeTypeType) (< (DtRank |a#6#0#0@@1|) (DtRank (|#Test.QueryReceiptLine.QueryReceiptLine| |a#6#0#0@@1|)))) :pattern ((|#Test.QueryReceiptLine.QueryReceiptLine| |a#6#0#0@@1|)) :skolemid |952| :qid |Testidfy.19:46!222|)))
(assert (forall ((d@@26 T@U)) (! (=> (and (= (type d@@26) DatatypeTypeType) (|$IsA#Test.QueryReceiptLine| d@@26)) (Test.QueryReceiptLine.QueryReceiptLine_q d@@26)) :pattern ((|$IsA#Test.QueryReceiptLine| d@@26)) :skolemid |953| :qid |unknown.0:0!225|)))
(assert (forall ((d@@27 T@U)) (! (=> (and (= (type d@@27) DatatypeTypeType) ($Is d@@27 Tclass.Test.QueryReceiptLine)) (Test.QueryReceiptLine.QueryReceiptLine_q d@@27)) :pattern ((Test.QueryReceiptLine.QueryReceiptLine_q d@@27)
               ($Is d@@27 Tclass.Test.QueryReceiptLine)) :skolemid |954| :qid |unknown.0:0!227|)))
(assert (forall ((a@@109 T@U)(b@@70 T@U)) (! (=> (and (= (type a@@109) DatatypeTypeType) (= (type b@@70) DatatypeTypeType) true) (= (|Test.QueryReceiptLine#Equal| a@@109 b@@70) (|Test.BetreeNode#Equal| (Test.QueryReceiptLine.node a@@109) (Test.QueryReceiptLine.node b@@70)))) :pattern ((|Test.QueryReceiptLine#Equal| a@@109 b@@70)) :skolemid |955| :qid |unknown.0:0!229|)))
(assert (forall ((b@@71 T@U)(a@@110 T@U)) (! (=> (and (= (type a@@110) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (= (|Test.QueryReceiptLine#Equal| a@@110 b@@71) (= a@@110 b@@71))) :pattern ((|Test.QueryReceiptLine#Equal| a@@110 b@@71)) :skolemid |956| :qid |unknown.0:0!231|)))
(assert (forall ((this@@12 T@U)) (! (=> (and (= (type this@@12) DatatypeTypeType) ($Is this@@12 Tclass.Test.QueryReceiptLine)) (= (|Test.QueryReceiptLine.WF#requires| this@@12) true)) :pattern ((|Test.QueryReceiptLine.WF#requires| this@@12)) :skolemid |958| :qid |Testidfy.20:15!234|)))
(assert (! (or (not (<= 6 $FunctionContextHeight)) (forall ((this@@13 T@U)) (! (=> (and (= (type this@@13) DatatypeTypeType) (or (|Test.QueryReceiptLine.WF#canCall| this@@13) (and (not (= 6 $FunctionContextHeight)) ($Is this@@13 Tclass.Test.QueryReceiptLine)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (Test.QueryReceiptLine.QueryReceiptLine_q this@@13) (|Test.BetreeNode.WF#canCall| (Test.QueryReceiptLine.node this@@13)))) (= (Test.QueryReceiptLine.WF this@@13) (and true (Test.BetreeNode.WF ($LS $LZ) (Test.QueryReceiptLine.node this@@13)))))) :pattern ((Test.QueryReceiptLine.WF this@@13)) :skolemid |959| :qid |Testidfy.20:15!236|)))))
(assert (forall ((arg0@@177 T@U)(arg1@@80 T@U)(arg2@@32 T@U)) (! (= (type (|#Test.QueryReceipt.QueryReceipt| arg0@@177 arg1@@80 arg2@@32)) DatatypeTypeType) :pattern ((|#Test.QueryReceipt.QueryReceipt| arg0@@177 arg1@@80 arg2@@32)) :qid |funType:#Test.QueryReceipt.QueryReceipt|)))
(assert (forall ((|a#0#1#0@@0| T@U)(|a#0#2#0| T@U)(|a#0#0#0@@1| T@U)) (! (=> (and (= (type |a#0#0#0@@1|) (SeqType BoxType)) (= (type |a#0#1#0@@0|) DatatypeTypeType) (= (type |a#0#2#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#Test.QueryReceipt.QueryReceipt| |a#0#0#0@@1| |a#0#1#0@@0| |a#0#2#0|)) |##Test.QueryReceipt.QueryReceipt|)) :pattern ((|#Test.QueryReceipt.QueryReceipt|
                 |a#0#0#0@@1|
                 |a#0#1#0@@0|
                 |a#0#2#0|)) :skolemid |962| :qid |Testidfy.26:5|)))
(assert (forall ((d@@28 T@U)) (! (=> (= (type d@@28) DatatypeTypeType) (= (Test.QueryReceipt.QueryReceipt_q d@@28) (= (DatatypeCtorId d@@28) |##Test.QueryReceipt.QueryReceipt|))) :pattern ((Test.QueryReceipt.QueryReceipt_q d@@28)) :skolemid |963| :qid |unknown.0:0!245|)))
(assert (forall ((d@@29 T@U)) (! (or (not (and (= (type d@@29) DatatypeTypeType) (Test.QueryReceipt.QueryReceipt_q d@@29))) (and (= (type (|a#1#0#0@@1!964!114| d@@29)) (SeqType BoxType)) (= (type (|a#1#1#0@@0!964!116| d@@29)) DatatypeTypeType) (= (type (|a#1#2#0!964!115| d@@29)) (SeqType BoxType)) (= d@@29 (|#Test.QueryReceipt.QueryReceipt| (|a#1#0#0@@1!964!114| d@@29) (|a#1#1#0@@0!964!116| d@@29) (|a#1#2#0!964!115| d@@29))))) :pattern ((Test.QueryReceipt.QueryReceipt_q d@@29)) :skolemid |965| :qid |unknown.0:0!248|)))
(assert (forall ((bx@@57 T@U)) (! (=> (and (= (type bx@@57) BoxType) ($IsBox bx@@57 Tclass.Test.QueryReceipt)) (and (= ($Box ($Unbox DatatypeTypeType bx@@57)) bx@@57) ($Is ($Unbox DatatypeTypeType bx@@57) Tclass.Test.QueryReceipt))) :pattern (($IsBox bx@@57 Tclass.Test.QueryReceipt)) :skolemid |966| :qid |unknown.0:0!251|)))
(assert (forall ((|a#2#0#0@@1| T@U)(|a#2#1#0@@0| T@U)(|a#2#2#0| T@U)) (! (=> (and (= (type |a#2#0#0@@1|) (SeqType BoxType)) (= (type |a#2#1#0@@0|) DatatypeTypeType) (= (type |a#2#2#0|) (SeqType BoxType))) (= ($Is (|#Test.QueryReceipt.QueryReceipt| |a#2#0#0@@1| |a#2#1#0@@0| |a#2#2#0|) Tclass.Test.QueryReceipt) (and ($Is |a#2#0#0@@1| Tclass.Common.Key) ($Is |a#2#1#0@@0| Tclass.Test.BetreeNode) ($Is |a#2#2#0| (TSeq Tclass.Test.QueryReceiptLine))))) :pattern (($Is (|#Test.QueryReceipt.QueryReceipt|
                      |a#2#0#0@@1|
                      |a#2#1#0@@0|
                      |a#2#2#0|)
                    Tclass.Test.QueryReceipt)) :skolemid |967| :qid |Testidfy.26:5!253|)))
(assert (forall ((|a#3#0#0@@1| T@U)(|a#3#1#0@@0| T@U)(|a#3#2#0| T@U)($h@@25 T@U)) (! (=> (and (= (type |a#3#0#0@@1|) (SeqType BoxType)) (= (type |a#3#1#0@@0|) DatatypeTypeType) (= (type |a#3#2#0|) (SeqType BoxType)) (= (type $h@@25) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@25)) (= ($IsAlloc (|#Test.QueryReceipt.QueryReceipt| |a#3#0#0@@1| |a#3#1#0@@0| |a#3#2#0|) Tclass.Test.QueryReceipt $h@@25) (and ($IsAlloc |a#3#0#0@@1| Tclass.Common.Key $h@@25) ($IsAlloc |a#3#1#0@@0| Tclass.Test.BetreeNode $h@@25) ($IsAlloc |a#3#2#0| (TSeq Tclass.Test.QueryReceiptLine) $h@@25)))) :pattern (($IsAlloc (|#Test.QueryReceipt.QueryReceipt|
                           |a#3#0#0@@1|
                           |a#3#1#0@@0|
                           |a#3#2#0|)
                         Tclass.Test.QueryReceipt
                         $h@@25)) :skolemid |968| :qid |Testidfy.26:5!258|)))
(assert (forall ((arg0@@178 T@U)) (! (= (type (Test.QueryReceipt.key arg0@@178)) (SeqType BoxType)) :pattern ((Test.QueryReceipt.key arg0@@178)) :qid |funType:Test.QueryReceipt.key|)))
(assert (forall ((d@@30 T@U)($h@@26 T@U)) (! (=> (and (= (type d@@30) DatatypeTypeType) (= (type $h@@26) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@26) (Test.QueryReceipt.QueryReceipt_q d@@30) ($IsAlloc d@@30 Tclass.Test.QueryReceipt $h@@26)) ($IsAlloc (Test.QueryReceipt.key d@@30) Tclass.Common.Key $h@@26)) :pattern (($IsAlloc (Test.QueryReceipt.key d@@30) Tclass.Common.Key $h@@26)) :skolemid |969| :qid |unknown.0:0!260|)))
(assert (forall ((arg0@@179 T@U)) (! (= (type (Test.QueryReceipt.root arg0@@179)) DatatypeTypeType) :pattern ((Test.QueryReceipt.root arg0@@179)) :qid |funType:Test.QueryReceipt.root|)))
(assert (forall ((d@@31 T@U)($h@@27 T@U)) (! (=> (and (= (type d@@31) DatatypeTypeType) (= (type $h@@27) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@27) (Test.QueryReceipt.QueryReceipt_q d@@31) ($IsAlloc d@@31 Tclass.Test.QueryReceipt $h@@27)) ($IsAlloc (Test.QueryReceipt.root d@@31) Tclass.Test.BetreeNode $h@@27)) :pattern (($IsAlloc (Test.QueryReceipt.root d@@31)
                         Tclass.Test.BetreeNode
                         $h@@27)) :skolemid |970| :qid |unknown.0:0!265|)))
(assert (forall ((arg0@@180 T@U)) (! (= (type (Test.QueryReceipt.lines arg0@@180)) (SeqType BoxType)) :pattern ((Test.QueryReceipt.lines arg0@@180)) :qid |funType:Test.QueryReceipt.lines|)))
(assert (forall ((d@@32 T@U)($h@@28 T@U)) (! (=> (and (= (type d@@32) DatatypeTypeType) (= (type $h@@28) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@28) (Test.QueryReceipt.QueryReceipt_q d@@32) ($IsAlloc d@@32 Tclass.Test.QueryReceipt $h@@28)) ($IsAlloc (Test.QueryReceipt.lines d@@32) (TSeq Tclass.Test.QueryReceiptLine) $h@@28)) :pattern (($IsAlloc (Test.QueryReceipt.lines d@@32)
                         (TSeq Tclass.Test.QueryReceiptLine)
                         $h@@28)) :skolemid |971| :qid |unknown.0:0!269|)))
(assert (forall ((|a#4#0#0@@1| T@U)(|a#4#1#0@@0| T@U)(|a#4#2#0| T@U)) (! (=> (and (= (type |a#4#0#0@@1|) (SeqType BoxType)) (= (type |a#4#1#0@@0|) DatatypeTypeType) (= (type |a#4#2#0|) (SeqType BoxType))) (= (|#Test.QueryReceipt.QueryReceipt| (Lit |a#4#0#0@@1|) (Lit |a#4#1#0@@0|) (Lit |a#4#2#0|)) (Lit (|#Test.QueryReceipt.QueryReceipt| |a#4#0#0@@1| |a#4#1#0@@0| |a#4#2#0|)))) :pattern ((|#Test.QueryReceipt.QueryReceipt|
                 (Lit |a#4#0#0@@1|)
                 (Lit |a#4#1#0@@0|)
                 (Lit |a#4#2#0|))) :skolemid |972| :qid |Testidfy.26:5!271|)))
(assert (forall ((|a#5#0#0@@2| T@U)(|a#5#1#0@@0| T@U)(|a#5#2#0| T@U)) (! (=> (and (= (type |a#5#0#0@@2|) (SeqType BoxType)) (= (type |a#5#1#0@@0|) DatatypeTypeType) (= (type |a#5#2#0|) (SeqType BoxType))) (= (Test.QueryReceipt.key (|#Test.QueryReceipt.QueryReceipt| |a#5#0#0@@2| |a#5#1#0@@0| |a#5#2#0|)) |a#5#0#0@@2|)) :pattern ((|#Test.QueryReceipt.QueryReceipt|
                 |a#5#0#0@@2|
                 |a#5#1#0@@0|
                 |a#5#2#0|)) :skolemid |973| :qid |Testidfy.26:5!273|)))
(assert (forall ((|a#6#0#0@@2| T@U)(|a#6#1#0@@0| T@U)(|a#6#2#0| T@U)) (! (=> (and (= (type |a#6#0#0@@2|) (SeqType BoxType)) (= (type |a#6#1#0@@0|) DatatypeTypeType) (= (type |a#6#2#0|) (SeqType BoxType))) (= (Test.QueryReceipt.root (|#Test.QueryReceipt.QueryReceipt| |a#6#0#0@@2| |a#6#1#0@@0| |a#6#2#0|)) |a#6#1#0@@0|)) :pattern ((|#Test.QueryReceipt.QueryReceipt|
                 |a#6#0#0@@2|
                 |a#6#1#0@@0|
                 |a#6#2#0|)) :skolemid |974| :qid |Testidfy.26:5!277|)))
(assert (forall ((|a#7#0#0@@1| T@U)(|a#7#1#0@@0| T@U)(|a#7#2#0| T@U)) (! (=> (and (= (type |a#7#0#0@@1|) (SeqType BoxType)) (= (type |a#7#1#0@@0|) DatatypeTypeType) (= (type |a#7#2#0|) (SeqType BoxType))) (< (DtRank |a#7#1#0@@0|) (DtRank (|#Test.QueryReceipt.QueryReceipt| |a#7#0#0@@1| |a#7#1#0@@0| |a#7#2#0|)))) :pattern ((|#Test.QueryReceipt.QueryReceipt|
                 |a#7#0#0@@1|
                 |a#7#1#0@@0|
                 |a#7#2#0|)) :skolemid |975| :qid |Testidfy.26:5!280|)))
(assert (forall ((|a#8#0#0@@1| T@U)(|a#8#1#0@@0| T@U)(|a#8#2#0| T@U)) (! (=> (and (= (type |a#8#0#0@@1|) (SeqType BoxType)) (= (type |a#8#1#0@@0|) DatatypeTypeType) (= (type |a#8#2#0|) (SeqType BoxType))) (= (Test.QueryReceipt.lines (|#Test.QueryReceipt.QueryReceipt| |a#8#0#0@@1| |a#8#1#0@@0| |a#8#2#0|)) |a#8#2#0|)) :pattern ((|#Test.QueryReceipt.QueryReceipt|
                 |a#8#0#0@@1|
                 |a#8#1#0@@0|
                 |a#8#2#0|)) :skolemid |976| :qid |Testidfy.26:5!283|)))
(assert (forall ((|a#9#0#0@@0| T@U)(|a#9#1#0| T@U)(|a#9#2#0| T@U)(i@@25 Int)) (! (=> (and (= (type |a#9#0#0@@0|) (SeqType BoxType)) (= (type |a#9#1#0|) DatatypeTypeType) (= (type |a#9#2#0|) (SeqType BoxType)) (<= 0 i@@25) (< i@@25 (|Seq#Length| |a#9#2#0|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#9#2#0| i@@25))) (DtRank (|#Test.QueryReceipt.QueryReceipt| |a#9#0#0@@0| |a#9#1#0| |a#9#2#0|)))) :pattern ((|Seq#Index| |a#9#2#0| i@@25)
               (|#Test.QueryReceipt.QueryReceipt|
                 |a#9#0#0@@0|
                 |a#9#1#0|
                 |a#9#2#0|)) :skolemid |977| :qid |Testidfy.26:5!286|)))
(assert (forall ((|a#10#1#0| T@U)(|a#10#2#0| T@U)(|a#10#0#0@@0| T@U)) (! (=> (and (= (type |a#10#0#0@@0|) (SeqType BoxType)) (= (type |a#10#1#0|) DatatypeTypeType) (= (type |a#10#2#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#10#2#0|) (DtRank (|#Test.QueryReceipt.QueryReceipt| |a#10#0#0@@0| |a#10#1#0| |a#10#2#0|)))) :pattern ((|#Test.QueryReceipt.QueryReceipt|
                 |a#10#0#0@@0|
                 |a#10#1#0|
                 |a#10#2#0|)) :skolemid |978| :qid |Testidfy.26:5!289|)))
(assert (forall ((d@@33 T@U)) (! (=> (and (= (type d@@33) DatatypeTypeType) (|$IsA#Test.QueryReceipt| d@@33)) (Test.QueryReceipt.QueryReceipt_q d@@33)) :pattern ((|$IsA#Test.QueryReceipt| d@@33)) :skolemid |979| :qid |unknown.0:0!292|)))
(assert (forall ((d@@34 T@U)) (! (=> (and (= (type d@@34) DatatypeTypeType) ($Is d@@34 Tclass.Test.QueryReceipt)) (Test.QueryReceipt.QueryReceipt_q d@@34)) :pattern ((Test.QueryReceipt.QueryReceipt_q d@@34)
               ($Is d@@34 Tclass.Test.QueryReceipt)) :skolemid |980| :qid |unknown.0:0!293|)))
(assert (forall ((b@@72 T@U)(a@@111 T@U)) (! (=> (and (= (type a@@111) DatatypeTypeType) (= (type b@@72) DatatypeTypeType) true) (= (|Test.QueryReceipt#Equal| a@@111 b@@72) (and (|Seq#Equal| (Test.QueryReceipt.key a@@111) (Test.QueryReceipt.key b@@72)) (|Test.BetreeNode#Equal| (Test.QueryReceipt.root a@@111) (Test.QueryReceipt.root b@@72)) (|Seq#Equal| (Test.QueryReceipt.lines a@@111) (Test.QueryReceipt.lines b@@72))))) :pattern ((|Test.QueryReceipt#Equal| a@@111 b@@72)) :skolemid |981| :qid |unknown.0:0!295|)))
(assert (forall ((a@@112 T@U)(b@@73 T@U)) (! (=> (and (= (type a@@112) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (= (|Test.QueryReceipt#Equal| a@@112 b@@73) (= a@@112 b@@73))) :pattern ((|Test.QueryReceipt#Equal| a@@112 b@@73)) :skolemid |982| :qid |unknown.0:0!298|)))
(assert (forall ((this@@16 T@U)) (! (=> (and (= (type this@@16) DatatypeTypeType) ($Is this@@16 Tclass.Test.QueryReceipt)) (= (|Test.QueryReceipt.Structure#requires| this@@16) true)) :pattern ((|Test.QueryReceipt.Structure#requires| this@@16)) :skolemid |984| :qid |Testidfy.30:15!301|)))
(assert (! (or (not (<= 8 $FunctionContextHeight)) (forall ((this@@17 T@U)) (! (or (not (and (= (type this@@17) DatatypeTypeType) (or (|Test.QueryReceipt.Structure#canCall| this@@17) (and (not (= 8 $FunctionContextHeight)) ($Is this@@17 Tclass.Test.QueryReceipt))))) (and (Test.QueryReceipt.QueryReceipt_q this@@17) (or (not (INTERNAL_lt_boogie 0 (|Seq#Length| (Test.QueryReceipt.lines this@@17)))) (and (|$IsA#Test.BetreeNode| (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (LitInt 0))))) (|$IsA#Test.BetreeNode| (Test.QueryReceipt.root this@@17)) (Test.QueryReceipt.QueryReceipt_q this@@17) (Test.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (LitInt 0)))) (Test.QueryReceipt.QueryReceipt_q this@@17) (or (not (|Test.BetreeNode#Equal| (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (LitInt 0)))) (Test.QueryReceipt.root this@@17))) (forall ((|i#0| Int)) (! (=> (INTERNAL_le_boogie 0 |i#0|) (and (Test.QueryReceipt.QueryReceipt_q this@@17) (=> (INTERNAL_lt_boogie |i#0| (|Seq#Length| (Test.QueryReceipt.lines this@@17))) (and (Test.QueryReceipt.QueryReceipt_q this@@17) (Test.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) |i#0|))) (Test.QueryReceipt.QueryReceipt_q this@@17))))) :pattern (($Unbox DatatypeTypeType
                                           (|Seq#Index| (Test.QueryReceipt.lines
                                                          this@@17)
                                                        |i#0|))) :skolemid |986| :qid |Testidfy.33:20|))))) (or (not (Test.QueryReceipt.Structure this@@17)) (and (and (INTERNAL_lt_boogie 0 (|Seq#Length| (Test.QueryReceipt.lines this@@17))) (|Test.BetreeNode#Equal| (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (LitInt 0)))) (Test.QueryReceipt.root this@@17))) (forall ((|i#0@@0| Int)) (! (=> (and (INTERNAL_le_boogie 0 |i#0@@0|) (INTERNAL_lt_boogie |i#0@@0| (|Seq#Length| (Test.QueryReceipt.lines this@@17)))) (= (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) |i#0@@0|)))) (INTERNAL_lt_boogie |i#0@@0| (INTERNAL_sub_boogie (|Seq#Length| (Test.QueryReceipt.lines this@@17)) 1)))) :pattern (($Unbox DatatypeTypeType
                                            (|Seq#Index| (Test.QueryReceipt.lines
                                                           this@@17)
                                                         |i#0@@0|))) :skolemid |985| :qid |Testidfy.33:20!305|)))) (or (Test.QueryReceipt.Structure this@@17) (not (and (INTERNAL_lt_boogie 0 (|Seq#Length| (Test.QueryReceipt.lines this@@17))) (|Test.BetreeNode#Equal| (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (LitInt 0)))) (Test.QueryReceipt.root this@@17)))) (not (=> (and (INTERNAL_le_boogie 0 (|i#0@@0!985!117| this@@17)) (INTERNAL_lt_boogie (|i#0@@0!985!117| this@@17) (|Seq#Length| (Test.QueryReceipt.lines this@@17)))) (= (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (|i#0@@0!985!117| this@@17))))) (INTERNAL_lt_boogie (|i#0@@0!985!117| this@@17) (INTERNAL_sub_boogie (|Seq#Length| (Test.QueryReceipt.lines this@@17)) 1)))))))) :pattern ((Test.QueryReceipt.Structure this@@17)) :skolemid |987| :qid |Testidfy.30:15!306|)))))
(assert (forall ((this@@20 T@U)) (! (=> (and (= (type this@@20) DatatypeTypeType) ($Is this@@20 Tclass.Test.QueryReceipt)) (= (|Test.QueryReceipt.AllLinesWF#requires| this@@20) true)) :pattern ((|Test.QueryReceipt.AllLinesWF#requires| this@@20)) :skolemid |994| :qid |Testidfy.36:15!319|)))
(assert (! (or (not (<= 7 $FunctionContextHeight)) (forall ((this@@21 T@U)) (! (or (not (and (= (type this@@21) DatatypeTypeType) (or (|Test.QueryReceipt.AllLinesWF#canCall| this@@21) (and (not (= 7 $FunctionContextHeight)) ($Is this@@21 Tclass.Test.QueryReceipt))))) (and (or (not (U_2_bool (Lit (bool_2_U true)))) (forall ((|i#0@@1| Int)) (! (=> (INTERNAL_le_boogie 0 |i#0@@1|) (and (Test.QueryReceipt.QueryReceipt_q this@@21) (=> (INTERNAL_lt_boogie |i#0@@1| (|Seq#Length| (Test.QueryReceipt.lines this@@21))) (and (Test.QueryReceipt.QueryReceipt_q this@@21) (|Test.QueryReceiptLine.WF#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@21) |i#0@@1|))))))) :pattern (($Unbox DatatypeTypeType
                                           (|Seq#Index| (Test.QueryReceipt.lines
                                                          this@@21)
                                                        |i#0@@1|))) :skolemid |996| :qid |Testidfy.37:20|))) (or (not (Test.QueryReceipt.AllLinesWF this@@21)) (and true (forall ((|i#0@@2| Int)) (! (=> (and (INTERNAL_le_boogie 0 |i#0@@2|) (INTERNAL_lt_boogie |i#0@@2| (|Seq#Length| (Test.QueryReceipt.lines this@@21)))) (Test.QueryReceiptLine.WF ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@21) |i#0@@2|)))) :pattern (($Unbox DatatypeTypeType
                                                    (|Seq#Index| (Test.QueryReceipt.lines
                                                                   this@@21)
                                                                 |i#0@@2|))) :skolemid |995| :qid |Testidfy.37:20!1|)))) (or (Test.QueryReceipt.AllLinesWF this@@21) (not true) (not (=> (and (INTERNAL_le_boogie 0 (|i#0@@2!995!119| this@@21)) (INTERNAL_lt_boogie (|i#0@@2!995!119| this@@21) (|Seq#Length| (Test.QueryReceipt.lines this@@21)))) (Test.QueryReceiptLine.WF ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@21) (|i#0@@2!995!119| this@@21))))))))) :pattern ((Test.QueryReceipt.AllLinesWF this@@21)) :skolemid |997| :qid |Testidfy.36:15|)))))
(assert (forall ((arg1@@81 Int)(arg0@@181 T@U)) (! (= (type (Test.QueryReceipt.ChildAt arg0@@181 arg1@@81)) DatatypeTypeType) :pattern ((Test.QueryReceipt.ChildAt arg0@@181 arg1@@81)) :qid |funType:Test.QueryReceipt.ChildAt|)))
(assert (forall ((this@@24 T@U)(|i#0@@4| Int)) (! (=> (= (type this@@24) DatatypeTypeType) (=> (and ($Is this@@24 Tclass.Test.QueryReceipt) (INTERNAL_le_boogie 0 |i#0@@4|)) (= (|Test.QueryReceipt.ChildAt#requires| this@@24 |i#0@@4|) (and (Test.QueryReceipt.AllLinesWF this@@24) (Test.QueryReceipt.Structure this@@24) (INTERNAL_lt_boogie |i#0@@4| (INTERNAL_sub_boogie (|Seq#Length| (Test.QueryReceipt.lines this@@24)) 1)))))) :pattern ((|Test.QueryReceipt.ChildAt#requires| this@@24 |i#0@@4|)) :skolemid |1005| :qid |Testidfy.40:14!16|)))
(assert (forall ((bx@@58 T@U)) (! (=> (and (= (type bx@@58) BoxType) ($IsBox bx@@58 Tclass.Test.__default)) (and (= ($Box ($Unbox refType bx@@58)) bx@@58) ($Is ($Unbox refType bx@@58) Tclass.Test.__default))) :pattern (($IsBox bx@@58 Tclass.Test.__default)) :skolemid |1015| :qid |unknown.0:0!32|)))
(assert (forall (($o@@9 T@U)) (! (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.Test.__default) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.Test.__default)))) :pattern (($Is $o@@9 Tclass.Test.__default)) :skolemid |1016| :qid |unknown.0:0!36|)))
(assert (forall (($o@@10 T@U)($h@@29 T@U)) (! (=> (and (= (type $o@@10) refType) (= (type $h@@29) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.Test.__default $h@@29) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@29 $o@@10) alloc))))) :pattern (($IsAlloc $o@@10 Tclass.Test.__default $h@@29)) :skolemid |1017| :qid |unknown.0:0!38|)))
(assert (forall ((bx@@59 T@U)) (! (=> (and (= (type bx@@59) BoxType) ($IsBox bx@@59 Tclass.Common.byte)) (and (= ($Box ($Unbox intType bx@@59)) bx@@59) ($Is ($Unbox intType bx@@59) Tclass.Common.byte))) :pattern (($IsBox bx@@59 Tclass.Common.byte)) :skolemid |1018| :qid |unknown.0:0!43|)))
(assert (forall ((|i#0@@7| T@U)) (! (=> (= (type |i#0@@7|) intType) (= ($Is |i#0@@7| Tclass.Common.byte) (and (INTERNAL_le_boogie 0 (U_2_int |i#0@@7|)) (INTERNAL_lt_boogie (U_2_int |i#0@@7|) 256)))) :pattern (($Is |i#0@@7| Tclass.Common.byte)) :skolemid |1019| :qid |unknown.0:0!46|)))
(assert (forall ((|i#0@@8| T@U)($h@@30 T@U)) (! (=> (and (= (type |i#0@@8|) intType) (= (type $h@@30) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@8| Tclass.Common.byte $h@@30)) :pattern (($IsAlloc |i#0@@8| Tclass.Common.byte $h@@30)) :skolemid |1020| :qid |unknown.0:0!51|)))
(assert (forall ((|s#0| T@U)) (! (=> (= (type |s#0|) (SeqType BoxType)) (= ($Is |s#0| Tclass.Common.Key) (and ($Is |s#0| (TSeq Tclass.Common.byte)) (INTERNAL_le_boogie (|Seq#Length| |s#0|) 1024)))) :pattern (($Is |s#0| Tclass.Common.Key)) :skolemid |1021| :qid |unknown.0:0!53|)))
(assert (forall ((|s#0@@0| T@U)($h@@31 T@U)) (! (=> (and (= (type |s#0@@0|) (SeqType BoxType)) (= (type $h@@31) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@0| Tclass.Common.Key $h@@31) ($IsAlloc |s#0@@0| (TSeq Tclass.Common.byte) $h@@31))) :pattern (($IsAlloc |s#0@@0| Tclass.Common.Key $h@@31)) :skolemid |1022| :qid |unknown.0:0!55|)))
(assert (forall ((bx@@60 T@U)) (! (=> (and (= (type bx@@60) BoxType) ($IsBox bx@@60 Tclass.Common.__default)) (and (= ($Box ($Unbox refType bx@@60)) bx@@60) ($Is ($Unbox refType bx@@60) Tclass.Common.__default))) :pattern (($IsBox bx@@60 Tclass.Common.__default)) :skolemid |1023| :qid |unknown.0:0!62|)))
(assert (forall (($o@@11 T@U)) (! (=> (= (type $o@@11) refType) (= ($Is $o@@11 Tclass.Common.__default) (or (= $o@@11 null) (= (dtype $o@@11) Tclass.Common.__default)))) :pattern (($Is $o@@11 Tclass.Common.__default)) :skolemid |1024| :qid |unknown.0:0!65|)))
(assert (forall (($o@@12 T@U)($h@@32 T@U)) (! (=> (and (= (type $o@@12) refType) (= (type $h@@32) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@12 Tclass.Common.__default $h@@32) (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@32 $o@@12) alloc))))) :pattern (($IsAlloc $o@@12 Tclass.Common.__default $h@@32)) :skolemid |1025| :qid |unknown.0:0!69|)))
(assert (forall ((|key#0@@0| T@U)) (! (=> (and (= (type |key#0@@0|) (SeqType BoxType)) ($Is |key#0@@0| Tclass.Common.Key)) (= (|Common.__default.AnyKey#requires| |key#0@@0|) true)) :pattern ((|Common.__default.AnyKey#requires| |key#0@@0|)) :skolemid |1027| :qid |Commonidfy.6:18!72|)))
(assert (! (or (not true) (forall ((|key#0@@1| T@U)) (! (=> (and (= (type |key#0@@1|) (SeqType BoxType)) (or (|Common.__default.AnyKey#canCall| |key#0@@1|) ($Is |key#0@@1| Tclass.Common.Key))) (= (Common.__default.AnyKey |key#0@@1|) (U_2_bool (Lit (bool_2_U true))))) :pattern ((Common.__default.AnyKey |key#0@@1|)) :skolemid |1028| :qid |Commonidfy.6:18!76|)))))
(assert (forall ((|keys#0@@0| T@U)) (! (=> (and (= (type |keys#0@@0|) (MapType0Type BoxType boolType)) ($Is |keys#0@@0| (TISet Tclass.Common.Key))) (= (|Common.__default.TotalSet#requires| |keys#0@@0|) true)) :pattern ((|Common.__default.TotalSet#requires| |keys#0@@0|)) :skolemid |1031| :qid |Commonidfy.10:20!84|)))
(assert (! (or (not true) (forall ((|keys#0@@1| T@U)) (! (or (not (and (= (type |keys#0@@1|) (MapType0Type BoxType boolType)) (or (|Common.__default.TotalSet#canCall| |keys#0@@1|) ($Is |keys#0@@1| (TISet Tclass.Common.Key))))) (and (forall ((|k#0@@1| T@U)) (! (=> (and (= (type |k#0@@1|) (SeqType BoxType)) ($Is |k#0@@1| Tclass.Common.Key)) (|Common.__default.AnyKey#canCall| |k#0@@1|)) :pattern ((MapType0Select |keys#0@@1| ($Box |k#0@@1|))) :pattern ((Common.__default.AnyKey |k#0@@1|)) :skolemid |1033| :qid |Commonidfy.11:12|)) (or (not (Common.__default.TotalSet |keys#0@@1|)) (forall ((|k#0@@2| T@U)) (! (=> (= (type |k#0@@2|) (SeqType BoxType)) (=> (and ($Is |k#0@@2| Tclass.Common.Key) (Common.__default.AnyKey |k#0@@2|)) (U_2_bool (MapType0Select |keys#0@@1| ($Box |k#0@@2|))))) :pattern ((MapType0Select |keys#0@@1| ($Box |k#0@@2|))) :pattern ((Common.__default.AnyKey |k#0@@2|)) :skolemid |1032| :qid |Commonidfy.11:12!90|))) (or (Common.__default.TotalSet |keys#0@@1|) (not (=> (= (type (|k#0@@2!1032!121| |keys#0@@1|)) (SeqType BoxType)) (=> (and ($Is (|k#0@@2!1032!121| |keys#0@@1|) Tclass.Common.Key) (Common.__default.AnyKey (|k#0@@2!1032!121| |keys#0@@1|))) (U_2_bool (MapType0Select |keys#0@@1| ($Box (|k#0@@2!1032!121| |keys#0@@1|)))))))))) :pattern ((Common.__default.TotalSet |keys#0@@1|)) :skolemid |1034| :qid |Commonidfy.10:20!92|)))))
(assert (forall ((arg0@@182 T@T)(arg1@@82 T@T)) (! (= (Ctor (MapType4Type arg0@@182 arg1@@82)) 26) :qid |ctor:MapType4Type|)))
(assert (forall ((arg0@@183 T@T)(arg1@@83 T@T)) (! (= (MapType4TypeInv0 (MapType4Type arg0@@183 arg1@@83)) arg0@@183) :pattern ((MapType4Type arg0@@183 arg1@@83)) :qid |typeInv:MapType4TypeInv0|)))
(assert (forall ((arg0@@184 T@T)(arg1@@84 T@T)) (! (= (MapType4TypeInv1 (MapType4Type arg0@@184 arg1@@84)) arg1@@84) :pattern ((MapType4Type arg0@@184 arg1@@84)) :qid |typeInv:MapType4TypeInv1|)))
(assert (forall ((arg0@@185 T@U)(arg1@@85 T@U)(arg2@@33 T@U)) (! (= (type (MapType4Select arg0@@185 arg1@@85 arg2@@33)) (MapType4TypeInv1 (type arg0@@185))) :pattern ((MapType4Select arg0@@185 arg1@@85 arg2@@33)) :qid |funType:MapType4Select|)))
(assert (forall ((arg0@@186 T@U)(arg1@@86 T@U)(arg2@@34 T@U)(arg3@@12 T@U)) (! (= (type (MapType4Store arg0@@186 arg1@@86 arg2@@34 arg3@@12)) (MapType4Type (type arg1@@86) (type arg3@@12))) :pattern ((MapType4Store arg0@@186 arg1@@86 arg2@@34 arg3@@12)) :qid |funType:MapType4Store|)))
(assert (forall ((m@@54 T@U)(x0@@14 T@U)(x1@@8 T@U)(val@@15 T@U)) (! (=> (= (type val@@15) (MapType4TypeInv1 (type m@@54))) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 val@@15) x0@@14 x1@@8) val@@15)) :weight 0 :qid |mapAx0:MapType4Select|)))
(assert (forall ((val@@16 T@U)(m@@55 T@U)(x0@@15 T@U)(x1@@9 T@U)(y0@@10 T@U)(y1@@6 T@U)) (! (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 val@@16) y0@@10 y1@@6) (MapType4Select m@@55 y0@@10 y1@@6))) :weight 0 :qid |mapAx1:MapType4Select:0|)))
(assert (forall ((m@@56 T@U)(x0@@16 T@U)(x1@@10 T@U)(y0@@11 T@U)(y1@@7 T@U)(val@@17 T@U)) (! (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 val@@17) y0@@11 y1@@7) (MapType4Select m@@56 y0@@11 y1@@7))) :weight 0 :qid |mapAx1:MapType4Select:1|)))
(assert (forall ((val@@18 T@U)(m@@57 T@U)(x0@@17 T@U)(x1@@11 T@U)(y0@@12 T@U)(y1@@8 T@U)) (! (or true (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 val@@18) y0@@12 y1@@8) (MapType4Select m@@57 y0@@12 y1@@8))) :weight 0 :qid |mapAx2:MapType4Select|)))
(assert (forall ((arg2@@35 T@U)(arg3@@13 Bool)(arg0@@187 T@U)(arg1@@87 T@U)) (! (= (type (|lambda#0| arg0@@187 arg1@@87 arg2@@35 arg3@@13)) (MapType4Type refType boolType)) :pattern ((|lambda#0| arg0@@187 arg1@@87 arg2@@35 arg3@@13)) :qid |funType:lambda#0|)))
(assert (forall ((|l#0| T@U)(|l#1| T@U)(|l#2| T@U)(|l#3| Bool)($o@@13 T@U)($f T@U)) (! (=> (and (= (type |l#0|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type)) (= (type |l#2|) (FieldType boolType)) (= (type $o@@13) refType) (= (type $f) (FieldType (FieldTypeInv0 (type $f))))) (= (U_2_bool (MapType4Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@13 $f)) (=> (and (not (= $o@@13 |l#0|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@13) |l#2|))) |l#3|))) :pattern ((MapType4Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@13 $f)) :skolemid |1038| :qid |DafnyPreludebpl.129:1|)))
(assert (forall ((arg0@@188 T@U)(arg1@@88 T@U)(arg2@@36 T@U)(arg3@@14 Bool)) (! (= (type (|lambda#1| arg0@@188 arg1@@88 arg2@@36 arg3@@14)) (MapType4Type refType boolType)) :pattern ((|lambda#1| arg0@@188 arg1@@88 arg2@@36 arg3@@14)) :qid |funType:lambda#1|)))
(assert (forall ((|l#0@@0| T@U)(|l#1@@0| T@U)(|l#2@@0| T@U)(|l#3@@0| Bool)($o@@14 T@U)($f@@0 T@U)) (! (=> (and (= (type |l#0@@0|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type)) (= (type |l#2@@0|) (FieldType boolType)) (= (type $o@@14) refType) (= (type $f@@0) (FieldType (FieldTypeInv0 (type $f@@0))))) (= (U_2_bool (MapType4Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@14 $f@@0)) (=> (and (not (= $o@@14 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@14) |l#2@@0|))) |l#3@@0|))) :pattern ((MapType4Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|)
                               $o@@14
                               $f@@0)) :skolemid |1039| :qid |DafnyPreludebpl.129:1!135|)))
(assert (forall ((arg1@@89 T@U)(arg2@@37 T@U)(arg3@@15 Bool)(arg0@@189 T@U)) (! (= (type (|lambda#2| arg0@@189 arg1@@89 arg2@@37 arg3@@15)) (MapType4Type refType boolType)) :pattern ((|lambda#2| arg0@@189 arg1@@89 arg2@@37 arg3@@15)) :qid |funType:lambda#2|)))
(assert (forall ((|l#0@@1| T@U)(|l#1@@1| T@U)(|l#2@@1| T@U)(|l#3@@1| Bool)($o@@15 T@U)($f@@1 T@U)) (! (=> (and (= (type |l#0@@1|) refType) (= (type |l#1@@1|) (MapType0Type refType MapType1Type)) (= (type |l#2@@1|) (FieldType boolType)) (= (type $o@@15) refType) (= (type $f@@1) (FieldType (FieldTypeInv0 (type $f@@1))))) (= (U_2_bool (MapType4Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@15 $f@@1)) (=> (and (not (= $o@@15 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@15) |l#2@@1|))) |l#3@@1|))) :pattern ((MapType4Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|)
                               $o@@15
                               $f@@1)) :skolemid |1040| :qid |DafnyPreludebpl.129:1!141|)))
(assert (forall ((arg0@@190 T@U)(arg1@@90 T@U)(arg2@@38 T@U)(arg3@@16 Bool)) (! (= (type (|lambda#3| arg0@@190 arg1@@90 arg2@@38 arg3@@16)) (MapType4Type refType boolType)) :pattern ((|lambda#3| arg0@@190 arg1@@90 arg2@@38 arg3@@16)) :qid |funType:lambda#3|)))
(assert (forall ((|l#0@@2| T@U)(|l#1@@2| T@U)(|l#2@@2| T@U)(|l#3@@2| Bool)($o@@16 T@U)($f@@2 T@U)) (! (=> (and (= (type |l#0@@2|) refType) (= (type |l#1@@2|) (MapType0Type refType MapType1Type)) (= (type |l#2@@2|) (FieldType boolType)) (= (type $o@@16) refType) (= (type $f@@2) (FieldType (FieldTypeInv0 (type $f@@2))))) (= (U_2_bool (MapType4Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@16 $f@@2)) (=> (and (not (= $o@@16 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@16) |l#2@@2|))) |l#3@@2|))) :pattern ((MapType4Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|)
                               $o@@16
                               $f@@2)) :skolemid |1041| :qid |DafnyPreludebpl.129:1!144|)))
(assert (forall ((arg3@@17 Bool)(arg0@@191 T@U)(arg1@@91 T@U)(arg2@@39 T@U)) (! (= (type (|lambda#4| arg0@@191 arg1@@91 arg2@@39 arg3@@17)) (MapType4Type refType boolType)) :pattern ((|lambda#4| arg0@@191 arg1@@91 arg2@@39 arg3@@17)) :qid |funType:lambda#4|)))
(assert (forall ((|l#0@@3| T@U)(|l#1@@3| T@U)(|l#2@@3| T@U)(|l#3@@3| Bool)($o@@17 T@U)($f@@3 T@U)) (! (=> (and (= (type |l#0@@3|) refType) (= (type |l#1@@3|) (MapType0Type refType MapType1Type)) (= (type |l#2@@3|) (FieldType boolType)) (= (type $o@@17) refType) (= (type $f@@3) (FieldType (FieldTypeInv0 (type $f@@3))))) (= (U_2_bool (MapType4Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@17 $f@@3)) (=> (and (not (= $o@@17 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@17) |l#2@@3|))) |l#3@@3|))) :pattern ((MapType4Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|)
                               $o@@17
                               $f@@3)) :skolemid |1042| :qid |DafnyPreludebpl.129:1!148|)))
(assert (forall ((arg0@@192 T@U)(arg1@@92 T@U)(arg2@@40 T@U)(arg3@@18 Bool)) (! (= (type (|lambda#5| arg0@@192 arg1@@92 arg2@@40 arg3@@18)) (MapType4Type refType boolType)) :pattern ((|lambda#5| arg0@@192 arg1@@92 arg2@@40 arg3@@18)) :qid |funType:lambda#5|)))
(assert (forall ((|l#0@@4| T@U)(|l#1@@4| T@U)(|l#2@@4| T@U)(|l#3@@4| Bool)($o@@18 T@U)($f@@4 T@U)) (! (=> (and (= (type |l#0@@4|) refType) (= (type |l#1@@4|) (MapType0Type refType MapType1Type)) (= (type |l#2@@4|) (FieldType boolType)) (= (type $o@@18) refType) (= (type $f@@4) (FieldType (FieldTypeInv0 (type $f@@4))))) (= (U_2_bool (MapType4Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@18 $f@@4)) (=> (and (not (= $o@@18 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@18) |l#2@@4|))) |l#3@@4|))) :pattern ((MapType4Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|)
                               $o@@18
                               $f@@4)) :skolemid |1043| :qid |DafnyPreludebpl.129:1!151|)))
(assert (forall ((arg0@@193 T@U)(arg1@@93 T@U)(arg2@@41 T@U)(arg3@@19 Bool)) (! (= (type (|lambda#6| arg0@@193 arg1@@93 arg2@@41 arg3@@19)) (MapType4Type refType boolType)) :pattern ((|lambda#6| arg0@@193 arg1@@93 arg2@@41 arg3@@19)) :qid |funType:lambda#6|)))
(assert (forall ((|l#0@@5| T@U)(|l#1@@5| T@U)(|l#2@@5| T@U)(|l#3@@5| Bool)($o@@19 T@U)($f@@5 T@U)) (! (=> (and (= (type |l#0@@5|) refType) (= (type |l#1@@5|) (MapType0Type refType MapType1Type)) (= (type |l#2@@5|) (FieldType boolType)) (= (type $o@@19) refType) (= (type $f@@5) (FieldType (FieldTypeInv0 (type $f@@5))))) (= (U_2_bool (MapType4Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@19 $f@@5)) (=> (and (not (= $o@@19 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@19) |l#2@@5|))) |l#3@@5|))) :pattern ((MapType4Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|)
                               $o@@19
                               $f@@5)) :skolemid |1044| :qid |DafnyPreludebpl.129:1!154|)))
(assert (forall ((arg2@@42 T@U)(arg3@@20 Bool)(arg0@@194 T@U)(arg1@@94 T@U)) (! (= (type (|lambda#7| arg0@@194 arg1@@94 arg2@@42 arg3@@20)) (MapType4Type refType boolType)) :pattern ((|lambda#7| arg0@@194 arg1@@94 arg2@@42 arg3@@20)) :qid |funType:lambda#7|)))
(assert (forall ((|l#0@@6| T@U)(|l#1@@6| T@U)(|l#2@@6| T@U)(|l#3@@6| Bool)($o@@20 T@U)($f@@6 T@U)) (! (=> (and (= (type |l#0@@6|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type)) (= (type |l#2@@6|) (FieldType boolType)) (= (type $o@@20) refType) (= (type $f@@6) (FieldType (FieldTypeInv0 (type $f@@6))))) (= (U_2_bool (MapType4Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@20 $f@@6)) (=> (and (not (= $o@@20 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@20) |l#2@@6|))) |l#3@@6|))) :pattern ((MapType4Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|)
                               $o@@20
                               $f@@6)) :skolemid |1045| :qid |DafnyPreludebpl.129:1!160|)))
(assert (forall ((arg0@@195 T@U)(arg1@@95 T@U)(arg2@@43 T@U)(arg3@@21 Bool)) (! (= (type (|lambda#8| arg0@@195 arg1@@95 arg2@@43 arg3@@21)) (MapType4Type refType boolType)) :pattern ((|lambda#8| arg0@@195 arg1@@95 arg2@@43 arg3@@21)) :qid |funType:lambda#8|)))
(assert (forall ((|l#0@@7| T@U)(|l#1@@7| T@U)(|l#2@@7| T@U)(|l#3@@7| Bool)($o@@21 T@U)($f@@7 T@U)) (! (=> (and (= (type |l#0@@7|) refType) (= (type |l#1@@7|) (MapType0Type refType MapType1Type)) (= (type |l#2@@7|) (FieldType boolType)) (= (type $o@@21) refType) (= (type $f@@7) (FieldType (FieldTypeInv0 (type $f@@7))))) (= (U_2_bool (MapType4Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@21 $f@@7)) (=> (and (not (= $o@@21 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@21) |l#2@@7|))) |l#3@@7|))) :pattern ((MapType4Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|)
                               $o@@21
                               $f@@7)) :skolemid |1046| :qid |DafnyPreludebpl.129:1!168|)))
(assert (forall ((arg0@@196 T@U)(arg1@@96 T@U)(arg2@@44 T@U)(arg3@@22 Bool)) (! (= (type (|lambda#9| arg0@@196 arg1@@96 arg2@@44 arg3@@22)) (MapType4Type refType boolType)) :pattern ((|lambda#9| arg0@@196 arg1@@96 arg2@@44 arg3@@22)) :qid |funType:lambda#9|)))
(assert (forall ((|l#0@@8| T@U)(|l#1@@8| T@U)(|l#2@@8| T@U)(|l#3@@8| Bool)($o@@22 T@U)($f@@8 T@U)) (! (=> (and (= (type |l#0@@8|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type)) (= (type |l#2@@8|) (FieldType boolType)) (= (type $o@@22) refType) (= (type $f@@8) (FieldType (FieldTypeInv0 (type $f@@8))))) (= (U_2_bool (MapType4Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@22 $f@@8)) (=> (and (not (= $o@@22 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@22) |l#2@@8|))) |l#3@@8|))) :pattern ((MapType4Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|)
                               $o@@22
                               $f@@8)) :skolemid |1047| :qid |DafnyPreludebpl.129:1!174|)))
(assert (forall ((arg1@@97 T@U)(arg2@@45 T@U)(arg3@@23 Bool)(arg0@@197 T@U)) (! (= (type (|lambda#10| arg0@@197 arg1@@97 arg2@@45 arg3@@23)) (MapType4Type refType boolType)) :pattern ((|lambda#10| arg0@@197 arg1@@97 arg2@@45 arg3@@23)) :qid |funType:lambda#10|)))
(assert (forall ((|l#0@@9| T@U)(|l#1@@9| T@U)(|l#2@@9| T@U)(|l#3@@9| Bool)($o@@23 T@U)($f@@9 T@U)) (! (=> (and (= (type |l#0@@9|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type)) (= (type |l#2@@9|) (FieldType boolType)) (= (type $o@@23) refType) (= (type $f@@9) (FieldType (FieldTypeInv0 (type $f@@9))))) (= (U_2_bool (MapType4Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@23 $f@@9)) (=> (and (not (= $o@@23 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@23) |l#2@@9|))) |l#3@@9|))) :pattern ((MapType4Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|)
                               $o@@23
                               $f@@9)) :skolemid |1048| :qid |DafnyPreludebpl.129:1!181|)))
(assert (forall ((arg0@@198 T@U)(arg1@@98 T@U)(arg2@@46 T@U)(arg3@@24 Bool)) (! (= (type (|lambda#11| arg0@@198 arg1@@98 arg2@@46 arg3@@24)) (MapType4Type refType boolType)) :pattern ((|lambda#11| arg0@@198 arg1@@98 arg2@@46 arg3@@24)) :qid |funType:lambda#11|)))
(assert (forall ((|l#0@@10| T@U)(|l#1@@10| T@U)(|l#2@@10| T@U)(|l#3@@10| Bool)($o@@24 T@U)($f@@10 T@U)) (! (=> (and (= (type |l#0@@10|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type)) (= (type |l#2@@10|) (FieldType boolType)) (= (type $o@@24) refType) (= (type $f@@10) (FieldType (FieldTypeInv0 (type $f@@10))))) (= (U_2_bool (MapType4Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@24 $f@@10)) (=> (and (not (= $o@@24 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@24) |l#2@@10|))) |l#3@@10|))) :pattern ((MapType4Select (|lambda#11| |l#0@@10|
                                            |l#1@@10|
                                            |l#2@@10|
                                            |l#3@@10|)
                               $o@@24
                               $f@@10)) :skolemid |1049| :qid |DafnyPreludebpl.129:1!189|)))
(assert (! (= (type this@@27) DatatypeTypeType)))
(assert (! ($Is this@@27 Tclass.Test.QueryReceipt)))
(assert (! (INTERNAL_le_boogie 0 |i#0@@9|)))
(assert (! (= 9 $FunctionContextHeight)))
(assert (! (or |b$reqreads#0@0| (not (=> (and (= (type $o@@25!1008!123) refType) (= (type $f@@11!1008!124) (FieldType (FieldTypeInv0 (type $f@@11!1008!124)))) false) (U_2_bool (MapType4Select $_Frame@0@@0 $o@@25!1008!123 $f@@11!1008!124)))))))
(assert (! (|Test.QueryReceipt.AllLinesWF#canCall| this@@27)))
(assert (! (Test.QueryReceipt.AllLinesWF this@@27)))
(assert (! (or |b$reqreads#1@0| (not (=> (and (= (type $o@@26!1009!126) refType) (= (type $f@@12!1009!125) (FieldType (FieldTypeInv0 (type $f@@12!1009!125)))) false) (U_2_bool (MapType4Select $_Frame@0@@0 $o@@26!1009!126 $f@@12!1009!125)))))))
(assert (! (|Test.QueryReceipt.Structure#canCall| this@@27)))
(assert (! (Test.QueryReceipt.Structure this@@27)))
(assert (! (Test.QueryReceipt.QueryReceipt_q this@@27)))
(assert (! (INTERNAL_lt_boogie |i#0@@9| (INTERNAL_sub_boogie (|Seq#Length| (Test.QueryReceipt.lines this@@27)) 1))))
(assert (! (or (not (=> (= (ControlFlow 0 39141) (- 0 56539)) |b$reqreads#0@0|)) (and |b$reqreads#0@0| (or (not (=> (= (ControlFlow 0 39141) (- 0 56540)) |b$reqreads#1@0|)) (and |b$reqreads#1@0| (or (not (=> (= (ControlFlow 0 39141) 39145) true)) (and (= (ControlFlow 0 39141) 39147) (= $_Frame@0 (|lambda#11| null $Heap alloc false)) (! (Test.QueryReceipt.QueryReceipt_q this@@27)) (or (not (=> (= (ControlFlow 0 39147) (- 0 56573)) (and (<= 0 |i#0@@9|) (< |i#0@@9| (|Seq#Length| (Test.QueryReceipt.lines this@@27)))))) (and (Test.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))) (or (not (=> (= (ControlFlow 0 39147) (- 0 56605)) (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) (and (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))) ($IsAlloc (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))) Tclass.Test.ChildMap $Heap) (|Test.ChildMap.WF#canCall| (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (! (Test.QueryReceipt.QueryReceipt_q this@@27)) (Test.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))) (|Test.ChildMap.WF#canCall| (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (or (and (= (ControlFlow 0 39147) (- 0 56701)) (|Test.ChildMap.WF#canCall| (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (not (Test.ChildMap.WF ($LS $LZ) (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) (|Common.__default.TotalSet#canCall| (|IMap#Domain| (Test.ChildMap.mapp (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))))) (not (Common.__default.TotalSet (|IMap#Domain| (Test.ChildMap.mapp (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))))) (not (=> (= (type |k#0@@3!1010!127|) (SeqType BoxType)) (=> (and ($Is |k#0@@3!1010!127| Tclass.Common.Key) (Common.__default.AnyKey |k#0@@3!1010!127|)) (U_2_bool (MapType0Select (|IMap#Domain| (Test.ChildMap.mapp (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) ($Box |k#0@@3!1010!127|))))))) (and (= (ControlFlow 0 39147) (- 0 56869)) (|Test.ChildMap.WF#canCall| (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (not (Test.ChildMap.WF ($LS $LZ) (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) (not (=> (= (type |k#1@@3!1012!128|) (SeqType BoxType)) (=> (and ($Is |k#1@@3!1012!128| Tclass.Common.Key) (Common.__default.AnyKey |k#1@@3!1012!128|)) (Test.BetreeNode.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) ($Box |k#1@@3!1012!128|)))))))) (not (=> (and (Test.ChildMap.WF ($LS ($LS $LZ)) (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (! (Test.QueryReceipt.QueryReceipt_q this@@27))) (and (=> (= (ControlFlow 0 39147) (- 0 57033)) (and (<= 0 |i#0@@9|) (< |i#0@@9| (|Seq#Length| (Test.QueryReceipt.lines this@@27))))) (=> (and (<= 0 |i#0@@9|) (< |i#0@@9| (|Seq#Length| (Test.QueryReceipt.lines this@@27)))) (=> (Test.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))) (and (=> (= (ControlFlow 0 39147) (- 0 57065)) (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (=> (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))) (=> (Test.ChildMap.ChildMap_q (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (=> (and (! (Test.QueryReceipt.QueryReceipt_q this@@27)) (= (ControlFlow 0 39147) (- 0 57103))) (U_2_bool (MapType0Select (|IMap#Domain| (Test.ChildMap.mapp (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) ($Box (Test.QueryReceipt.key this@@27))))))))))))))))))))))))))
(check-sat)

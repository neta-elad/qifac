(set-option :produce-unsat-cores true)
(set-option :smt.core.minimize true)
(declare-fun |b544[unknown.0:0!24]| () Bool)
(declare-fun |b41[funType:Lit]| () Bool)
(declare-fun |b523[unknown.0:0!297]| () Bool)
(declare-fun |b696[Simpleridfy.41:18]| () Bool)
(declare-fun |b706[]| () Bool)
(declare-fun |b168[DafnyPreludebpl.659:18]| () Bool)
(declare-fun |b34[funType:Tag]| () Bool)
(declare-fun |b632[Simpleridfy.25:5!226]| () Bool)
(declare-fun |b202[DafnyPreludebpl.763:18]| () Bool)
(declare-fun |b479[unknown.0:0!86]| () Bool)
(declare-fun |b558[unknown.0:0!80]| () Bool)
(declare-fun |b606[unknown.0:0!174]| () Bool)
(declare-fun |b702[]| () Bool)
(declare-fun |b470[unknown.0:0!68]| () Bool)
(declare-fun |b582[unknown.0:0!136]| () Bool)
(declare-fun |b512[unknown.0:0!270]| () Bool)
(declare-fun |b14[cast:U_2_string]| () Bool)
(declare-fun |b328[DafnyPreludebpl.1243:21]| () Bool)
(declare-fun |b177[DafnyPreludebpl.686:18]| () Bool)
(declare-fun |b81[DafnyPreludebpl.210:14]| () Bool)
(declare-fun |b109[DafnyPreludebpl.367:15]| () Bool)
(declare-fun |b650[unknown.0:0!266]| () Bool)
(declare-fun |b256[DafnyPreludebpl.915:18]| () Bool)
(declare-fun |b165[DafnyPreludebpl.655:18]| () Bool)
(declare-fun |b496[unknown.0:0!133]| () Bool)
(declare-fun |b27[DafnyPreludebpl.42:15]| () Bool)
(declare-fun |b282[DafnyPreludebpl.1020:18]| () Bool)
(declare-fun |b161[DafnyPreludebpl.647:18]| () Bool)
(declare-fun |b602[unknown.0:0!169]| () Bool)
(declare-fun |b689[funType:lambda#9]| () Bool)
(declare-fun |b129[funType:$LS]| () Bool)
(declare-fun |b55[DafnyPreludebpl.141:18]| () Bool)
(declare-fun |b95[DafnyPreludebpl.250:15]| () Bool)
(declare-fun |b118[DafnyPreludebpl.399:15]| () Bool)
(declare-fun |b284[DafnyPreludebpl.1029:18]| () Bool)
(declare-fun |b563[unknown.0:0!92]| () Bool)
(declare-fun |b254[funType:Seq#Update]| () Bool)
(declare-fun |b357[funType:IMap#Merge]| () Bool)
(declare-fun |b399[unknown.0:0!89]| () Bool)
(declare-fun |b460[unknown.0:0!310]| () Bool)
(declare-fun |b329[DafnyPreludebpl.1245:21]| () Bool)
(declare-fun |b488[unknown.0:0!117]| () Bool)
(declare-fun |b121[funType:ORD#Minus]| () Bool)
(declare-fun |b478[funType:Tclass._System.___hTotalFunc0]| () Bool)
(declare-fun |b194[DafnyPreludebpl.741:18]| () Bool)
(declare-fun |b164[DafnyPreludebpl.653:18]| () Bool)
(declare-fun |b99[funType:IMap#Elements]| () Bool)
(declare-fun |b371[DafnyPreludebpl.1421:51]| () Bool)
(declare-fun |b465[unknown.0:0!35]| () Bool)
(declare-fun |b381[unknown.0:0!31]| () Bool)
(declare-fun |b489[funType:Tclass._System.___hFunc2]| () Bool)
(declare-fun |b468[unknown.0:0!52]| () Bool)
(declare-fun |b274[DafnyPreludebpl.992:18]| () Bool)
(declare-fun |b619[Simpleridfy.18:46!197]| () Bool)
(declare-fun |b228[DafnyPreludebpl.836:18]| () Bool)
(declare-fun |b627[funType:#Simpler.QueryReceipt.QueryReceipt]| () Bool)
(declare-fun |b159[DafnyPreludebpl.643:18]| () Bool)
(declare-fun |b477[unknown.0:0!82]| () Bool)
(declare-fun |b394[unknown.0:0!70]| () Bool)
(declare-fun |b156[DafnyPreludebpl.638:18]| () Bool)
(declare-fun |b143[DafnyPreludebpl.531:15]| () Bool)
(declare-fun |b401[unknown.0:0!98]| () Bool)
(declare-fun |b306[DafnyPreludebpl.1128:18]| () Bool)
(declare-fun |b491[funType:Tclass._System.___hFunc2_0]| () Bool)
(declare-fun |b13[typeInv:U_2_string]| () Bool)
(declare-fun |b270[DafnyPreludebpl.978:18]| () Bool)
(declare-fun |b547[unknown.0:0!40]| () Bool)
(declare-fun |b495[funType:Tclass._System.___hFunc2_2]| () Bool)
(declare-fun |b651[Simpleridfy.29:15!271]| () Bool)
(declare-fun |b659[unknown.0:0!13]| () Bool)
(declare-fun |b93[DafnyPreludebpl.242:15]| () Bool)
(declare-fun |b231[DafnyPreludebpl.842:18]| () Bool)
(declare-fun |b124[DafnyPreludebpl.422:15]| () Bool)
(declare-fun |b413[funType:Tclass._System.___hFunc1_1]| () Bool)
(declare-fun |b158[DafnyPreludebpl.641:18]| () Bool)
(declare-fun |b119[DafnyPreludebpl.404:15]| () Bool)
(declare-fun |b688[DafnyPreludebpl.129:1!147]| () Bool)
(declare-fun |b344[DafnyPreludebpl.1309:21]| () Bool)
(declare-fun |b258[k!313]| () Bool)
(declare-fun |b268[DafnyPreludebpl.968:15]| () Bool)
(declare-fun |b98[DafnyPreludebpl.272:15]| () Bool)
(declare-fun |b142[DafnyPreludebpl.530:14]| () Bool)
(declare-fun |b10[typeInv:U_2_rmode]| () Bool)
(declare-fun |b145[DafnyPreludebpl.554:22]| () Bool)
(declare-fun |b414[unknown.0:0!125]| () Bool)
(declare-fun |b166[DafnyPreludebpl.657:18]| () Bool)
(declare-fun |b262[DafnyPreludebpl.947:18]| () Bool)
(declare-fun |b300[DafnyPreludebpl.1105:15]| () Bool)
(declare-fun |b684[DafnyPreludebpl.129:1!141]| () Bool)
(declare-fun |b246[DafnyPreludebpl.891:18]| () Bool)
(declare-fun |b31[DafnyPreludebpl.49:15]| () Bool)
(declare-fun |b112[DafnyPreludebpl.375:15]| () Bool)
(declare-fun |b123[DafnyPreludebpl.416:15]| () Bool)
(declare-fun |b298[DafnyPreludebpl.1098:18]| () Bool)
(declare-fun |b430[unknown.0:0!232]| () Bool)
(declare-fun |b553[unknown.0:0!69]| () Bool)
(declare-fun |b608[Simpleridfy.13:15!178]| () Bool)
(declare-fun |b514[funType:Tclass._System.___hPartialFunc2]| () Bool)
(declare-fun |b292[DafnyPreludebpl.1067:15]| () Bool)
(declare-fun |b201[DafnyPreludebpl.761:18]| () Bool)
(declare-fun |b669[Commonidfy.6:18!41]| () Bool)
(declare-fun |b631[unknown.0:0!222]| () Bool)
(declare-fun |b471[funType:Tclass._System.___hPartialFunc0]| () Bool)
(declare-fun |b638[funType:Simpler.QueryReceipt.lines]| () Bool)
(declare-fun |b552[unknown.0:0!65]| () Bool)
(declare-fun |b363[DafnyPreludebpl.1413:30]| () Bool)
(declare-fun |b113[DafnyPreludebpl.379:15]| () Bool)
(declare-fun |b612[unknown.0:0!186]| () Bool)
(declare-fun |b653[Simpleridfy.35:15!290]| () Bool)
(declare-fun |b540[unknown.0:0!18]| () Bool)
(declare-fun |b595[Simpleridfy.12:40!156]| () Bool)
(declare-fun |b176[DafnyPreludebpl.684:18]| () Bool)
(declare-fun |b635[unknown.0:0!233]| () Bool)
(declare-fun |b147[DafnyPreludebpl.559:15]| () Bool)
(declare-fun |b313[DafnyPreludebpl.1159:21]| () Bool)
(declare-fun |b340[DafnyPreludebpl.1296:21]| () Bool)
(declare-fun |b546[unknown.0:0!32]| () Bool)
(declare-fun |b56[DafnyPreludebpl.143:15]| () Bool)
(declare-fun |b295[DafnyPreludebpl.1087:15]| () Bool)
(declare-fun |b210[DafnyPreludebpl.790:15]| () Bool)
(declare-fun |b656[Simpleridfy.39:14!307]| () Bool)
(declare-fun |b171[DafnyPreludebpl.672:18]| () Bool)
(declare-fun |b327[DafnyPreludebpl.1237:21]| () Bool)
(declare-fun |b384[unknown.0:0!39]| () Bool)
(declare-fun |b226[DafnyPreludebpl.830:18]| () Bool)
(declare-fun |b662[unknown.0:0!21]| () Bool)
(declare-fun |b524[unknown.0:0!299]| () Bool)
(declare-fun |b443[funType:Tclass._System.___hTotalFunc1_0]| () Bool)
(declare-fun |b199[DafnyPreludebpl.754:18]| () Bool)
(declare-fun |b576[funType:Simpler.ChildMap.mapp]| () Bool)
(declare-fun |b239[DafnyPreludebpl.870:17]| () Bool)
(declare-fun |b187[DafnyPreludebpl.729:18]| () Bool)
(declare-fun |b432[funType:Tclass._System.___hPartialFunc1]| () Bool)
(declare-fun |b233[DafnyPreludebpl.848:18]| () Bool)
(declare-fun |b348[DafnyPreludebpl.1347:21]| () Bool)
(declare-fun |b189[funType:ISet#Union]| () Bool)
(declare-fun |b192[DafnyPreludebpl.739:18]| () Bool)
(declare-fun |b542[unknown.0:0!22]| () Bool)
(declare-fun |b281[DafnyPreludebpl.1013:18]| () Bool)
(declare-fun |b91[DafnyPreludebpl.233:15]| () Bool)
(declare-fun |b273[DafnyPreludebpl.986:18]| () Bool)
(declare-fun |b245[funType:MultiSet#FromSeq]| () Bool)
(declare-fun |b296[DafnyPreludebpl.1092:18]| () Bool)
(declare-fun |b549[unknown.0:0!54]| () Bool)
(declare-fun |b362[DafnyPreludebpl.1404:21]| () Bool)
(declare-fun |b666[unknown.0:0!30]| () Bool)
(declare-fun |b377[DafnyPreludebpl.1468:15]| () Bool)
(declare-fun |b217[DafnyPreludebpl.808:18]| () Bool)
(declare-fun |b416[unknown.0:0!146]| () Bool)
(declare-fun |b437[unknown.0:0!244]| () Bool)
(declare-fun |b330[funType:Map#Merge]| () Bool)
(declare-fun |b236[DafnyPreludebpl.855:18]| () Bool)
(declare-fun |b464[unknown.0:0!29]| () Bool)
(declare-fun |b402[funType:Tclass._System.array]| () Bool)
(declare-fun |b60[DafnyPreludebpl.158:15]| () Bool)
(declare-fun |b291[funType:Seq#FromArray]| () Bool)
(declare-fun |b94[DafnyPreludebpl.246:15]| () Bool)
(declare-fun |b508[unknown.0:0!237]| () Bool)
(declare-fun |b585[unknown.0:0!140]| () Bool)
(declare-fun |b674[DafnyPreludebpl.129:1!103]| () Bool)
(declare-fun |b15[funType:string_2_U]| () Bool)
(declare-fun |b128[DafnyPreludebpl.462:18]| () Bool)
(declare-fun |b572[unknown.0:0!114]| () Bool)
(declare-fun |b649[unknown.0:0!264]| () Bool)
(declare-fun |b690[DafnyPreludebpl.129:1!153]| () Bool)
(declare-fun |b497[unknown.0:0!137]| () Bool)
(declare-fun |b486[unknown.0:0!105]| () Bool)
(declare-fun |b652[Simpleridfy.29:15!279]| () Bool)
(declare-fun |b472[unknown.0:0!72]| () Bool)
(declare-fun |b220[funType:MultiSet#UnionOne]| () Bool)
(declare-fun |b686[DafnyPreludebpl.129:1!143]| () Bool)
(declare-fun |b442[unknown.0:0!259]| () Bool)
(declare-fun |b4[typeInv:U_2_real]| () Bool)
(declare-fun |b260[funType:Seq#Singleton]| () Bool)
(declare-fun |b389[unknown.0:0!56]| () Bool)
(declare-fun |b574[Simpleridfy.6:30!119]| () Bool)
(declare-fun |b621[unknown.0:0!200]| () Bool)
(declare-fun |b241[DafnyPreludebpl.877:18]| () Bool)
(declare-fun |b665[unknown.0:0!26]| () Bool)
(declare-fun |b65[typeInv:SeqTypeInv0]| () Bool)
(declare-fun |b703[]| () Bool)
(declare-fun |b670[Commonidfy.10:20!48]| () Bool)
(declare-fun |b613[unknown.0:0!188]| () Bool)
(declare-fun |b223[DafnyPreludebpl.822:18]| () Bool)
(declare-fun |b541[funType:Tclass._System.Tuple2_0]| () Bool)
(declare-fun |b134[funType:MultiIndexField]| () Bool)
(declare-fun |b548[unknown.0:0!47]| () Bool)
(declare-fun |b351[DafnyPreludebpl.1355:21]| () Bool)
(declare-fun |b138[DafnyPreludebpl.491:18]| () Bool)
(declare-fun |b681[funType:lambda#5]| () Bool)
(declare-fun |b391[unknown.0:0!59]| () Bool)
(declare-fun |b372[DafnyPreludebpl.1423:14]| () Bool)
(declare-fun |b342[DafnyPreludebpl.1302:21]| () Bool)
(declare-fun |b265[DafnyPreludebpl.960:15]| () Bool)
(declare-fun |b467[unknown.0:0!45]| () Bool)
(declare-fun |b438[unknown.0:0!246]| () Bool)
(declare-fun |b447[unknown.0:0!267]| () Bool)
(declare-fun |b312[DafnyPreludebpl.1156:21]| () Bool)
(declare-fun |b22[funType:TBitvector]| () Bool)
(declare-fun |b452[funType:Tclass._System.___hFunc0_0]| () Bool)
(declare-fun |b400[unknown.0:0!93]| () Bool)
(declare-fun |b700[]| () Bool)
(declare-fun |b193[funType:ISet#Difference]| () Bool)
(declare-fun |b423[unknown.0:0!189]| () Bool)
(declare-fun |b379[DafnyPreludebpl.1478:15]| () Bool)
(declare-fun |b584[unknown.0:0!139]| () Bool)
(declare-fun |b207[DafnyPreludebpl.785:15]| () Bool)
(declare-fun |b434[funType:Tclass._System.___hPartialFunc1_0]| () Bool)
(declare-fun |b148[DafnyPreludebpl.563:15]| () Bool)
(declare-fun |b175[DafnyPreludebpl.680:18]| () Bool)
(declare-fun |b51[DafnyPreludebpl.117:15]| () Bool)
(declare-fun |b186[DafnyPreludebpl.727:18]| () Bool)
(declare-fun |b198[DafnyPreludebpl.752:18]| () Bool)
(declare-fun |b214[DafnyPreludebpl.803:18]| () Bool)
(declare-fun |b238[DafnyPreludebpl.866:17]| () Bool)
(declare-fun |b492[unknown.0:0!126]| () Bool)
(declare-fun |b431[unknown.0:0!236]| () Bool)
(declare-fun |b539[unknown.0:0!15]| () Bool)
(declare-fun |b605[unknown.0:0!172]| () Bool)
(declare-fun |b7[typeInv:U_2_bool]| () Bool)
(declare-fun |b106[DafnyPreludebpl.331:15]| () Bool)
(declare-fun |b247[DafnyPreludebpl.893:18]| () Bool)
(declare-fun |b370[DafnyPreludebpl.1420:51]| () Bool)
(declare-fun |b517[unknown.0:0!283]| () Bool)
(declare-fun |b153[funType:Set#Singleton]| () Bool)
(declare-fun |b435[unknown.0:0!241]| () Bool)
(declare-fun |b704[]| () Bool)
(declare-fun |b536[funType:DatatypeCtorId]| () Bool)
(declare-fun |b405[unknown.0:0!104]| () Bool)
(declare-fun |b356[DafnyPreludebpl.1385:21]| () Bool)
(declare-fun |b322[funType:Map#Glue]| () Bool)
(declare-fun |b82[DafnyPreludebpl.211:14]| () Bool)
(declare-fun |b310[funType:Map#Empty]| () Bool)
(declare-fun |b283[DafnyPreludebpl.1025:18]| () Bool)
(declare-fun |b107[DafnyPreludebpl.333:15]| () Bool)
(declare-fun |b127[DafnyPreludebpl.438:15]| () Bool)
(declare-fun |b208[DafnyPreludebpl.786:15]| () Bool)
(declare-fun |b183[funType:ISet#Empty]| () Bool)
(declare-fun |b462[unknown.0:0!9]| () Bool)
(declare-fun |b335[DafnyPreludebpl.1263:21]| () Bool)
(declare-fun |b425[unknown.0:0!207]| () Bool)
(declare-fun |b251[k!312]| () Bool)
(declare-fun |b163[funType:Set#Union]| () Bool)
(declare-fun |b591[funType:#Simpler.BetreeNode.BetreeNode]| () Bool)
(declare-fun |b685[funType:lambda#7]| () Bool)
(declare-fun |b625[Simpleridfy.19:15!208]| () Bool)
(declare-fun |b562[DafnyPreludebpl.545:12!90]| () Bool)
(declare-fun |b331[DafnyPreludebpl.1250:21]| () Bool)
(declare-fun |b243[DafnyPreludebpl.882:18]| () Bool)
(declare-fun |b551[unknown.0:0!62]| () Bool)
(declare-fun |b375[DafnyPreludebpl.1426:14]| () Bool)
(declare-fun |b660[unknown.0:0!16]| () Bool)
(declare-fun |b614[Simpleridfy.18:46!190]| () Bool)
(declare-fun |b52[funType:char#Minus]| () Bool)
(declare-fun |b480[funType:Tclass._System.___hTotalFunc0_0]| () Bool)
(declare-fun |b620[Simpleridfy.18:46!199]| () Bool)
(declare-fun |b693[funType:lambda#11]| () Bool)
(declare-fun |b25[DafnyPreludebpl.38:15]| () Bool)
(declare-fun |b527[funType:Tclass._System.___hTotalFunc2_0]| () Bool)
(declare-fun |b224[DafnyPreludebpl.825:18]| () Bool)
(declare-fun |b6[funType:real_2_U]| () Bool)
(declare-fun |b43[DafnyPreludebpl.90:18]| () Bool)
(declare-fun |b264[DafnyPreludebpl.955:18]| () Bool)
(declare-fun |b311[DafnyPreludebpl.1152:21]| () Bool)
(declare-fun |b29[funType:Inv1_TMap]| () Bool)
(declare-fun |b97[DafnyPreludebpl.264:15]| () Bool)
(declare-fun |b655[funType:Simpler.QueryReceipt.ChildAt]| () Bool)
(declare-fun |b191[DafnyPreludebpl.737:18]| () Bool)
(declare-fun |b687[funType:lambda#8]| () Bool)
(declare-fun |b49[DafnyPreludebpl.111:15]| () Bool)
(declare-fun |b459[unknown.0:0!303]| () Bool)
(declare-fun |b490[unknown.0:0!123]| () Bool)
(declare-fun |b321[DafnyPreludebpl.1212:21]| () Bool)
(declare-fun |b668[Commonidfy.6:18!37]| () Bool)
(declare-fun |b579[Simpleridfy.6:30!129]| () Bool)
(declare-fun |b87[DafnyPreludebpl.223:15]| () Bool)
(declare-fun |b71[DafnyPreludebpl.177:15]| () Bool)
(declare-fun |b626[Simpleridfy.19:15!209]| () Bool)
(declare-fun |b305[DafnyPreludebpl.1123:18]| () Bool)
(declare-fun |b154[DafnyPreludebpl.636:18]| () Bool)
(declare-fun |b364[DafnyPreludebpl.1414:30]| () Bool)
(declare-fun |b530[unknown.0:0!308]| () Bool)
(declare-fun |b474[unknown.0:0!74]| () Bool)
(declare-fun |b657[unknown.0:0!7]| () Bool)
(declare-fun |b209[DafnyPreludebpl.787:15]| () Bool)
(declare-fun |b374[DafnyPreludebpl.1425:14]| () Bool)
(declare-fun |b581[Simpleridfy.6:30!134]| () Bool)
(declare-fun |b586[Simpleridfy.7:15!142]| () Bool)
(declare-fun |b454[unknown.0:0!282]| () Bool)
(declare-fun |b637[unknown.0:0!234]| () Bool)
(declare-fun |b373[DafnyPreludebpl.1424:14]| () Bool)
(declare-fun |b568[Simpleridfy.6:30]| () Bool)
(declare-fun |b297[DafnyPreludebpl.1095:18]| () Bool)
(declare-fun |b408[unknown.0:0!115]| () Bool)
(declare-fun |b600[Simpleridfy.12:40!163]| () Bool)
(declare-fun |b151[DafnyPreludebpl.627:18]| () Bool)
(declare-fun |b406[unknown.0:0!108]| () Bool)
(declare-fun |b146[DafnyPreludebpl.557:15]| () Bool)
(declare-fun |b633[Simpleridfy.25:5!227]| () Bool)
(declare-fun |b349[funType:IMap#Glue]| () Bool)
(declare-fun |b102[DafnyPreludebpl.287:15]| () Bool)
(declare-fun |b506[unknown.0:0!221]| () Bool)
(declare-fun |b332[DafnyPreludebpl.1253:21]| () Bool)
(declare-fun |b440[unknown.0:0!254]| () Bool)
(declare-fun |b185[funType:ISet#UnionOne]| () Bool)
(declare-fun |b16[typeInv:U_2_regex]| () Bool)
(declare-fun |b451[unknown.0:0!277]| () Bool)
(declare-fun |b26[DafnyPreludebpl.40:15]| () Bool)
(declare-fun |b319[DafnyPreludebpl.1183:20]| () Bool)
(declare-fun |b494[unknown.0:0!131]| () Bool)
(declare-fun |b516[funType:Tclass._System.___hPartialFunc2_0]| () Bool)
(declare-fun |b46[DafnyPreludebpl.97:30]| () Bool)
(declare-fun |b415[unknown.0:0!130]| () Bool)
(declare-fun |b533[unknown.0:0]| () Bool)
(declare-fun |b75[DafnyPreludebpl.203:14]| () Bool)
(declare-fun |b323[DafnyPreludebpl.1217:21]| () Bool)
(declare-fun |b699[]| () Bool)
(declare-fun |b218[funType:MultiSet#Singleton]| () Bool)
(declare-fun |b691[funType:lambda#10]| () Bool)
(declare-fun |b705[]| () Bool)
(declare-fun |b624[unknown.0:0!205]| () Bool)
(declare-fun |b692[DafnyPreludebpl.129:1!159]| () Bool)
(declare-fun |b555[unknown.0:0!73]| () Bool)
(declare-fun |b505[unknown.0:0!212]| () Bool)
(declare-fun |b590[DafnyPreludebpl.545:12!150]| () Bool)
(declare-fun |b644[Simpleridfy.25:5!251]| () Bool)
(declare-fun |b680[DafnyPreludebpl.129:1!128]| () Bool)
(declare-fun |b390[funType:Tclass._System.array?]| () Bool)
(declare-fun |b59[DafnyPreludebpl.152:15]| () Bool)
(declare-fun |b353[funType:IMap#Build]| () Bool)
(declare-fun |b545[unknown.0:0!28]| () Bool)
(declare-fun |b337[DafnyPreludebpl.1275:21]| () Bool)
(declare-fun |b453[unknown.0:0!280]| () Bool)
(declare-fun |b421[unknown.0:0!175]| () Bool)
(declare-fun |b77[DafnyPreludebpl.205:14]| () Bool)
(declare-fun |b304[DafnyPreludebpl.1120:18]| () Bool)
(declare-fun |b630[unknown.0:0!220]| () Bool)
(declare-fun |b204[DafnyPreludebpl.771:17]| () Bool)
(declare-fun |b398[unknown.0:0!85]| () Bool)
(declare-fun |b132[DafnyPreludebpl.474:15]| () Bool)
(declare-fun |b259[DafnyPreludebpl.929:18]| () Bool)
(declare-fun |b510[unknown.0:0!249]| () Bool)
(declare-fun |b694[DafnyPreludebpl.129:1!166]| () Bool)
(declare-fun |b639[unknown.0:0!238]| () Bool)
(declare-fun |b195[funType:ISet#Intersection]| () Bool)
(declare-fun |b522[unknown.0:0!292]| () Bool)
(declare-fun |b96[DafnyPreludebpl.256:15]| () Bool)
(declare-fun |b601[Simpleridfy.12:40!164]| () Bool)
(declare-fun |b269[DafnyPreludebpl.974:18]| () Bool)
(declare-fun |b68[ctor:IMapType]| () Bool)
(declare-fun |b433[unknown.0:0!239]| () Bool)
(declare-fun |b520[funType:Tclass._System.___hPartialFunc2_2]| () Bool)
(declare-fun |b577[unknown.0:0!124]| () Bool)
(declare-fun |b392[funType:Tclass._System.array?_0]| () Bool)
(declare-fun |b636[funType:Simpler.QueryReceipt.root]| () Bool)
(declare-fun |b188[DafnyPreludebpl.731:18]| () Bool)
(declare-fun |b466[unknown.0:0!38]| () Bool)
(declare-fun |b484[unknown.0:0!99]| () Bool)
(declare-fun |b513[unknown.0:0!276]| () Bool)
(declare-fun |b8[cast:U_2_bool]| () Bool)
(declare-fun |b12[funType:rmode_2_U]| () Bool)
(declare-fun |b528[unknown.0:0!306]| () Bool)
(declare-fun |b174[DafnyPreludebpl.678:18]| () Bool)
(declare-fun |b343[DafnyPreludebpl.1306:21]| () Bool)
(declare-fun |b63[DafnyPreludebpl.168:15]| () Bool)
(declare-fun |b314[funType:#_System._tuple#2._#Make2]| () Bool)
(declare-fun |b267[funType:Apply1]| () Bool)
(declare-fun |b17[cast:U_2_regex]| () Bool)
(declare-fun |b376[DafnyPreludebpl.1427:14]| () Bool)
(declare-fun |b504[unknown.0:0!203]| () Bool)
(declare-fun |b316[DafnyPreludebpl.1166:21]| () Bool)
(declare-fun |b277[DafnyPreludebpl.1004:18]| () Bool)
(declare-fun |b140[DafnyPreludebpl.507:14]| () Bool)
(declare-fun |b387[unknown.0:0!49]| () Bool)
(declare-fun |b275[DafnyPreludebpl.995:18]| () Bool)
(declare-fun |b167[funType:Set#Difference]| () Bool)
(declare-fun |b19[bg:subtype-refl]| () Bool)
(declare-fun |b211[DafnyPreludebpl.791:15]| () Bool)
(declare-fun |b83[DafnyPreludebpl.212:14]| () Bool)
(declare-fun |b285[DafnyPreludebpl.1035:18]| () Bool)
(declare-fun |b701[Commonidfy.11:12]| () Bool)
(declare-fun |b62[DafnyPreludebpl.165:15]| () Bool)
(declare-fun |b424[unknown.0:0!198]| () Bool)
(declare-fun |b249[DafnyPreludebpl.897:18]| () Bool)
(declare-fun |b569[unknown.0:0!102]| () Bool)
(declare-fun |b30[DafnyPreludebpl.46:15]| () Bool)
(declare-fun |b645[Simpleridfy.25:5!253]| () Bool)
(declare-fun |b521[unknown.0:0!289]| () Bool)
(declare-fun |b139[DafnyPreludebpl.504:17]| () Bool)
(declare-fun |b355[DafnyPreludebpl.1380:21]| () Bool)
(declare-fun |b73[DafnyPreludebpl.184:18]| () Bool)
(declare-fun |b450[funType:Tclass._System.___hFunc0]| () Bool)
(declare-fun |b410[unknown.0:0!118]| () Bool)
(declare-fun |b537[unknown.0:0!11]| () Bool)
(declare-fun |b597[funType:Simpler.BetreeNode.children]| () Bool)
(declare-fun |b367[DafnyPreludebpl.1417:30]| () Bool)
(declare-fun |b149[DafnyPreludebpl.624:18]| () Bool)
(declare-fun |b676[DafnyPreludebpl.129:1!112]| () Bool)
(declare-fun |b237[DafnyPreludebpl.857:18]| () Bool)
(declare-fun |b643[Simpleridfy.25:5!247]| () Bool)
(declare-fun |b380[funType:TagFamily]| () Bool)
(declare-fun |b162[DafnyPreludebpl.649:18]| () Bool)
(declare-fun |b499[unknown.0:0!168]| () Bool)
(declare-fun |b303[DafnyPreludebpl.1117:18]| () Bool)
(declare-fun |b559[unknown.0:0!83]| () Bool)
(declare-fun |b157[funType:Set#UnionOne]| () Bool)
(declare-fun |b560[unknown.0:0!84]| () Bool)
(declare-fun |b111[DafnyPreludebpl.373:15]| () Bool)
(declare-fun |b623[unknown.0:0!204]| () Bool)
(declare-fun |b252[funType:Seq#Append]| () Bool)
(declare-fun |b428[unknown.0:0!217]| () Bool)
(declare-fun |b144[DafnyPreludebpl.532:15]| () Bool)
(declare-fun |b240[DafnyPreludebpl.873:17]| () Bool)
(declare-fun |b599[Simpleridfy.12:40!162]| () Bool)
(declare-fun |b383[unknown.0:0!36]| () Bool)
(declare-fun |b368[DafnyPreludebpl.1418:51]| () Bool)
(declare-fun |b673[funType:lambda#1]| () Bool)
(declare-fun |b386[unknown.0:0!46]| () Bool)
(declare-fun |b535[unknown.0:0!6]| () Bool)
(declare-fun |b366[DafnyPreludebpl.1416:30]| () Bool)
(declare-fun |b411[funType:Tclass._System.___hFunc1_0]| () Bool)
(declare-fun |b47[DafnyPreludebpl.98:15]| () Bool)
(declare-fun |b67[DafnyPreludebpl.174:15]| () Bool)
(declare-fun |b365[DafnyPreludebpl.1415:30]| () Bool)
(declare-fun |b18[funType:regex_2_U]| () Bool)
(declare-fun |b444[unknown.0:0!263]| () Bool)
(declare-fun |b409[funType:Tclass._System.___hFunc1]| () Bool)
(declare-fun |b229[DafnyPreludebpl.838:18]| () Bool)
(declare-fun |b178[DafnyPreludebpl.688:18]| () Bool)
(declare-fun |b227[funType:MultiSet#Union]| () Bool)
(declare-fun |b592[Simpleridfy.12:40]| () Bool)
(declare-fun |b345[DafnyPreludebpl.1312:21]| () Bool)
(declare-fun |b458[unknown.0:0!296]| () Bool)
(declare-fun |b301[DafnyPreludebpl.1109:18]| () Bool)
(declare-fun |b88[DafnyPreludebpl.227:15]| () Bool)
(declare-fun |b352[DafnyPreludebpl.1358:15]| () Bool)
(declare-fun |b393[unknown.0:0!64]| () Bool)
(declare-fun |b532[unknown.0:0!311]| () Bool)
(declare-fun |b580[Simpleridfy.6:30!132]| () Bool)
(declare-fun |b53[DafnyPreludebpl.120:15]| () Bool)
(declare-fun |b78[DafnyPreludebpl.206:14]| () Bool)
(declare-fun |b92[DafnyPreludebpl.238:15]| () Bool)
(declare-fun |b534[unknown.0:0!4]| () Bool)
(declare-fun |b48[DafnyPreludebpl.107:15]| () Bool)
(declare-fun |b476[unknown.0:0!79]| () Bool)
(declare-fun |b57[DafnyPreludebpl.146:15]| () Bool)
(declare-fun |b315[DafnyPreludebpl.1162:21]| () Bool)
(declare-fun |b610[Simpleridfy.18:46]| () Bool)
(declare-fun |b596[Simpleridfy.12:40!158]| () Bool)
(declare-fun |b110[funType:ORD#FromNat]| () Bool)
(declare-fun |b500[funType:Reads2]| () Bool)
(declare-fun |b90[funType:Seq#Index]| () Bool)
(declare-fun |b603[unknown.0:0!170]| () Bool)
(declare-fun |b369[DafnyPreludebpl.1419:51]| () Bool)
(declare-fun |b1[typeInv:U_2_int]| () Bool)
(declare-fun |b173[DafnyPreludebpl.676:18]| () Bool)
(declare-fun |b155[DafnyPreludebpl.637:18]| () Bool)
(declare-fun |b407[unknown.0:0!111]| () Bool)
(declare-fun |b618[Simpleridfy.18:46!195]| () Bool)
(declare-fun |b554[unknown.0:0!71]| () Bool)
(declare-fun |b205[DafnyPreludebpl.773:17]| () Bool)
(declare-fun |b647[unknown.0:0!260]| () Bool)
(declare-fun |b354[DafnyPreludebpl.1371:21]| () Bool)
(declare-fun |b419[unknown.0:0!157]| () Bool)
(declare-fun |b526[unknown.0:0!304]| () Bool)
(declare-fun |b347[DafnyPreludebpl.1340:15]| () Bool)
(declare-fun |b84[DafnyPreludebpl.216:15]| () Bool)
(declare-fun |b445[funType:Tclass._System.___hTotalFunc1_1]| () Bool)
(declare-fun |b11[cast:U_2_rmode]| () Bool)
(declare-fun |b200[DafnyPreludebpl.756:18]| () Bool)
(declare-fun |b481[unknown.0:0!88]| () Bool)
(declare-fun |b697[]| () Bool)
(declare-fun |b455[unknown.0:0!287]| () Bool)
(declare-fun |b564[unknown.0:0!94]| () Bool)
(declare-fun |b648[unknown.0:0!262]| () Bool)
(declare-fun |b72[DafnyPreludebpl.181:18]| () Bool)
(declare-fun |b2[cast:U_2_int]| () Bool)
(declare-fun |b86[DafnyPreludebpl.219:15]| () Bool)
(declare-fun |b160[DafnyPreludebpl.645:18]| () Bool)
(declare-fun |b683[funType:lambda#6]| () Bool)
(declare-fun |b567[funType:#Simpler.ChildMap.ChildMap]| () Bool)
(declare-fun |b607[Simpleridfy.13:15!177]| () Bool)
(declare-fun |b695[Simpleridfy.40:18]| () Bool)
(declare-fun |b429[unknown.0:0!225]| () Bool)
(declare-fun |b403[unknown.0:0!100]| () Bool)
(declare-fun |b346[DafnyPreludebpl.1323:20]| () Bool)
(declare-fun |b136[funType:MultiIndexField_Inverse0]| () Bool)
(declare-fun |b235[DafnyPreludebpl.853:18]| () Bool)
(declare-fun |b615[Simpleridfy.18:46!193]| () Bool)
(declare-fun |b234[funType:MultiSet#Difference]| () Bool)
(declare-fun |b538[unknown.0:0!12]| () Bool)
(declare-fun |b543[funType:Tclass._System.Tuple2_1]| () Bool)
(declare-fun |b509[unknown.0:0!242]| () Bool)
(declare-fun |b350[DafnyPreludebpl.1352:21]| () Bool)
(declare-fun |b611[unknown.0:0!184]| () Bool)
(declare-fun |b216[DafnyPreludebpl.807:18]| () Bool)
(declare-fun |b456[unknown.0:0!291]| () Bool)
(declare-fun |b473[funType:Tclass._System.___hPartialFunc0_0]| () Bool)
(declare-fun |b336[DafnyPreludebpl.1270:21]| () Bool)
(declare-fun |b61[DafnyPreludebpl.162:15]| () Bool)
(declare-fun |b641[Simpleridfy.25:5!243]| () Bool)
(declare-fun |b54[funType:$Unbox]| () Bool)
(declare-fun |b493[funType:Tclass._System.___hFunc2_1]| () Bool)
(declare-fun |b565[unknown.0:0!96]| () Bool)
(declare-fun |b170[DafnyPreludebpl.669:18]| () Bool)
(declare-fun |b150[funType:Set#Empty]| () Bool)
(declare-fun |b131[funType:IndexField]| () Bool)
(declare-fun |b302[DafnyPreludebpl.1114:15]| () Bool)
(declare-fun |b418[funType:Reads1]| () Bool)
(declare-fun |b604[unknown.0:0!171]| () Bool)
(declare-fun |b519[unknown.0:0!285]| () Bool)
(declare-fun |b640[Simpleridfy.25:5!240]| () Bool)
(declare-fun |b448[unknown.0:0!273]| () Bool)
(declare-fun |b511[unknown.0:0!261]| () Bool)
(declare-fun |b382[unknown.0:0!34]| () Bool)
(declare-fun |b417[unknown.0:0!151]| () Bool)
(declare-fun |b317[DafnyPreludebpl.1169:21]| () Bool)
(declare-fun |b308[DafnyPreludebpl.1132:18]| () Bool)
(declare-fun |b278[funType:Seq#Take]| () Bool)
(declare-fun |b378[DafnyPreludebpl.1473:15]| () Bool)
(declare-fun |b326[funType:Map#Build]| () Bool)
(declare-fun |b85[DafnyPreludebpl.217:15]| () Bool)
(declare-fun |b32[funType:Inv1_TIMap]| () Bool)
(declare-fun |b181[DafnyPreludebpl.706:17]| () Bool)
(declare-fun |b307[DafnyPreludebpl.1130:18]| () Bool)
(declare-fun |b263[DafnyPreludebpl.952:18]| () Bool)
(declare-fun |b69[typeInv:IMapTypeInv0]| () Bool)
(declare-fun |b89[DafnyPreludebpl.231:15]| () Bool)
(declare-fun |b334[DafnyPreludebpl.1260:21]| () Bool)
(declare-fun |b288[DafnyPreludebpl.1047:18]| () Bool)
(declare-fun |b658[unknown.0:0!10]| () Bool)
(declare-fun |b133[DafnyPreludebpl.476:15]| () Bool)
(declare-fun |b206[DafnyPreludebpl.777:18]| () Bool)
(declare-fun |b76[DafnyPreludebpl.204:14]| () Bool)
(declare-fun |b426[unknown.0:0!211]| () Bool)
(declare-fun |b634[funType:Simpler.QueryReceipt.key]| () Bool)
(declare-fun |b23[DafnyPreludebpl.34:15]| () Bool)
(declare-fun |b255[DafnyPreludebpl.909:18]| () Bool)
(declare-fun |b280[funType:Seq#Drop]| () Bool)
(declare-fun |b529[funType:Tclass._System.___hTotalFunc2_1]| () Bool)
(declare-fun |b104[DafnyPreludebpl.322:15]| () Bool)
(declare-fun |b294[DafnyPreludebpl.1082:15]| () Bool)
(declare-fun |b114[DafnyPreludebpl.385:15]| () Bool)
(declare-fun |b515[unknown.0:0!281]| () Bool)
(declare-fun |b575[Simpleridfy.6:30!121]| () Bool)
(declare-fun |b250[funType:Seq#Empty]| () Bool)
(declare-fun |b507[unknown.0:0!229]| () Bool)
(declare-fun |b339[funType:IMap#Empty]| () Bool)
(declare-fun |b654[Simpleridfy.35:15!295]| () Bool)
(declare-fun |b341[DafnyPreludebpl.1299:21]| () Bool)
(declare-fun |b103[DafnyPreludebpl.295:15]| () Bool)
(declare-fun |b120[DafnyPreludebpl.407:15]| () Bool)
(declare-fun |b242[funType:MultiSet#FromSet]| () Bool)
(declare-fun |b439[unknown.0:0!252]| () Bool)
(declare-fun |b525[funType:Tclass._System.___hTotalFunc2]| () Bool)
(declare-fun |b182[DafnyPreludebpl.710:18]| () Bool)
(declare-fun |b583[unknown.0:0!138]| () Bool)
(declare-fun |b20[bg:subtype-trans]| () Bool)
(declare-fun |b44[DafnyPreludebpl.95:29]| () Bool)
(declare-fun |b117[funType:ORD#Plus]| () Bool)
(declare-fun |b36[DafnyPreludebpl.77:15]| () Bool)
(declare-fun |b287[DafnyPreludebpl.1045:18]| () Bool)
(declare-fun |b318[DafnyPreludebpl.1172:21]| () Bool)
(declare-fun |b661[unknown.0:0!19]| () Bool)
(declare-fun |b257[DafnyPreludebpl.925:18]| () Bool)
(declare-fun |b388[unknown.0:0!53]| () Bool)
(declare-fun |b272[DafnyPreludebpl.984:18]| () Bool)
(declare-fun |b320[DafnyPreludebpl.1204:15]| () Bool)
(declare-fun |b141[DafnyPreludebpl.524:15]| () Bool)
(declare-fun |b115[DafnyPreludebpl.388:15]| () Bool)
(declare-fun |b225[DafnyPreludebpl.828:18]| () Bool)
(declare-fun |b21[bg:subtype-antisymm]| () Bool)
(declare-fun |b244[DafnyPreludebpl.885:18]| () Bool)
(declare-fun |b646[Simpleridfy.25:5!257]| () Bool)
(declare-fun |b196[DafnyPreludebpl.747:18]| () Bool)
(declare-fun |b446[unknown.0:0!265]| () Bool)
(declare-fun |b531[funType:Tclass._System.___hTotalFunc2_2]| () Bool)
(declare-fun |b483[unknown.0:0!95]| () Bool)
(declare-fun |b172[DafnyPreludebpl.674:18]| () Bool)
(declare-fun |b598[unknown.0:0!161]| () Bool)
(declare-fun |b45[DafnyPreludebpl.96:15]| () Bool)
(declare-fun |b358[DafnyPreludebpl.1391:21]| () Bool)
(declare-fun |b663[unknown.0:0!23]| () Bool)
(declare-fun |b180[DafnyPreludebpl.704:17]| () Bool)
(declare-fun |b333[funType:Map#Subtract]| () Bool)
(declare-fun |b561[unknown.0:0!87]| () Bool)
(declare-fun |b105[funType:SetRef_to_SetBox]| () Bool)
(declare-fun |b39[DafnyPreludebpl.80:15]| () Bool)
(declare-fun |b293[DafnyPreludebpl.1070:15]| () Bool)
(declare-fun |b503[unknown.0:0!192]| () Bool)
(declare-fun |b215[funType:MultiSet#Empty]| () Bool)
(declare-fun |b420[unknown.0:0!167]| () Bool)
(declare-fun |b463[unknown.0:0!20]| () Bool)
(declare-fun |b248[funType:Seq#Build]| () Bool)
(declare-fun |b573[unknown.0:0!116]| () Bool)
(declare-fun |b578[Simpleridfy.6:30!127]| () Bool)
(declare-fun |b100[funType:IMap#Domain]| () Bool)
(declare-fun |b475[unknown.0:0!77]| () Bool)
(declare-fun |b550[unknown.0:0!58]| () Bool)
(declare-fun |b557[unknown.0:0!78]| () Bool)
(declare-fun |b5[cast:U_2_real]| () Bool)
(declare-fun |b33[DafnyPreludebpl.50:15]| () Bool)
(declare-fun |b108[DafnyPreludebpl.352:15]| () Bool)
(declare-fun |b677[funType:lambda#3]| () Bool)
(declare-fun |b42[DafnyPreludebpl.89:29]| () Bool)
(declare-fun |b698[]| () Bool)
(declare-fun |b609[funType:#Simpler.QueryReceiptLine.QueryReceiptLine]| () Bool)
(declare-fun |b253[DafnyPreludebpl.904:18]| () Bool)
(declare-fun |b289[DafnyPreludebpl.1052:18]| () Bool)
(declare-fun |b457[funType:Reads0]| () Bool)
(declare-fun |b441[funType:Tclass._System.___hTotalFunc1]| () Bool)
(declare-fun |b309[DafnyPreludebpl.1150:20]| () Bool)
(declare-fun |b184[DafnyPreludebpl.720:18]| () Bool)
(declare-fun |b570[unknown.0:0!107]| () Bool)
(declare-fun |b212[DafnyPreludebpl.797:18]| () Bool)
(declare-fun |b135[DafnyPreludebpl.479:15]| () Bool)
(declare-fun |b485[unknown.0:0!101]| () Bool)
(declare-fun |b629[unknown.0:0!215]| () Bool)
(declare-fun |b324[DafnyPreludebpl.1220:21]| () Bool)
(declare-fun |b338[DafnyPreludebpl.1280:21]| () Bool)
(declare-fun |b70[typeInv:IMapTypeInv1]| () Bool)
(declare-fun |b126[DafnyPreludebpl.432:15]| () Bool)
(declare-fun |b487[unknown.0:0!109]| () Bool)
(declare-fun |b502[unknown.0:0!183]| () Bool)
(declare-fun |b566[unknown.0:0!97]| () Bool)
(declare-fun |b682[DafnyPreludebpl.129:1!135]| () Bool)
(declare-fun |b37[DafnyPreludebpl.78:15]| () Bool)
(declare-fun |b152[DafnyPreludebpl.628:18]| () Bool)
(declare-fun |b221[DafnyPreludebpl.815:18]| () Bool)
(declare-fun |b589[unknown.0:0!149]| () Bool)
(declare-fun |b556[unknown.0:0!75]| () Bool)
(declare-fun |b360[funType:IMap#Subtract]| () Bool)
(declare-fun |b675[funType:lambda#2]| () Bool)
(declare-fun |b678[DafnyPreludebpl.129:1!120]| () Bool)
(declare-fun |b461[unknown.0:0!2]| () Bool)
(declare-fun |b501[unknown.0:0!176]| () Bool)
(declare-fun |b449[unknown.0:0!274]| () Bool)
(declare-fun |b58[DafnyPreludebpl.149:15]| () Bool)
(declare-fun |b179[DafnyPreludebpl.696:17]| () Bool)
(declare-fun |b197[DafnyPreludebpl.750:18]| () Bool)
(declare-fun |b672[DafnyPreludebpl.129:1]| () Bool)
(declare-fun |b130[DafnyPreludebpl.463:18]| () Bool)
(declare-fun |b412[unknown.0:0!122]| () Bool)
(declare-fun |b79[DafnyPreludebpl.208:14]| () Bool)
(declare-fun |b28[DafnyPreludebpl.45:15]| () Bool)
(declare-fun |b482[unknown.0:0!91]| () Bool)
(declare-fun |b276[DafnyPreludebpl.999:18]| () Bool)
(declare-fun |b617[unknown.0:0!194]| () Bool)
(declare-fun |b50[funType:char#Plus]| () Bool)
(declare-fun |b38[DafnyPreludebpl.79:15]| () Bool)
(declare-fun |b571[unknown.0:0!110]| () Bool)
(declare-fun |b588[unknown.0:0!148]| () Bool)
(declare-fun |b628[Simpleridfy.25:5]| () Bool)
(declare-fun |b436[funType:Tclass._System.___hPartialFunc1_1]| () Bool)
(declare-fun |b616[funType:Simpler.QueryReceiptLine.node]| () Bool)
(declare-fun |b518[funType:Tclass._System.___hPartialFunc2_1]| () Bool)
(declare-fun |b361[DafnyPreludebpl.1401:21]| () Bool)
(declare-fun |b587[Simpleridfy.7:15!144]| () Bool)
(declare-fun |b271[DafnyPreludebpl.979:18]| () Bool)
(declare-fun |b261[DafnyPreludebpl.942:18]| () Bool)
(declare-fun |b395[funType:dtype]| () Bool)
(declare-fun |b397[unknown.0:0!81]| () Bool)
(declare-fun |b203[DafnyPreludebpl.767:17]| () Bool)
(declare-fun |b266[DafnyPreludebpl.964:15]| () Bool)
(declare-fun |b593[unknown.0:0!152]| () Bool)
(declare-fun |b116[DafnyPreludebpl.395:15]| () Bool)
(declare-fun |b671[Commonidfy.10:20!57]| () Bool)
(declare-fun |b222[DafnyPreludebpl.819:18]| () Bool)
(declare-fun |b359[DafnyPreludebpl.1394:21]| () Bool)
(declare-fun |b469[unknown.0:0!61]| () Bool)
(declare-fun |b498[unknown.0:0!160]| () Bool)
(declare-fun |b642[Simpleridfy.25:5!245]| () Bool)
(declare-fun |b40[DafnyPreludebpl.81:15]| () Bool)
(declare-fun |b24[DafnyPreludebpl.36:15]| () Bool)
(declare-fun |b35[DafnyPreludebpl.76:15]| () Bool)
(declare-fun |b422[unknown.0:0!180]| () Bool)
(declare-fun |b74[DafnyPreludebpl.202:14]| () Bool)
(declare-fun |b137[DafnyPreludebpl.482:15]| () Bool)
(declare-fun |b325[DafnyPreludebpl.1223:15]| () Bool)
(declare-fun |b213[DafnyPreludebpl.802:18]| () Bool)
(declare-fun |b667[unknown.0:0!33]| () Bool)
(declare-fun |b290[DafnyPreludebpl.1058:18]| () Bool)
(declare-fun |b64[ctor:SeqType]| () Bool)
(declare-fun |b286[DafnyPreludebpl.1037:18]| () Bool)
(declare-fun |b190[DafnyPreludebpl.735:18]| () Bool)
(declare-fun |b9[funType:bool_2_U]| () Bool)
(declare-fun |b80[DafnyPreludebpl.209:14]| () Bool)
(declare-fun |b122[DafnyPreludebpl.412:15]| () Bool)
(declare-fun |b232[DafnyPreludebpl.846:18]| () Bool)
(declare-fun |b679[funType:lambda#4]| () Bool)
(declare-fun |b66[DafnyPreludebpl.171:15]| () Bool)
(declare-fun |b125[DafnyPreludebpl.427:15]| () Bool)
(declare-fun |b427[unknown.0:0!214]| () Bool)
(declare-fun |b230[funType:MultiSet#Intersection]| () Bool)
(declare-fun |b404[funType:Tclass._System.array_0]| () Bool)
(declare-fun |b385[unknown.0:0!42]| () Bool)
(declare-fun |b101[DafnyPreludebpl.279:15]| () Bool)
(declare-fun |b3[funType:int_2_U]| () Bool)
(declare-fun |b299[DafnyPreludebpl.1101:18]| () Bool)
(declare-fun |b622[unknown.0:0!202]| () Bool)
(declare-fun |b169[funType:Set#Intersection]| () Bool)
(declare-fun |b396[unknown.0:0!76]| () Bool)
(declare-fun |b664[unknown.0:0!25]| () Bool)
(declare-fun |b219[DafnyPreludebpl.813:18]| () Bool)
(declare-fun |b594[unknown.0:0!155]| () Bool)
(declare-fun |b279[DafnyPreludebpl.1008:18]| () Bool)
(set-info :smt-lib-version |2.6|)
(set-info :category |"industrial"|)
(set-info :boogie-vc-id CheckWellformed$$Simpler.QueryReceipt.ChildAt)
(set-option :produce-unsat-cores true)
(set-option :smt.core.minimize true)
(set-option :print-success false)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :timeout 0)
(set-option :rlimit 16350000)
(declare-sort T@T 0)
(declare-sort T@U 0)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun UOrdering2 (T@U T@U) Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun TyType () T@T)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun charType () T@T)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun TInt () T@U)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun BoxType () T@T)
(declare-fun TReal () T@U)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Type () T@T)
(declare-fun refType () T@T)
(declare-fun TORDINAL () T@U)
(declare-fun bx@@10!398!0 (T@U T@U) T@U)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun bx@@11!400!1 (T@U T@U) T@U)
(declare-fun bx@@12!402!2 (T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun i!405!3 (T@U T@U) Int)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun bx@@13!407!4 (T@U T@U T@U) T@U)
(declare-fun bx@@14!409!5 (T@U T@U T@U) T@U)
(declare-fun bx@@15!411!6 (T@U T@U T@U) T@U)
(declare-fun i@@0!413!7 (T@U T@U T@U) Int)
(declare-fun bx@@16!415!8 (T@U T@U T@U) T@U)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun bx@@17!417!9 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun bx@@18!420!10 (T@U T@U T@U) T@U)
(declare-fun bx@@19!422!11 (T@U T@U T@U T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun ClassNameType () T@T)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun alloc () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun x@@18!470!12 (T@U) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun o@@23!493!13 (T@U T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun o@@24!495!14 (T@U T@U) T@U)
(declare-fun o@@25!498!15 (T@U T@U) T@U)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun o@@31!515!16 (T@U T@U) T@U)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun o@@32!517!17 (T@U T@U) T@U)
(declare-fun o@@33!520!18 (T@U T@U) T@U)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun bx@@22!527!19 (T@U) T@U)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun x@@28!532!20 (T@U) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun o@@40!549!21 (T@U T@U) T@U)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun o@@41!551!22 (T@U T@U) T@U)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun o@@42!554!23 (T@U T@U) T@U)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun i@@7!564!24 (T@U T@U) Int)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun i@@12!581!25 (T@U T@U) Int)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun i@@13!586!26 (T@U Int T@U) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun i@@14!588!27 (T@U Int T@U) Int)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun j!590!28 (T@U T@U) Int)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun j@@0!593!29 (Int T@U T@U) Int)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun k@@4!621!30 (T@U) T@U)
(declare-fun v@@42!623!31 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun v@@43!625!32 (T@U) T@U)
(declare-fun k@@5!625!33 (T@U) T@U)
(declare-fun u@@5!630!34 (T@U T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun bx@@24!636!35 (T@U T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun u@@13!646!37 (T@U T@U) T@U)
(declare-fun u@@12!645!36 (T@U T@U) T@U)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun o@@43!649!38 (T@U T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun k@@6!651!39 (T@U) T@U)
(declare-fun v@@48!653!40 (T@U) T@U)
(declare-fun v@@49!655!41 (T@U) T@U)
(declare-fun k@@7!655!42 (T@U) T@U)
(declare-fun u@@14!660!43 (T@U T@U) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun bx@@25!666!44 (T@U T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun u@@18!670!46 (T@U T@U) T@U)
(declare-fun u@@17!669!45 (T@U T@U) T@U)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun TagFamily (T@U) T@U)
(declare-fun TyTagFamilyType () T@T)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun fld!724!47 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@44!724!48 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@0!726!49 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@45!726!50 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@1!728!51 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@46!728!52 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@2!730!53 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@47!730!54 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@3!732!55 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@48!732!56 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@4!734!57 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@49!734!58 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun $OneHeap () T@U)
(declare-fun bx0@@10!738!59 (T@U T@U T@U) T@U)
(declare-fun h@@24!738!60 (T@U T@U T@U) T@U)
(declare-fun bx@@34!741!62 (T@U T@U) T@U)
(declare-fun bx@@33!740!61 (T@U T@U) T@U)
(declare-fun r@@9!743!64 (T@U T@U T@U T@U) T@U)
(declare-fun bx0@@11!744!63 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun |x0#0!752!65| (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun |x0#0@@0!759!66| (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun fld@@5!768!67 (T@U T@U T@U T@U) T@U)
(declare-fun o@@50!768!68 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@6!770!69 (T@U T@U T@U T@U) T@U)
(declare-fun o@@51!770!70 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@7!772!71 (T@U T@U T@U T@U) T@U)
(declare-fun o@@52!772!72 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@8!774!73 (T@U T@U T@U T@U) T@U)
(declare-fun o@@53!774!74 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@9!776!75 (T@U T@U T@U T@U) T@U)
(declare-fun o@@54!776!76 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@10!778!77 (T@U T@U T@U T@U) T@U)
(declare-fun o@@55!778!78 (T@U T@U T@U T@U) T@U)
(declare-fun h@@30!782!79 (T@U T@U) T@U)
(declare-fun bx@@39!784!80 (T@U T@U) T@U)
(declare-fun r@@13!786!81 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@11!812!82 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@56!812!83 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@12!814!84 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@57!814!85 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@13!816!86 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@58!816!87 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@14!818!89 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@59!818!88 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@15!820!90 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@60!820!91 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@16!822!92 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@61!822!93 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun bx1@@10!826!94 (T@U T@U T@U T@U) T@U)
(declare-fun bx0@@24!826!95 (T@U T@U T@U T@U) T@U)
(declare-fun h@@36!826!96 (T@U T@U T@U T@U) T@U)
(declare-fun bx@@47!830!99 (T@U T@U) T@U)
(declare-fun bx@@46!829!98 (T@U T@U) T@U)
(declare-fun bx@@45!828!97 (T@U T@U) T@U)
(declare-fun r@@17!832!102 (T@U T@U T@U T@U T@U) T@U)
(declare-fun bx1@@11!833!100 (T@U T@U T@U T@U T@U) T@U)
(declare-fun bx0@@25!833!101 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun |x1#0!842!103| (T@U T@U T@U T@U) T@U)
(declare-fun |x0#0@@1!842!104| (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun |x1#0@@0!850!105| (T@U T@U T@U T@U) T@U)
(declare-fun |x0#0@@2!850!106| (T@U T@U T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun |a#1#1#0!855!107| (T@U) T@U)
(declare-fun |a#1#0#0!855!108| (T@U) T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun |#Simpler.ChildMap.ChildMap| (T@U) T@U)
(declare-fun |##Simpler.ChildMap.ChildMap| () T@U)
(declare-fun Simpler.ChildMap.ChildMap_q (T@U) Bool)
(declare-fun |a#15#0#0!886!109| (T@U) T@U)
(declare-fun Tclass.Common.Key () T@U)
(declare-fun Tclass.Simpler.BetreeNode () T@U)
(declare-fun Tclass.Simpler.ChildMap () T@U)
(declare-fun Simpler.ChildMap.mapp (T@U) T@U)
(declare-fun |$IsA#Simpler.ChildMap| (T@U) Bool)
(declare-fun |Simpler.ChildMap#Equal| (T@U T@U) Bool)
(declare-fun |Simpler.ChildMap.Total#requires| (T@U) Bool)
(declare-fun Simpler.ChildMap.Total (T@U) Bool)
(declare-fun Common.__default.TotalSet (T@U) Bool)
(declare-fun |Common.__default.TotalSet#canCall| (T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |Simpler.ChildMap.Total#canCall| (T@U) Bool)
(declare-fun Simpler.BetreeNode.Nil_q (T@U) Bool)
(declare-fun |##Simpler.BetreeNode.Nil| () T@U)
(declare-fun |#Simpler.BetreeNode.Nil| () T@U)
(declare-fun |#Simpler.BetreeNode.BetreeNode| (T@U) T@U)
(declare-fun |##Simpler.BetreeNode.BetreeNode| () T@U)
(declare-fun Simpler.BetreeNode.BetreeNode_q (T@U) Bool)
(declare-fun |a#6#0#0@@0!912!110| (T@U) T@U)
(declare-fun Simpler.BetreeNode.children (T@U) T@U)
(declare-fun |$IsA#Simpler.BetreeNode| (T@U) Bool)
(declare-fun |Simpler.BetreeNode#Equal| (T@U T@U) Bool)
(declare-fun |Simpler.BetreeNode.Total#requires| (T@U) Bool)
(declare-fun Simpler.BetreeNode.Total (T@U) Bool)
(declare-fun |Simpler.BetreeNode.Total#canCall| (T@U) Bool)
(declare-fun |#Simpler.QueryReceiptLine.QueryReceiptLine| (T@U) T@U)
(declare-fun |##Simpler.QueryReceiptLine.QueryReceiptLine| () T@U)
(declare-fun Simpler.QueryReceiptLine.QueryReceiptLine_q (T@U) Bool)
(declare-fun |a#1#0#0@@0!932!111| (T@U) T@U)
(declare-fun Tclass.Simpler.QueryReceiptLine () T@U)
(declare-fun Simpler.QueryReceiptLine.node (T@U) T@U)
(declare-fun |$IsA#Simpler.QueryReceiptLine| (T@U) Bool)
(declare-fun |Simpler.QueryReceiptLine#Equal| (T@U T@U) Bool)
(declare-fun |Simpler.QueryReceiptLine.Total#requires| (T@U) Bool)
(declare-fun Simpler.QueryReceiptLine.Total (T@U) Bool)
(declare-fun |Simpler.QueryReceiptLine.Total#canCall| (T@U) Bool)
(declare-fun |#Simpler.QueryReceipt.QueryReceipt| (T@U T@U T@U) T@U)
(declare-fun |##Simpler.QueryReceipt.QueryReceipt| () T@U)
(declare-fun Simpler.QueryReceipt.QueryReceipt_q (T@U) Bool)
(declare-fun |a#1#2#0!952!112| (T@U) T@U)
(declare-fun |a#1#1#0@@0!952!113| (T@U) T@U)
(declare-fun |a#1#0#0@@1!952!114| (T@U) T@U)
(declare-fun Tclass.Simpler.QueryReceipt () T@U)
(declare-fun Simpler.QueryReceipt.key (T@U) T@U)
(declare-fun Simpler.QueryReceipt.root (T@U) T@U)
(declare-fun Simpler.QueryReceipt.lines (T@U) T@U)
(declare-fun |$IsA#Simpler.QueryReceipt| (T@U) Bool)
(declare-fun |Simpler.QueryReceipt#Equal| (T@U T@U) Bool)
(declare-fun |Simpler.QueryReceipt.Structure#requires| (T@U) Bool)
(declare-fun Simpler.QueryReceipt.Structure (T@U) Bool)
(declare-fun |i#0@@0!973!115| (T@U) Int)
(declare-fun |Simpler.QueryReceipt.Structure#canCall| (T@U) Bool)
(declare-fun |Simpler.QueryReceipt.AllLinesTotal#requires| (T@U) Bool)
(declare-fun Simpler.QueryReceipt.AllLinesTotal (T@U) Bool)
(declare-fun |i#0@@2!983!116| (T@U) Int)
(declare-fun |Simpler.QueryReceipt.AllLinesTotal#canCall| (T@U) Bool)
(declare-fun Simpler.QueryReceipt.ChildAt (T@U Int) T@U)
(declare-fun |Simpler.QueryReceipt.ChildAt#requires| (T@U Int) Bool)
(declare-fun Tclass.Simpler.__default () T@U)
(declare-fun Tclass.Common.byte () T@U)
(declare-fun Tclass.Common.__default () T@U)
(declare-fun |Common.__default.AnyKey#requires| (T@U) Bool)
(declare-fun Common.__default.AnyKey (T@U) Bool)
(declare-fun |Common.__default.AnyKey#canCall| (T@U) Bool)
(declare-fun |Common.__default.TotalSet#requires| (T@U) Bool)
(declare-fun |k#0@@0!1015!117| (T@U) T@U)
(declare-fun MapType4Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun MapType4Type (T@T T@T) T@T)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun this@@23 () T@U)
(declare-fun $_Frame@0@@0 () T@U)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |i#0@@9| () Int)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $f@@11!996!119 () T@U)
(declare-fun $o@@25!996!118 () T@U)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun $f@@12!997!120 () T@U)
(declare-fun $o@@26!997!121 () T@U)
(assert (! |b7[typeInv:U_2_bool]|))
(assert (! |b42[DafnyPreludebpl.89:29]|))
(assert (! |b54[funType:$Unbox]|))
(assert (! |b69[typeInv:IMapTypeInv0]|))
(assert (! |b100[funType:IMap#Domain]|))
(assert (! |b364[DafnyPreludebpl.1414:30]|))
(assert (! |b368[DafnyPreludebpl.1418:51]|))
(assert (! |b369[DafnyPreludebpl.1419:51]|))
(assert (! |b576[funType:Simpler.ChildMap.mapp]|))
(assert (! (or (not (<= 6 $FunctionContextHeight)) |b587[Simpleridfy.7:15!144]|)))
(assert (! |b597[funType:Simpler.BetreeNode.children]|))
(assert (! (or (not (<= 7 $FunctionContextHeight)) |b608[Simpleridfy.13:15!178]|)))
(assert (! |b612[unknown.0:0!186]|))
(assert (! |b619[Simpleridfy.18:46!197]|))
(assert (! (or (not (<= 8 $FunctionContextHeight)) |b626[Simpleridfy.19:15!209]|)))
(assert (! |b630[unknown.0:0!220]|))
(assert (! |b632[Simpleridfy.25:5!226]|))
(assert (! |b641[Simpleridfy.25:5!243]|))
(assert (! (or (not (<= 5 $FunctionContextHeight)) |b652[Simpleridfy.29:15!279]|)))
(assert (! (or (not (<= 9 $FunctionContextHeight)) |b654[Simpleridfy.35:15!295]|)))
(assert (! (or (not true) |b669[Commonidfy.6:18!41]|)))
(assert (! (or (not true) |b671[Commonidfy.10:20!57]|)))
(assert (! (= (type this@@23) DatatypeTypeType)))
(assert (! ($Is this@@23 Tclass.Simpler.QueryReceipt)))
(assert (! (INTERNAL_le_boogie 0 |i#0@@9|)))
(assert (! (= 10 $FunctionContextHeight)))
(assert (! (or |b$reqreads#0@0| (not (=> (and (= (type $o@@25!996!118) refType) (= (type $f@@11!996!119) (FieldType (FieldTypeInv0 (type $f@@11!996!119)))) false) (U_2_bool (MapType4Select $_Frame@0@@0 $o@@25!996!118 $f@@11!996!119)))))))
(assert (! (Simpler.QueryReceipt.Structure this@@23)))
(assert (! (or |b$reqreads#1@0| (not (=> (and (= (type $o@@26!997!121) refType) (= (type $f@@12!997!120) (FieldType (FieldTypeInv0 (type $f@@12!997!120)))) false) (U_2_bool (MapType4Select $_Frame@0@@0 $o@@26!997!121 $f@@12!997!120)))))))
(assert (! (Simpler.QueryReceipt.AllLinesTotal this@@23)))
(assert (! (INTERNAL_lt_boogie |i#0@@9| (INTERNAL_sub_boogie (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)) 1))))
(assert (! (not (and (=> (= (ControlFlow 0 37595) (- 0 54332)) |b$reqreads#0@0|) (=> |b$reqreads#0@0| (and (=> (= (ControlFlow 0 37595) (- 0 54333)) |b$reqreads#1@0|) (=> |b$reqreads#1@0| (and (=> (= (ControlFlow 0 37595) 37599) true) (=> (= (ControlFlow 0 37595) 37601) (=> (and (= $_Frame@0 (|lambda#11| null $Heap alloc false)) (! (Simpler.QueryReceipt.QueryReceipt_q this@@23))) (and (=> (= (ControlFlow 0 37601) (- 0 54366)) (and (<= 0 |i#0@@9|) (< |i#0@@9| (|Seq#Length| (Simpler.QueryReceipt.lines this@@23))))) (=> (and (<= 0 |i#0@@9|) (< |i#0@@9| (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)))) (=> (Simpler.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))) (and (=> (= (ControlFlow 0 37601) (- 0 54398)) (Simpler.BetreeNode.BetreeNode_q (Simpler.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))) (=> (Simpler.BetreeNode.BetreeNode_q (Simpler.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))) (=> (Simpler.ChildMap.ChildMap_q (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))) (=> (and (! (Simpler.QueryReceipt.QueryReceipt_q this@@23)) (= (ControlFlow 0 37601) (- 0 54436))) (U_2_bool (MapType0Select (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) ($Box (Simpler.QueryReceipt.key this@@23)))))))))))))))))))))
(assert (! (=> (! |b364[DafnyPreludebpl.1414:30]|) (= (INTERNAL_sub_boogie (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)) 1) (- (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)) 1)))))
(assert (! (=> (! |b368[DafnyPreludebpl.1418:51]|) (= (! (INTERNAL_lt_boogie |i#0@@9| (INTERNAL_sub_boogie (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)) 1))) (< |i#0@@9| (INTERNAL_sub_boogie (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)) 1))))))
(assert (! (=> (! |b369[DafnyPreludebpl.1419:51]|) (= (! (INTERNAL_le_boogie 0 |i#0@@9|)) (<= 0 |i#0@@9|)))))
(assert (! (=> (! |b630[unknown.0:0!220]|) (or (not (and (! (= (type this@@23) DatatypeTypeType)) (! (Simpler.QueryReceipt.QueryReceipt_q this@@23)))) (and (= (type (|a#1#0#0@@1!952!114| this@@23)) (SeqType BoxType)) (= (type (|a#1#1#0@@0!952!113| this@@23)) DatatypeTypeType) (= (type (|a#1#2#0!952!112| this@@23)) (SeqType BoxType)) (= this@@23 (|#Simpler.QueryReceipt.QueryReceipt| (|a#1#0#0@@1!952!114| this@@23) (|a#1#1#0@@0!952!113| this@@23) (|a#1#2#0!952!112| this@@23))))))))
(assert (! (=> |b652[Simpleridfy.29:15!279]| (or (not (and (! (= (type this@@23) DatatypeTypeType)) (or (! (|Simpler.QueryReceipt.Structure#canCall| this@@23)) (and (not (= 5 $FunctionContextHeight)) (! ($Is this@@23 Tclass.Simpler.QueryReceipt)))))) (and (! (Simpler.QueryReceipt.QueryReceipt_q this@@23)) (or (not (INTERNAL_lt_boogie 0 (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)))) (and (|$IsA#Simpler.BetreeNode| (Simpler.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) (LitInt 0))))) (|$IsA#Simpler.BetreeNode| (Simpler.QueryReceipt.root this@@23)) (! (Simpler.QueryReceipt.QueryReceipt_q this@@23)) (Simpler.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) (LitInt 0)))) (! (Simpler.QueryReceipt.QueryReceipt_q this@@23)) (or (not (|Simpler.BetreeNode#Equal| (Simpler.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) (LitInt 0)))) (Simpler.QueryReceipt.root this@@23))) |b697[]|))) (or (not (! (Simpler.QueryReceipt.Structure this@@23))) (and (and (INTERNAL_lt_boogie 0 (|Seq#Length| (Simpler.QueryReceipt.lines this@@23))) (|Simpler.BetreeNode#Equal| (Simpler.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) (LitInt 0)))) (Simpler.QueryReceipt.root this@@23))) |b698[]|)) (or (! (Simpler.QueryReceipt.Structure this@@23)) (not (and (INTERNAL_lt_boogie 0 (|Seq#Length| (Simpler.QueryReceipt.lines this@@23))) (|Simpler.BetreeNode#Equal| (Simpler.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) (LitInt 0)))) (Simpler.QueryReceipt.root this@@23)))) (not (=> (and (INTERNAL_le_boogie 0 (|i#0@@0!973!115| this@@23)) (INTERNAL_lt_boogie (|i#0@@0!973!115| this@@23) (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)))) (= (Simpler.BetreeNode.BetreeNode_q (Simpler.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) (|i#0@@0!973!115| this@@23))))) (INTERNAL_lt_boogie (|i#0@@0!973!115| this@@23) (INTERNAL_sub_boogie (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)) 1)))))))))))
(assert (! (=> (! |b42[DafnyPreludebpl.89:29]|) (= (Lit (bool_2_U true)) (bool_2_U true)))))
(assert (! (=> (! |b7[typeInv:U_2_bool]|) (= (U_2_bool (bool_2_U true)) true))))
(assert (! (=> |b699[]| (=> (! (INTERNAL_le_boogie 0 |i#0@@9|)) (and (! (Simpler.QueryReceipt.QueryReceipt_q this@@23)) (=> (INTERNAL_lt_boogie |i#0@@9| (|Seq#Length| (Simpler.QueryReceipt.lines this@@23))) (and (! (Simpler.QueryReceipt.QueryReceipt_q this@@23)) (|Simpler.QueryReceiptLine.Total#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))))))
(assert (! (=> |b654[Simpleridfy.35:15!295]| (or (not (and (! (= (type this@@23) DatatypeTypeType)) (or (! (|Simpler.QueryReceipt.AllLinesTotal#canCall| this@@23)) (and (not (= 9 $FunctionContextHeight)) (! ($Is this@@23 Tclass.Simpler.QueryReceipt)))))) (and (or (not (U_2_bool (Lit (bool_2_U true)))) |b699[]|) (or (not (! (Simpler.QueryReceipt.AllLinesTotal this@@23))) (and true |b700[]|)) (or (! (Simpler.QueryReceipt.AllLinesTotal this@@23)) (not true) (not (=> (and (INTERNAL_le_boogie 0 (|i#0@@2!983!116| this@@23)) (INTERNAL_lt_boogie (|i#0@@2!983!116| this@@23) (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)))) (Simpler.QueryReceiptLine.Total ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) (|i#0@@2!983!116| this@@23))))))))))))
(assert (! (=> |b608[Simpleridfy.13:15!178]| (=> (and (= (type (Simpler.QueryReceiptLine.node (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) DatatypeTypeType) (or (|Simpler.BetreeNode.Total#canCall| (Simpler.QueryReceiptLine.node (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) (and (not (= 7 $FunctionContextHeight)) ($Is (Simpler.QueryReceiptLine.node (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))) Tclass.Simpler.BetreeNode)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (=> (Simpler.BetreeNode.BetreeNode_q (Simpler.QueryReceiptLine.node (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) (|Simpler.ChildMap.Total#canCall| (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))))) (= (Simpler.BetreeNode.Total (Simpler.QueryReceiptLine.node (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) (and true (=> (Simpler.BetreeNode.BetreeNode_q (Simpler.QueryReceiptLine.node (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) (Simpler.ChildMap.Total (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))))))))))))
(assert (! (=> |b587[Simpleridfy.7:15!144]| (=> (and (= (type (Simpler.BetreeNode.children (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))) DatatypeTypeType) (or (|Simpler.ChildMap.Total#canCall| (Simpler.BetreeNode.children (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))) (and (not (= 6 $FunctionContextHeight)) ($Is (Simpler.BetreeNode.children (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))) Tclass.Simpler.ChildMap)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (Simpler.ChildMap.ChildMap_q (Simpler.BetreeNode.children (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))) (|Common.__default.TotalSet#canCall| (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))))) (= (Simpler.ChildMap.Total (Simpler.BetreeNode.children (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))) (and true (Common.__default.TotalSet (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))))))))))
(assert (! (=> |b671[Commonidfy.10:20!57]| (or (not (and (= (type (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))) (MapType0Type BoxType boolType)) (or (|Common.__default.TotalSet#canCall| (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))) ($Is (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) (TISet Tclass.Common.Key))))) (and |b701[Commonidfy.11:12]| (or (not (Common.__default.TotalSet (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))))) |b702[]|) (or (Common.__default.TotalSet (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))) (not (=> (= (type (|k#0@@0!1015!117| (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))))) (SeqType BoxType)) (=> (and ($Is (|k#0@@0!1015!117| (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))) Tclass.Common.Key) (Common.__default.AnyKey (|k#0@@0!1015!117| (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))))) (U_2_bool (MapType0Select (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) ($Box (|k#0@@0!1015!117| (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))))))))))))))))
(assert (! (=> (! |b641[Simpleridfy.25:5!243]|) (=> (and (= (type (|a#1#0#0@@1!952!114| this@@23)) (SeqType BoxType)) (= (type (|a#1#1#0@@0!952!113| this@@23)) DatatypeTypeType) (= (type (|a#1#2#0!952!112| this@@23)) (SeqType BoxType))) (= (Simpler.QueryReceipt.key (|#Simpler.QueryReceipt.QueryReceipt| (|a#1#0#0@@1!952!114| this@@23) (|a#1#1#0@@0!952!113| this@@23) (|a#1#2#0!952!112| this@@23))) (|a#1#0#0@@1!952!114| this@@23))))))
(assert (! (=> (! |b619[Simpleridfy.18:46!197]|) (=> (= (type (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))) DatatypeTypeType) (= (Simpler.QueryReceiptLine.node (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))) (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))))
(assert (! (=> (! |b632[Simpleridfy.25:5!226]|) (=> (and (= (type (|a#1#0#0@@1!952!114| this@@23)) (SeqType BoxType)) (= (type (|a#1#1#0@@0!952!113| this@@23)) DatatypeTypeType) (= (type (|a#1#2#0!952!112| this@@23)) (SeqType BoxType))) (= ($Is (|#Simpler.QueryReceipt.QueryReceipt| (|a#1#0#0@@1!952!114| this@@23) (|a#1#1#0@@0!952!113| this@@23) (|a#1#2#0!952!112| this@@23)) Tclass.Simpler.QueryReceipt) (and ($Is (|a#1#0#0@@1!952!114| this@@23) Tclass.Common.Key) ($Is (|a#1#1#0@@0!952!113| this@@23) Tclass.Simpler.BetreeNode) ($Is (|a#1#2#0!952!112| this@@23) (TSeq Tclass.Simpler.QueryReceiptLine))))))))
(assert (! (=> (! |b368[DafnyPreludebpl.1418:51]|) (= (INTERNAL_lt_boogie |i#0@@9| (|Seq#Length| (Simpler.QueryReceipt.lines this@@23))) (< |i#0@@9| (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)))))))
(assert (! (=> (! |b612[unknown.0:0!186]|) (or (not (and (= (type ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))) DatatypeTypeType) (Simpler.QueryReceiptLine.QueryReceiptLine_q ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))) (and (= (type (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))) DatatypeTypeType) (= ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)) (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))))))
(assert (! (=> (! |b54[funType:$Unbox]|) (= (type ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))) (type this@@23)))))
(assert (! (=> |b626[Simpleridfy.19:15!209]| (=> (and (= (type ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))) DatatypeTypeType) (or (|Simpler.QueryReceiptLine.Total#canCall| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))) (and (not (= 8 $FunctionContextHeight)) ($Is ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)) Tclass.Simpler.QueryReceiptLine)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (Simpler.QueryReceiptLine.QueryReceiptLine_q ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))) (|Simpler.BetreeNode.Total#canCall| (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) (= (Simpler.QueryReceiptLine.Total ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))) (and true (Simpler.BetreeNode.Total (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))))))))
(assert (! (=> |b700[]| (=> (and (! (INTERNAL_le_boogie 0 |i#0@@9|)) (INTERNAL_lt_boogie |i#0@@9| (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)))) (Simpler.QueryReceiptLine.Total ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))))
(assert (! (=> |b698[]| (=> (and (! (INTERNAL_le_boogie 0 |i#0@@9|)) (INTERNAL_lt_boogie |i#0@@9| (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)))) (= (Simpler.BetreeNode.BetreeNode_q (Simpler.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))) (! (INTERNAL_lt_boogie |i#0@@9| (INTERNAL_sub_boogie (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)) 1))))))))
(assert (! (=> (! |b597[funType:Simpler.BetreeNode.children]|) (= (type (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))) DatatypeTypeType))))
(assert (! (=> (! |b100[funType:IMap#Domain]|) (= (type (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))) (MapType0Type (IMapTypeInv0 (type (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))) boolType)))))
(assert (! (=> |b702[]| (=> (= (type (Simpler.QueryReceipt.key this@@23)) (SeqType BoxType)) (=> (and ($Is (Simpler.QueryReceipt.key this@@23) Tclass.Common.Key) (Common.__default.AnyKey (Simpler.QueryReceipt.key this@@23))) (U_2_bool (MapType0Select (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) ($Box (Simpler.QueryReceipt.key this@@23)))))))))
(assert (! (=> (! |b576[funType:Simpler.ChildMap.mapp]|) (= (type (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))) (IMapType BoxType BoxType)))))
(assert (! (=> |b669[Commonidfy.6:18!41]| (=> (and (= (type (|a#1#0#0@@1!952!114| this@@23)) (SeqType BoxType)) (or (|Common.__default.AnyKey#canCall| (|a#1#0#0@@1!952!114| this@@23)) ($Is (|a#1#0#0@@1!952!114| this@@23) Tclass.Common.Key))) (= (Common.__default.AnyKey (|a#1#0#0@@1!952!114| this@@23)) (U_2_bool (Lit (bool_2_U true))))))))
(assert (! (=> (! |b69[typeInv:IMapTypeInv0]|) (= (IMapTypeInv0 (IMapType BoxType BoxType)) BoxType))))
(check-sat)
;;! Commonidfy.11:12!55[k#0@@0=(Simpler.QueryReceipt.key this@@23),keys#0@@1=(IMap#Domain (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9))))))]
;;! Commonidfy.11:12!55
;;! |k#0@@0|
;;! (Simpler.QueryReceipt.key this@@23)
;;! |keys#0@@1|
;;! (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))
;;! ###
;;! Commonidfy.6:18!41[key#0@@1=(a#1#0#0@@1!952!114 this@@23)]
;;! Commonidfy.6:18!41
;;! |key#0@@1|
;;! (|a#1#0#0@@1!952!114| this@@23)
;;! ###
;;! DafnyPreludebpl.1414:30[x@@43=(Seq#Length (Simpler.QueryReceipt.lines this@@23)),y@@13=1]
;;! DafnyPreludebpl.1414:30
;;! x@@43
;;! (|Seq#Length| (Simpler.QueryReceipt.lines this@@23))
;;! y@@13
;;! 1
;;! ###
;;! DafnyPreludebpl.1418:51[x@@47=i#0@@9,y@@17=(INTERNAL_sub_boogie (Seq#Length (Simpler.QueryReceipt.lines this@@23)) 1)]
;;! DafnyPreludebpl.1418:51
;;! x@@47
;;! |i#0@@9|
;;! y@@17
;;! (INTERNAL_sub_boogie (|Seq#Length| (Simpler.QueryReceipt.lines this@@23)) 1)
;;! ###
;;! DafnyPreludebpl.1419:51[y@@18=i#0@@9,x@@48=0]
;;! DafnyPreludebpl.1419:51
;;! y@@18
;;! |i#0@@9|
;;! x@@48
;;! 0
;;! ###
;;! unknown.0:0!220[d@@29=this@@23]
;;! unknown.0:0!220
;;! d@@29
;;! this@@23
;;! ###
;;! Simpleridfy.29:15!279[this@@13=this@@23]
;;! Simpleridfy.29:15!279
;;! this@@13
;;! this@@23
;;! ###
;;! Simpleridfy.35:15!295[this@@17=this@@23]
;;! Simpleridfy.35:15!295
;;! this@@17
;;! this@@23
;;! ###
;;! Simpleridfy.18:46!197[a#5#0#0@@1=(a#1#0#0@@0!932!111 ($Unbox (type this@@23) (Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9)))]
;;! Simpleridfy.18:46!197
;;! |a#5#0#0@@1|
;;! (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))
;;! ###
;;! DafnyPreludebpl.1418:51[x@@47=i#0@@9,y@@17=(Seq#Length (Simpler.QueryReceipt.lines this@@23))]
;;! DafnyPreludebpl.1418:51
;;! x@@47
;;! |i#0@@9|
;;! y@@17
;;! (|Seq#Length| (Simpler.QueryReceipt.lines this@@23))
;;! ###
;;! Simpleridfy.19:15!209[this@@9=($Unbox (type this@@23) (Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9))]
;;! Simpleridfy.19:15!209
;;! this@@9
;;! ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))
;;! ###
;;! funType:Simpler.BetreeNode.children[arg0@@173=(Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9)))]
;;! funType:Simpler.BetreeNode.children
;;! arg0@@173
;;! (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))
;;! ###
;;! funType:IMap#Domain[arg0@@57=(Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9)))))]
;;! funType:IMap#Domain
;;! arg0@@57
;;! (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))
;;! ###
;;! funType:Simpler.ChildMap.mapp[arg0@@171=(Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9))))]
;;! funType:Simpler.ChildMap.mapp
;;! arg0@@171
;;! (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))
;;! ###
;;! typeInv:IMapTypeInv0[arg1@@12=BoxType,arg0@@46=BoxType]
;;! typeInv:IMapTypeInv0
;;! arg1@@12
;;! BoxType
;;! arg0@@46
;;! BoxType
;;! ###
;;! DafnyPreludebpl.89:29[x@@8=(bool_2_U true)]
;;! DafnyPreludebpl.89:29
;;! x@@8
;;! (bool_2_U true)
;;! ###
;;! typeInv:U_2_bool[arg0@@3=true]
;;! typeInv:U_2_bool
;;! arg0@@3
;;! true
;;! ###
;;! Simpleridfy.36:20[i#0@@1=i#0@@9,this@@17=this@@23]
;;! Simpleridfy.36:20
;;! |i#0@@1|
;;! |i#0@@9|
;;! this@@17
;;! this@@23
;;! ###
;;! Simpleridfy.13:15!178[this@@5=(Simpler.QueryReceiptLine.node (#Simpler.QueryReceiptLine.QueryReceiptLine (a#1#0#0@@0!932!111 ($Unbox (type this@@23) (Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9)))))]
;;! Simpleridfy.13:15!178
;;! this@@5
;;! (Simpler.QueryReceiptLine.node (|#Simpler.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)))))
;;! ###
;;! Simpleridfy.7:15!144[this@@1=(Simpler.BetreeNode.children (a#1#0#0@@0!932!111 ($Unbox (type this@@23) (Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9))))]
;;! Simpleridfy.7:15!144
;;! this@@1
;;! (Simpler.BetreeNode.children (|a#1#0#0@@0!932!111| ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))
;;! ###
;;! Commonidfy.10:20!57[keys#0@@1=(IMap#Domain (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9))))))]
;;! Commonidfy.10:20!57
;;! |keys#0@@1|
;;! (|IMap#Domain| (Simpler.ChildMap.mapp (Simpler.BetreeNode.children (Simpler.QueryReceiptLine.node ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))))))
;;! ###
;;! Simpleridfy.25:5!243[a#5#2#0=(a#1#2#0!952!112 this@@23),a#5#1#0@@0=(a#1#1#0@@0!952!113 this@@23),a#5#0#0@@2=(a#1#0#0@@1!952!114 this@@23)]
;;! Simpleridfy.25:5!243
;;! |a#5#2#0|
;;! (|a#1#2#0!952!112| this@@23)
;;! |a#5#1#0@@0|
;;! (|a#1#1#0@@0!952!113| this@@23)
;;! |a#5#0#0@@2|
;;! (|a#1#0#0@@1!952!114| this@@23)
;;! ###
;;! Simpleridfy.25:5!226[a#2#1#0@@0=(a#1#1#0@@0!952!113 this@@23),a#2#0#0@@1=(a#1#0#0@@1!952!114 this@@23),a#2#2#0=(a#1#2#0!952!112 this@@23)]
;;! Simpleridfy.25:5!226
;;! |a#2#1#0@@0|
;;! (|a#1#1#0@@0!952!113| this@@23)
;;! |a#2#0#0@@1|
;;! (|a#1#0#0@@1!952!114| this@@23)
;;! |a#2#2#0|
;;! (|a#1#2#0!952!112| this@@23)
;;! ###
;;! unknown.0:0!186[d@@24=($Unbox (type this@@23) (Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9))]
;;! unknown.0:0!186
;;! d@@24
;;! ($Unbox (type this@@23) (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|))
;;! ###
;;! funType:$Unbox[arg0@@34=(Seq#Index (Simpler.QueryReceipt.lines this@@23) i#0@@9),T@@0=(type this@@23)]
;;! funType:$Unbox
;;! arg0@@34
;;! (|Seq#Index| (Simpler.QueryReceipt.lines this@@23) |i#0@@9|)
;;! T@@0
;;! (type this@@23)
;;! ###
;;! Simpleridfy.36:20!293[i#0@@2=i#0@@9,this@@17=this@@23]
;;! Simpleridfy.36:20!293
;;! |i#0@@2|
;;! |i#0@@9|
;;! this@@17
;;! this@@23
;;! ###
;;! Simpleridfy.32:20!278[i#0@@0=i#0@@9,this@@13=this@@23]
;;! Simpleridfy.32:20!278
;;! |i#0@@0|
;;! |i#0@@9|
;;! this@@13
;;! this@@23
;;! ###

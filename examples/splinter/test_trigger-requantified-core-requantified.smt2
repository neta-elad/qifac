;(set-option :produce-proofs true)
(set-info :smt-lib-version |2.6|)
(set-info :category |"industrial"|)
(set-info :boogie-vc-id CheckWellformed$$Test.QueryReceipt.ChildAt)
(set-option :print-success false)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.arith.nl false)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-option :timeout 0)
(set-option :rlimit 16350000)
(declare-sort T@T 0)
(declare-sort T@U 0)
(declare-fun tickleBool (Bool) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun UOrdering2 (T@U T@U) Bool)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun |##Test.ChildMap.ChildMap| () T@U)
(declare-fun Tagclass.Common.Key () T@U)
(declare-fun Tagclass.Test.BetreeNode () T@U)
(declare-fun Tagclass.Test.ChildMap () T@U)
(declare-fun class.Test.ChildMap () T@U)
(declare-fun |##Test.BetreeNode.Nil| () T@U)
(declare-fun |##Test.BetreeNode.BetreeNode| () T@U)
(declare-fun class.Test.BetreeNode () T@U)
(declare-fun |##Test.QueryReceiptLine.QueryReceiptLine| () T@U)
(declare-fun Tagclass.Test.QueryReceiptLine () T@U)
(declare-fun class.Test.QueryReceiptLine () T@U)
(declare-fun |##Test.QueryReceipt.QueryReceipt| () T@U)
(declare-fun Tagclass.Test.QueryReceipt () T@U)
(declare-fun class.Test.QueryReceipt () T@U)
(declare-fun class.Test.__default () T@U)
(declare-fun Tagclass.Test.__default () T@U)
(declare-fun Tagclass.Common.byte () T@U)
(declare-fun class.Common.byte () T@U)
(declare-fun class.Common.__default () T@U)
(declare-fun Tagclass.Common.__default () T@U)
(declare-fun TyTagFamilyType () T@T)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun tytagFamily$Key () T@U)
(declare-fun tytagFamily$BetreeNode () T@U)
(declare-fun tytagFamily$ChildMap () T@U)
(declare-fun tytagFamily$QueryReceiptLine () T@U)
(declare-fun tytagFamily$QueryReceipt () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun bx@@10!398!0 (T@U T@U) T@U)
(declare-fun bx@@11!400!1 (T@U T@U) T@U)
(declare-fun bx@@12!402!2 (T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun i!405!3 (T@U T@U) Int)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun bx@@13!407!4 (T@U T@U T@U) T@U)
(declare-fun bx@@14!409!5 (T@U T@U T@U) T@U)
(declare-fun bx@@15!411!6 (T@U T@U T@U) T@U)
(declare-fun i@@0!413!7 (T@U T@U T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun bx@@16!415!8 (T@U T@U T@U) T@U)
(declare-fun bx@@17!417!9 (T@U T@U T@U T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun bx@@18!420!10 (T@U T@U T@U) T@U)
(declare-fun bx@@19!422!11 (T@U T@U T@U T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun x@@18!470!12 (T@U) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun o@@23!493!13 (T@U T@U) T@U)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun o@@24!495!14 (T@U T@U) T@U)
(declare-fun o@@25!498!15 (T@U T@U) T@U)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun o@@31!515!16 (T@U T@U) T@U)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun o@@32!517!17 (T@U T@U) T@U)
(declare-fun o@@33!520!18 (T@U T@U) T@U)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun bx@@22!527!19 (T@U) T@U)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun x@@28!532!20 (T@U) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun o@@40!549!21 (T@U T@U) T@U)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun o@@41!551!22 (T@U T@U) T@U)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun o@@42!554!23 (T@U T@U) T@U)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun i@@7!564!24 (T@U T@U) Int)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun i@@12!581!25 (T@U T@U) Int)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun i@@13!586!26 (Int T@U T@U) Int)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun i@@14!588!27 (Int T@U T@U) Int)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun j!590!28 (T@U T@U) Int)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun j@@0!593!29 (Int T@U T@U) Int)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun k@@4!621!30 (T@U) T@U)
(declare-fun v@@42!623!31 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun v@@43!625!32 (T@U) T@U)
(declare-fun k@@5!625!33 (T@U) T@U)
(declare-fun u@@5!630!34 (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun bx@@24!636!35 (T@U T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun u@@13!646!37 (T@U T@U) T@U)
(declare-fun u@@12!645!36 (T@U T@U) T@U)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun o@@43!649!38 (T@U T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun k@@6!651!39 (T@U) T@U)
(declare-fun v@@48!653!40 (T@U) T@U)
(declare-fun v@@49!655!41 (T@U) T@U)
(declare-fun k@@7!655!42 (T@U) T@U)
(declare-fun u@@14!660!43 (T@U T@U) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun bx@@25!666!44 (T@U T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun u@@18!670!46 (T@U T@U) T@U)
(declare-fun u@@17!669!45 (T@U T@U) T@U)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun fld!724!47 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@44!724!48 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@0!726!49 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@45!726!50 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@1!728!51 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@46!728!52 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@2!730!53 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@47!730!54 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@3!732!55 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@48!732!56 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@4!734!57 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@49!734!58 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun bx0@@10!738!59 (T@U T@U T@U) T@U)
(declare-fun h@@24!738!60 (T@U T@U T@U) T@U)
(declare-fun bx@@34!741!62 (T@U T@U) T@U)
(declare-fun bx@@33!740!61 (T@U T@U) T@U)
(declare-fun r@@9!743!64 (T@U T@U T@U T@U) T@U)
(declare-fun bx0@@11!744!63 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun |x0#0!752!65| (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun |x0#0@@0!759!66| (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun fld@@5!768!67 (T@U T@U T@U T@U) T@U)
(declare-fun o@@50!768!68 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@6!770!70 (T@U T@U T@U T@U) T@U)
(declare-fun o@@51!770!69 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@7!772!71 (T@U T@U T@U T@U) T@U)
(declare-fun o@@52!772!72 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@8!774!73 (T@U T@U T@U T@U) T@U)
(declare-fun o@@53!774!74 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@9!776!75 (T@U T@U T@U T@U) T@U)
(declare-fun o@@54!776!76 (T@U T@U T@U T@U) T@U)
(declare-fun fld@@10!778!77 (T@U T@U T@U T@U) T@U)
(declare-fun o@@55!778!78 (T@U T@U T@U T@U) T@U)
(declare-fun h@@30!782!79 (T@U T@U) T@U)
(declare-fun bx@@39!784!80 (T@U T@U) T@U)
(declare-fun r@@13!786!81 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@11!812!82 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@56!812!83 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@12!814!84 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@57!814!85 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@13!816!87 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@58!816!86 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@14!818!88 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@59!818!89 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@15!820!90 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@60!820!91 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun fld@@16!822!92 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun o@@61!822!93 (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun bx1@@10!826!94 (T@U T@U T@U T@U) T@U)
(declare-fun bx0@@24!826!95 (T@U T@U T@U T@U) T@U)
(declare-fun h@@36!826!96 (T@U T@U T@U T@U) T@U)
(declare-fun bx@@47!830!99 (T@U T@U) T@U)
(declare-fun bx@@46!829!98 (T@U T@U) T@U)
(declare-fun bx@@45!828!97 (T@U T@U) T@U)
(declare-fun r@@17!832!102 (T@U T@U T@U T@U T@U) T@U)
(declare-fun bx1@@11!833!100 (T@U T@U T@U T@U T@U) T@U)
(declare-fun bx0@@25!833!101 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun |x1#0!842!103| (T@U T@U T@U T@U) T@U)
(declare-fun |x0#0@@1!842!104| (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun |x1#0@@0!850!105| (T@U T@U T@U T@U) T@U)
(declare-fun |x0#0@@2!850!106| (T@U T@U T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun |a#1#1#0!855!107| (T@U) T@U)
(declare-fun |a#1#0#0!855!108| (T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun |#Test.ChildMap.ChildMap| (T@U) T@U)
(declare-fun Test.ChildMap.ChildMap_q (T@U) Bool)
(declare-fun |a#15#0#0!886!109| (T@U) T@U)
(declare-fun Tclass.Common.Key () T@U)
(declare-fun Tclass.Test.BetreeNode () T@U)
(declare-fun Tclass.Test.ChildMap () T@U)
(declare-fun Test.ChildMap.mapp (T@U) T@U)
(declare-fun |$IsA#Test.ChildMap| (T@U) Bool)
(declare-fun |Test.ChildMap#Equal| (T@U T@U) Bool)
(declare-fun Test.ChildMap.WF (T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |Test.ChildMap.WF#canCall| (T@U) Bool)
(declare-fun |Test.ChildMap.WF#requires| (T@U T@U) Bool)
(declare-fun Test.BetreeNode.WF (T@U T@U) Bool)
(declare-fun |k#0@@0!906!110| (T@U T@U) T@U)
(declare-fun Common.__default.AnyKey (T@U) Bool)
(declare-fun Common.__default.TotalSet (T@U) Bool)
(declare-fun |Test.BetreeNode.WF#canCall| (T@U) Bool)
(declare-fun |Common.__default.AnyKey#canCall| (T@U) Bool)
(declare-fun |Common.__default.TotalSet#canCall| (T@U) Bool)
(declare-fun |k#1@@0!909!111| (T@U T@U) T@U)
(declare-fun |#Test.BetreeNode.Nil| () T@U)
(declare-fun Test.BetreeNode.Nil_q (T@U) Bool)
(declare-fun |#Test.BetreeNode.BetreeNode| (T@U) T@U)
(declare-fun Test.BetreeNode.BetreeNode_q (T@U) Bool)
(declare-fun |a#6#0#0@@0!922!112| (T@U) T@U)
(declare-fun Test.BetreeNode.children (T@U) T@U)
(declare-fun |$IsA#Test.BetreeNode| (T@U) Bool)
(declare-fun |Test.BetreeNode#Equal| (T@U T@U) Bool)
(declare-fun |Test.BetreeNode.WF#requires| (T@U T@U) Bool)
(declare-fun |#Test.QueryReceiptLine.QueryReceiptLine| (T@U) T@U)
(declare-fun Test.QueryReceiptLine.QueryReceiptLine_q (T@U) Bool)
(declare-fun |a#1#0#0@@0!944!113| (T@U) T@U)
(declare-fun Tclass.Test.QueryReceiptLine () T@U)
(declare-fun Test.QueryReceiptLine.node (T@U) T@U)
(declare-fun |$IsA#Test.QueryReceiptLine| (T@U) Bool)
(declare-fun |Test.QueryReceiptLine#Equal| (T@U T@U) Bool)
(declare-fun Test.QueryReceiptLine.WF (T@U) Bool)
(declare-fun |Test.QueryReceiptLine.WF#canCall| (T@U) Bool)
(declare-fun |Test.QueryReceiptLine.WF#requires| (T@U) Bool)
(declare-fun |#Test.QueryReceipt.QueryReceipt| (T@U T@U T@U) T@U)
(declare-fun Test.QueryReceipt.QueryReceipt_q (T@U) Bool)
(declare-fun |a#1#2#0!964!115| (T@U) T@U)
(declare-fun |a#1#1#0@@0!964!116| (T@U) T@U)
(declare-fun |a#1#0#0@@1!964!114| (T@U) T@U)
(declare-fun Tclass.Test.QueryReceipt () T@U)
(declare-fun Test.QueryReceipt.key (T@U) T@U)
(declare-fun Test.QueryReceipt.root (T@U) T@U)
(declare-fun Test.QueryReceipt.lines (T@U) T@U)
(declare-fun |$IsA#Test.QueryReceipt| (T@U) Bool)
(declare-fun |Test.QueryReceipt#Equal| (T@U T@U) Bool)
(declare-fun Test.QueryReceipt.Structure (T@U) Bool)
(declare-fun |Test.QueryReceipt.Structure#canCall| (T@U) Bool)
(declare-fun |Test.QueryReceipt.Structure#requires| (T@U) Bool)
(declare-fun |i#0@@0!985!117| (T@U) Int)
(declare-fun |i#1@@0!988!118| (T@U) Int)
(declare-fun Test.QueryReceipt.AllLinesWF (T@U) Bool)
(declare-fun |Test.QueryReceipt.AllLinesWF#canCall| (T@U) Bool)
(declare-fun |Test.QueryReceipt.AllLinesWF#requires| (T@U) Bool)
(declare-fun |i#0@@2!995!119| (T@U) Int)
(declare-fun |i#1@@2!998!120| (T@U) Int)
(declare-fun Test.QueryReceipt.ChildAt (T@U Int) T@U)
(declare-fun |Test.QueryReceipt.ChildAt#canCall| (T@U Int) Bool)
(declare-fun |Test.QueryReceipt.ChildAt#requires| (T@U Int) Bool)
(declare-fun Tclass.Test.__default () T@U)
(declare-fun Tclass.Common.byte () T@U)
(declare-fun Tclass.Common.__default () T@U)
(declare-fun |Common.__default.AnyKey#requires| (T@U) Bool)
(declare-fun |Common.__default.TotalSet#requires| (T@U) Bool)
(declare-fun |k#0@@2!1032!121| (T@U) T@U)
(declare-fun |k#1@@2!1035!122| (T@U) T@U)
(declare-fun MapType4Type (T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap () T@U)
(declare-fun this@@27 () T@U)
(declare-fun $_Frame@0@@0 () T@U)
(declare-fun ControlFlow (Int Int) Int)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun |i#0@@9| () Int)
(declare-fun |b$reqreads#0@0| () Bool)
(declare-fun $f@@11!1008!124 () T@U)
(declare-fun $o@@25!1008!123 () T@U)
(declare-fun |b$reqreads#1@0| () Bool)
(declare-fun $f@@12!1009!125 () T@U)
(declare-fun $o@@26!1009!126 () T@U)
(declare-fun |k#1@@3!1012!128| () T@U)
(declare-fun |k#0@@3!1010!127| () T@U)
(assert (forall ((arg0@@3 Bool)) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :pattern ((bool_2_U arg0@@3)) :qid |typeInv:U_2_bool|)))
(assert (forall ((x@@8 T@U)) (! (= (Lit x@@8) x@@8) :pattern ((Lit x@@8)) :skolemid |362| :qid |DafnyPreludebpl.89:29|)))
(assert (forall ((T@@0 T@T)(arg0@@34 T@U)) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :pattern (($Unbox T@@0 arg0@@34)) :qid |funType:$Unbox|)))
(assert (forall ((arg1@@12 T@T)(arg0@@46 T@T)) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :pattern ((IMapType arg0@@46 arg1@@12)) :qid |typeInv:IMapTypeInv0|)))
(assert (forall ((arg0@@57 T@U)) (! (= (type (|IMap#Domain| arg0@@57)) (MapType0Type (IMapTypeInv0 (type arg0@@57)) boolType)) :pattern ((|IMap#Domain| arg0@@57)) :qid |funType:IMap#Domain|)))
(assert (forall ((x@@43 Int)(y@@13 Int)) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :pattern ((INTERNAL_sub_boogie x@@43 y@@13)) :skolemid |678| :qid |DafnyPreludebpl.1414:30|)))
(assert (forall ((x@@47 Int)(y@@17 Int)) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :pattern ((INTERNAL_lt_boogie x@@47 y@@17)) :skolemid |682| :qid |DafnyPreludebpl.1418:51|)))
(assert (forall ((y@@18 Int)(x@@48 Int)) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :pattern ((INTERNAL_le_boogie x@@48 y@@18)) :skolemid |683| :qid |DafnyPreludebpl.1419:51|)))
(assert (forall ((bx@@49 T@U)(|#$T0@@31| T@U)(|#$T1@@15| T@U)(|#$R@@44| T@U)) (! (=> (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType) (= (type |#$R@@44|) TyType) (= (type bx@@49) BoxType) ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :pattern (($IsBox bx@@49
                       (Tclass._System.___hTotalFunc2
                         |#$T0@@31|
                         |#$T1@@15|
                         |#$R@@44|))) :skolemid |849| :qid |unknown.0:0|)))
(assert (forall ((bx@@50 T@U)(|_System._tuple#2$T0@@2| T@U)(|_System._tuple#2$T1@@2| T@U)) (! (=> (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType) (= (type bx@@50) BoxType) ($IsBox bx@@50 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@50)) bx@@50) ($Is ($Unbox DatatypeTypeType bx@@50) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :pattern (($IsBox bx@@50
                       (Tclass._System.Tuple2
                         |_System._tuple#2$T0@@2|
                         |_System._tuple#2$T1@@2|))) :skolemid |860| :qid |unknown.0:0!24|)))
(assert (forall ((arg0@@171 T@U)) (! (= (type (Test.ChildMap.mapp arg0@@171)) (IMapType BoxType BoxType)) :pattern ((Test.ChildMap.mapp arg0@@171)) :qid |funType:Test.ChildMap.mapp|)))
(assert (forall ((this T@U)($ly T@U)) (! (=> (and (= (type $ly) LayerTypeType) (= (type this) DatatypeTypeType)) (= (Test.ChildMap.WF ($LS $ly) this) (Test.ChildMap.WF $ly this))) :pattern ((Test.ChildMap.WF ($LS $ly) this)) :skolemid |902| :qid |Testidfy.7:15|)))
(assert (= (type $LZ) LayerTypeType))
(assert (or (not (<= 5 $FunctionContextHeight)) (forall ((this@@3 T@U)($ly@@3 T@U)) (! (or (not (and (= (type $ly@@3) LayerTypeType) (= (type this@@3) DatatypeTypeType) (or (|Test.ChildMap.WF#canCall| this@@3) (and (not (= 5 $FunctionContextHeight)) ($Is this@@3 Tclass.Test.ChildMap))))) (and (Test.ChildMap.ChildMap_q this@@3) (|Common.__default.TotalSet#canCall| (|IMap#Domain| (Test.ChildMap.mapp this@@3))) (or (not (Common.__default.TotalSet (|IMap#Domain| (Test.ChildMap.mapp this@@3)))) (forall ((|k#0| T@U)) (! (=> (and (= (type |k#0|) (SeqType BoxType)) ($Is |k#0| Tclass.Common.Key)) (and (|Common.__default.AnyKey#canCall| |k#0|) (=> (Common.__default.AnyKey |k#0|) (and (Test.ChildMap.ChildMap_q this@@3) (|Test.BetreeNode.WF#canCall| ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp this@@3)) ($Box |k#0|)))))))) :pattern ((Common.__default.AnyKey |k#0|)) :pattern (($Unbox DatatypeTypeType
                                           (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp
                                                                              this@@3))
                                                           ($Box |k#0|)))) :skolemid |907| :qid |Testidfy.9:20|))) (or (not (Test.ChildMap.WF ($LS $ly@@3) this@@3)) (and (Common.__default.TotalSet (|IMap#Domain| (Test.ChildMap.mapp this@@3))) (forall ((|k#0@@0| T@U)) (! (=> (= (type |k#0@@0|) (SeqType BoxType)) (=> (and ($Is |k#0@@0| Tclass.Common.Key) (Common.__default.AnyKey |k#0@@0|)) (Test.BetreeNode.WF $ly@@3 ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp this@@3)) ($Box |k#0@@0|)))))) :pattern ((Common.__default.AnyKey |k#0@@0|)) :pattern (($Unbox DatatypeTypeType
                                           (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp
                                                                              this@@3))
                                                           ($Box |k#0@@0|)))) :skolemid |906| :qid |Testidfy.9:20!152|)))) (or (Test.ChildMap.WF ($LS $ly@@3) this@@3) (not (Common.__default.TotalSet (|IMap#Domain| (Test.ChildMap.mapp this@@3)))) (not (=> (= (type (|k#0@@0!906!110| this@@3 $ly@@3)) (SeqType BoxType)) (=> (and ($Is (|k#0@@0!906!110| this@@3 $ly@@3) Tclass.Common.Key) (Common.__default.AnyKey (|k#0@@0!906!110| this@@3 $ly@@3))) (Test.BetreeNode.WF $ly@@3 ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp this@@3)) ($Box (|k#0@@0!906!110| this@@3 $ly@@3))))))))))) :pattern ((Test.ChildMap.WF ($LS $ly@@3) this@@3)) :skolemid |908| :qid |Testidfy.7:15!153|))))
(assert (forall ((arg0@@174 T@U)) (! (= (type (Test.BetreeNode.children arg0@@174)) DatatypeTypeType) :pattern ((Test.BetreeNode.children arg0@@174)) :qid |funType:Test.BetreeNode.children|)))
(assert (forall (($ly@@5 T@U)(this@@5 T@U)) (! (=> (and (= (type $ly@@5) LayerTypeType) (= (type this@@5) DatatypeTypeType)) (= (Test.BetreeNode.WF ($LS $ly@@5) this@@5) (Test.BetreeNode.WF $ly@@5 this@@5))) :pattern ((Test.BetreeNode.WF ($LS $ly@@5) this@@5)) :skolemid |935| :qid |Testidfy.14:15|)))
(assert (or (not (<= 5 $FunctionContextHeight)) (forall ((this@@9 T@U)($ly@@9 T@U)) (! (=> (and (= (type $ly@@9) LayerTypeType) (= (type this@@9) DatatypeTypeType) (or (|Test.BetreeNode.WF#canCall| this@@9) (and (not (= 5 $FunctionContextHeight)) ($Is this@@9 Tclass.Test.BetreeNode)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (=> (Test.BetreeNode.BetreeNode_q this@@9) (|Test.ChildMap.WF#canCall| (Test.BetreeNode.children this@@9)))) (= (Test.BetreeNode.WF ($LS $ly@@9) this@@9) (and true (=> (Test.BetreeNode.BetreeNode_q this@@9) (Test.ChildMap.WF $ly@@9 (Test.BetreeNode.children this@@9))))))) :pattern ((Test.BetreeNode.WF ($LS $ly@@9) this@@9)) :skolemid |939| :qid |Testidfy.14:15!202|))))
(assert (forall ((|a#0#0#0@@0| T@U)) (! (=> (= (type |a#0#0#0@@0|) DatatypeTypeType) (= (DatatypeCtorId (|#Test.QueryReceiptLine.QueryReceiptLine| |a#0#0#0@@0|)) |##Test.QueryReceiptLine.QueryReceiptLine|)) :pattern ((|#Test.QueryReceiptLine.QueryReceiptLine| |a#0#0#0@@0|)) :skolemid |942| :qid |Testidfy.19:46|)))
(assert (forall ((d@@24 T@U)) (! (or (not (and (= (type d@@24) DatatypeTypeType) (Test.QueryReceiptLine.QueryReceiptLine_q d@@24))) (and (= (type (|a#1#0#0@@0!944!113| d@@24)) DatatypeTypeType) (= d@@24 (|#Test.QueryReceiptLine.QueryReceiptLine| (|a#1#0#0@@0!944!113| d@@24))))) :pattern ((Test.QueryReceiptLine.QueryReceiptLine_q d@@24)) :skolemid |945| :qid |unknown.0:0!211|)))
(assert (forall ((|a#5#0#0@@1| T@U)) (! (=> (= (type |a#5#0#0@@1|) DatatypeTypeType) (= (Test.QueryReceiptLine.node (|#Test.QueryReceiptLine.QueryReceiptLine| |a#5#0#0@@1|)) |a#5#0#0@@1|)) :pattern ((|#Test.QueryReceiptLine.QueryReceiptLine| |a#5#0#0@@1|)) :skolemid |951| :qid |Testidfy.19:46!221|)))
(assert (or (not (<= 6 $FunctionContextHeight)) (forall ((this@@11 T@U)) (! (=> (and (= (type this@@11) DatatypeTypeType) (or (|Test.QueryReceiptLine.WF#canCall| this@@11) (and (not (= 6 $FunctionContextHeight)) ($Is this@@11 Tclass.Test.QueryReceiptLine)))) true) :pattern ((Test.QueryReceiptLine.WF this@@11)) :skolemid |957| :qid |Testidfy.20:15|))))
(assert (or (not (<= 6 $FunctionContextHeight)) (forall ((this@@13 T@U)) (! (=> (and (= (type this@@13) DatatypeTypeType) (or (|Test.QueryReceiptLine.WF#canCall| this@@13) (and (not (= 6 $FunctionContextHeight)) ($Is this@@13 Tclass.Test.QueryReceiptLine)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (Test.QueryReceiptLine.QueryReceiptLine_q this@@13) (|Test.BetreeNode.WF#canCall| (Test.QueryReceiptLine.node this@@13)))) (= (Test.QueryReceiptLine.WF this@@13) (and true (Test.BetreeNode.WF ($LS $LZ) (Test.QueryReceiptLine.node this@@13)))))) :pattern ((Test.QueryReceiptLine.WF this@@13)) :skolemid |959| :qid |Testidfy.20:15!236|))))
(assert (forall ((|a#0#0#0@@1| T@U)(|a#0#1#0@@0| T@U)(|a#0#2#0| T@U)) (! (=> (and (= (type |a#0#0#0@@1|) (SeqType BoxType)) (= (type |a#0#1#0@@0|) DatatypeTypeType) (= (type |a#0#2#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#Test.QueryReceipt.QueryReceipt| |a#0#0#0@@1| |a#0#1#0@@0| |a#0#2#0|)) |##Test.QueryReceipt.QueryReceipt|)) :pattern ((|#Test.QueryReceipt.QueryReceipt|
                 |a#0#0#0@@1|
                 |a#0#1#0@@0|
                 |a#0#2#0|)) :skolemid |962| :qid |Testidfy.26:5|)))
(assert (forall ((d@@29 T@U)) (! (or (not (and (= (type d@@29) DatatypeTypeType) (Test.QueryReceipt.QueryReceipt_q d@@29))) (and (= (type (|a#1#0#0@@1!964!114| d@@29)) (SeqType BoxType)) (= (type (|a#1#1#0@@0!964!116| d@@29)) DatatypeTypeType) (= (type (|a#1#2#0!964!115| d@@29)) (SeqType BoxType)) (= d@@29 (|#Test.QueryReceipt.QueryReceipt| (|a#1#0#0@@1!964!114| d@@29) (|a#1#1#0@@0!964!116| d@@29) (|a#1#2#0!964!115| d@@29))))) :pattern ((Test.QueryReceipt.QueryReceipt_q d@@29)) :skolemid |965| :qid |unknown.0:0!248|)))
(assert (forall ((|a#2#0#0@@1| T@U)(|a#2#1#0@@0| T@U)(|a#2#2#0| T@U)) (! (=> (and (= (type |a#2#0#0@@1|) (SeqType BoxType)) (= (type |a#2#1#0@@0|) DatatypeTypeType) (= (type |a#2#2#0|) (SeqType BoxType))) (= ($Is (|#Test.QueryReceipt.QueryReceipt| |a#2#0#0@@1| |a#2#1#0@@0| |a#2#2#0|) Tclass.Test.QueryReceipt) (and ($Is |a#2#0#0@@1| Tclass.Common.Key) ($Is |a#2#1#0@@0| Tclass.Test.BetreeNode) ($Is |a#2#2#0| (TSeq Tclass.Test.QueryReceiptLine))))) :pattern (($Is (|#Test.QueryReceipt.QueryReceipt|
                      |a#2#0#0@@1|
                      |a#2#1#0@@0|
                      |a#2#2#0|)
                    Tclass.Test.QueryReceipt)) :skolemid |967| :qid |Testidfy.26:5!253|)))
(assert (forall ((|a#5#2#0| T@U)(|a#5#0#0@@2| T@U)(|a#5#1#0@@0| T@U)) (! (=> (and (= (type |a#5#0#0@@2|) (SeqType BoxType)) (= (type |a#5#1#0@@0|) DatatypeTypeType) (= (type |a#5#2#0|) (SeqType BoxType))) (= (Test.QueryReceipt.key (|#Test.QueryReceipt.QueryReceipt| |a#5#0#0@@2| |a#5#1#0@@0| |a#5#2#0|)) |a#5#0#0@@2|)) :pattern ((|#Test.QueryReceipt.QueryReceipt|
                 |a#5#0#0@@2|
                 |a#5#1#0@@0|
                 |a#5#2#0|)) :skolemid |973| :qid |Testidfy.26:5!273|)))
(assert (or (not (<= 8 $FunctionContextHeight)) (forall ((this@@15 T@U)) (! (=> (and (= (type this@@15) DatatypeTypeType) (or (|Test.QueryReceipt.Structure#canCall| this@@15) (and (not (= 8 $FunctionContextHeight)) ($Is this@@15 Tclass.Test.QueryReceipt)))) true) :pattern ((Test.QueryReceipt.Structure this@@15)) :skolemid |983| :qid |Testidfy.30:15|))))
(assert (or (not (<= 8 $FunctionContextHeight)) (forall ((this@@17 T@U)) (! (or (not (and (= (type this@@17) DatatypeTypeType) (or (|Test.QueryReceipt.Structure#canCall| this@@17) (and (not (= 8 $FunctionContextHeight)) ($Is this@@17 Tclass.Test.QueryReceipt))))) (and (Test.QueryReceipt.QueryReceipt_q this@@17) (or (not (INTERNAL_lt_boogie 0 (|Seq#Length| (Test.QueryReceipt.lines this@@17)))) (and (|$IsA#Test.BetreeNode| (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (LitInt 0))))) (|$IsA#Test.BetreeNode| (Test.QueryReceipt.root this@@17)) (Test.QueryReceipt.QueryReceipt_q this@@17) (Test.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (LitInt 0)))) (Test.QueryReceipt.QueryReceipt_q this@@17) (or (not (|Test.BetreeNode#Equal| (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (LitInt 0)))) (Test.QueryReceipt.root this@@17))) (forall ((|i#0| Int)) (! (=> (INTERNAL_le_boogie 0 |i#0|) (and (Test.QueryReceipt.QueryReceipt_q this@@17) (=> (INTERNAL_lt_boogie |i#0| (|Seq#Length| (Test.QueryReceipt.lines this@@17))) (and (Test.QueryReceipt.QueryReceipt_q this@@17) (Test.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) |i#0|))) (Test.QueryReceipt.QueryReceipt_q this@@17))))) :pattern (($Unbox DatatypeTypeType
                                           (|Seq#Index| (Test.QueryReceipt.lines
                                                          this@@17)
                                                        |i#0|))) :skolemid |986| :qid |Testidfy.33:20|))))) (or (not (Test.QueryReceipt.Structure this@@17)) (and (and (INTERNAL_lt_boogie 0 (|Seq#Length| (Test.QueryReceipt.lines this@@17))) (|Test.BetreeNode#Equal| (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (LitInt 0)))) (Test.QueryReceipt.root this@@17))) (forall ((|i#0@@0| Int)) (! (=> (and (INTERNAL_le_boogie 0 |i#0@@0|) (INTERNAL_lt_boogie |i#0@@0| (|Seq#Length| (Test.QueryReceipt.lines this@@17)))) (= (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) |i#0@@0|)))) (INTERNAL_lt_boogie |i#0@@0| (INTERNAL_sub_boogie (|Seq#Length| (Test.QueryReceipt.lines this@@17)) 1)))) :pattern (($Unbox DatatypeTypeType
                                            (|Seq#Index| (Test.QueryReceipt.lines
                                                           this@@17)
                                                         |i#0@@0|))) :skolemid |985| :qid |Testidfy.33:20!305|)))) (or (Test.QueryReceipt.Structure this@@17) (not (and (INTERNAL_lt_boogie 0 (|Seq#Length| (Test.QueryReceipt.lines this@@17))) (|Test.BetreeNode#Equal| (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (LitInt 0)))) (Test.QueryReceipt.root this@@17)))) (not (=> (and (INTERNAL_le_boogie 0 (|i#0@@0!985!117| this@@17)) (INTERNAL_lt_boogie (|i#0@@0!985!117| this@@17) (|Seq#Length| (Test.QueryReceipt.lines this@@17)))) (= (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@17) (|i#0@@0!985!117| this@@17))))) (INTERNAL_lt_boogie (|i#0@@0!985!117| this@@17) (INTERNAL_sub_boogie (|Seq#Length| (Test.QueryReceipt.lines this@@17)) 1)))))))) :pattern ((Test.QueryReceipt.Structure this@@17)) :skolemid |987| :qid |Testidfy.30:15!306|))))
(assert (or (not (<= 7 $FunctionContextHeight)) (forall ((this@@21 T@U)) (! (or (not (and (= (type this@@21) DatatypeTypeType) (or (|Test.QueryReceipt.AllLinesWF#canCall| this@@21) (and (not (= 7 $FunctionContextHeight)) ($Is this@@21 Tclass.Test.QueryReceipt))))) (and (or (not (U_2_bool (Lit (bool_2_U true)))) (forall ((|i#0@@1| Int)) (! (=> (INTERNAL_le_boogie 0 |i#0@@1|) (and (Test.QueryReceipt.QueryReceipt_q this@@21) (=> (INTERNAL_lt_boogie |i#0@@1| (|Seq#Length| (Test.QueryReceipt.lines this@@21))) (and (Test.QueryReceipt.QueryReceipt_q this@@21) (|Test.QueryReceiptLine.WF#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@21) |i#0@@1|))))))) :pattern (($Unbox DatatypeTypeType
                                           (|Seq#Index| (Test.QueryReceipt.lines
                                                          this@@21)
                                                        |i#0@@1|))) :skolemid |996| :qid |Testidfy.37:20|))) (or (not (Test.QueryReceipt.AllLinesWF this@@21)) (and true (forall ((|i#0@@2| Int)) (! (=> (and (INTERNAL_le_boogie 0 |i#0@@2|) (INTERNAL_lt_boogie |i#0@@2| (|Seq#Length| (Test.QueryReceipt.lines this@@21)))) (Test.QueryReceiptLine.WF ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@21) |i#0@@2|)))) :pattern (($Unbox DatatypeTypeType
                                                    (|Seq#Index| (Test.QueryReceipt.lines
                                                                   this@@21)
                                                                 |i#0@@2|))) :skolemid |995| :qid |Testidfy.37:20!1|)))) (or (Test.QueryReceipt.AllLinesWF this@@21) (not true) (not (=> (and (INTERNAL_le_boogie 0 (|i#0@@2!995!119| this@@21)) (INTERNAL_lt_boogie (|i#0@@2!995!119| this@@21) (|Seq#Length| (Test.QueryReceipt.lines this@@21)))) (Test.QueryReceiptLine.WF ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@21) (|i#0@@2!995!119| this@@21))))))))) :pattern ((Test.QueryReceipt.AllLinesWF this@@21)) :skolemid |997| :qid |Testidfy.36:15|))))
(assert (or (not true) (forall ((|key#0| T@U)) (! (=> (and (= (type |key#0|) (SeqType BoxType)) (or (|Common.__default.AnyKey#canCall| |key#0|) ($Is |key#0| Tclass.Common.Key))) true) :pattern ((Common.__default.AnyKey |key#0|)) :skolemid |1026| :qid |Commonidfy.6:18|))))
(assert (or (not true) (forall ((|key#0@@1| T@U)) (! (=> (and (= (type |key#0@@1|) (SeqType BoxType)) (or (|Common.__default.AnyKey#canCall| |key#0@@1|) ($Is |key#0@@1| Tclass.Common.Key))) (= (Common.__default.AnyKey |key#0@@1|) (U_2_bool (Lit (bool_2_U true))))) :pattern ((Common.__default.AnyKey |key#0@@1|)) :skolemid |1028| :qid |Commonidfy.6:18!76|))))
(assert (or (not true) (forall ((|keys#0| T@U)) (! (=> (and (= (type |keys#0|) (MapType0Type BoxType boolType)) (or (|Common.__default.TotalSet#canCall| |keys#0|) ($Is |keys#0| (TISet Tclass.Common.Key)))) true) :pattern ((Common.__default.TotalSet |keys#0|)) :skolemid |1030| :qid |Commonidfy.10:20|))))
(assert (or (not true) (forall ((|keys#0@@1| T@U)) (! (or (not (and (= (type |keys#0@@1|) (MapType0Type BoxType boolType)) (or (|Common.__default.TotalSet#canCall| |keys#0@@1|) ($Is |keys#0@@1| (TISet Tclass.Common.Key))))) (and (forall ((|k#0@@1| T@U)) (! (=> (and (= (type |k#0@@1|) (SeqType BoxType)) ($Is |k#0@@1| Tclass.Common.Key)) (|Common.__default.AnyKey#canCall| |k#0@@1|)) :pattern ((MapType0Select |keys#0@@1| ($Box |k#0@@1|))) :pattern ((Common.__default.AnyKey |k#0@@1|)) :skolemid |1033| :qid |Commonidfy.11:12|)) (or (not (Common.__default.TotalSet |keys#0@@1|)) (forall ((|k#0@@2| T@U)) (! (=> (= (type |k#0@@2|) (SeqType BoxType)) (=> (and ($Is |k#0@@2| Tclass.Common.Key) (Common.__default.AnyKey |k#0@@2|)) (U_2_bool (MapType0Select |keys#0@@1| ($Box |k#0@@2|))))) :pattern ((Common.__default.AnyKey |k#0@@2|)) :pattern ((MapType0Select |keys#0@@1| ($Box |k#0@@2|))) :skolemid |1032| :qid |Commonidfy.11:12!90|))) (or (Common.__default.TotalSet |keys#0@@1|) (not (=> (= (type (|k#0@@2!1032!121| |keys#0@@1|)) (SeqType BoxType)) (=> (and ($Is (|k#0@@2!1032!121| |keys#0@@1|) Tclass.Common.Key) (Common.__default.AnyKey (|k#0@@2!1032!121| |keys#0@@1|))) (U_2_bool (MapType0Select |keys#0@@1| ($Box (|k#0@@2!1032!121| |keys#0@@1|)))))))))) :pattern ((Common.__default.TotalSet |keys#0@@1|)) :skolemid |1034| :qid |Commonidfy.10:20!92|))))
(assert (= (type this@@27) DatatypeTypeType))
(assert ($Is this@@27 Tclass.Test.QueryReceipt))
(assert (INTERNAL_le_boogie 0 |i#0@@9|))
(assert (= 9 $FunctionContextHeight))
(assert (or |b$reqreads#0@0| (not (=> (and (= (type $o@@25!1008!123) refType) (= (type $f@@11!1008!124) (FieldType (FieldTypeInv0 (type $f@@11!1008!124)))) false) (U_2_bool (MapType4Select $_Frame@0@@0 $o@@25!1008!123 $f@@11!1008!124))))))
(assert (Test.QueryReceipt.AllLinesWF this@@27))
(assert (or |b$reqreads#1@0| (not (=> (and (= (type $o@@26!1009!126) refType) (= (type $f@@12!1009!125) (FieldType (FieldTypeInv0 (type $f@@12!1009!125)))) false) (U_2_bool (MapType4Select $_Frame@0@@0 $o@@26!1009!126 $f@@12!1009!125))))))
(assert (Test.QueryReceipt.Structure this@@27))
(assert (INTERNAL_lt_boogie |i#0@@9| (INTERNAL_sub_boogie (|Seq#Length| (Test.QueryReceipt.lines this@@27)) 1)))
(assert (or (not (=> (= (ControlFlow 0 39141) (- 0 56539)) |b$reqreads#0@0|)) (and |b$reqreads#0@0| (or (not (=> (= (ControlFlow 0 39141) (- 0 56540)) |b$reqreads#1@0|)) (and |b$reqreads#1@0| (or (not (=> (= (ControlFlow 0 39141) 39145) true)) (and (= (ControlFlow 0 39141) 39147) (= $_Frame@0 (|lambda#11| null $Heap alloc false)) (Test.QueryReceipt.QueryReceipt_q this@@27) (or (not (=> (= (ControlFlow 0 39147) (- 0 56573)) (and (<= 0 |i#0@@9|) (< |i#0@@9| (|Seq#Length| (Test.QueryReceipt.lines this@@27)))))) (and (Test.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))) (or (not (=> (= (ControlFlow 0 39147) (- 0 56605)) (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) (and (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))) ($IsAlloc (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))) Tclass.Test.ChildMap $Heap) (|Test.ChildMap.WF#canCall| (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (Test.QueryReceipt.QueryReceipt_q this@@27) (Test.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))) (|Test.ChildMap.WF#canCall| (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (or (and (= (ControlFlow 0 39147) (- 0 56701)) (|Test.ChildMap.WF#canCall| (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (not (Test.ChildMap.WF ($LS $LZ) (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) (|Common.__default.TotalSet#canCall| (|IMap#Domain| (Test.ChildMap.mapp (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))))) (not (Common.__default.TotalSet (|IMap#Domain| (Test.ChildMap.mapp (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))))) (not (=> (= (type |k#0@@3!1010!127|) (SeqType BoxType)) (=> (and ($Is |k#0@@3!1010!127| Tclass.Common.Key) (Common.__default.AnyKey |k#0@@3!1010!127|)) (U_2_bool (MapType0Select (|IMap#Domain| (Test.ChildMap.mapp (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) ($Box |k#0@@3!1010!127|))))))) (and (= (ControlFlow 0 39147) (- 0 56869)) (|Test.ChildMap.WF#canCall| (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (not (Test.ChildMap.WF ($LS $LZ) (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) (not (=> (= (type |k#1@@3!1012!128|) (SeqType BoxType)) (=> (and ($Is |k#1@@3!1012!128| Tclass.Common.Key) (Common.__default.AnyKey |k#1@@3!1012!128|)) (Test.BetreeNode.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| (Test.ChildMap.mapp (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) ($Box |k#1@@3!1012!128|)))))))) (not (=> (and (Test.ChildMap.WF ($LS ($LS $LZ)) (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (Test.QueryReceipt.QueryReceipt_q this@@27)) (and (=> (= (ControlFlow 0 39147) (- 0 57033)) (and (<= 0 |i#0@@9|) (< |i#0@@9| (|Seq#Length| (Test.QueryReceipt.lines this@@27))))) (=> (and (<= 0 |i#0@@9|) (< |i#0@@9| (|Seq#Length| (Test.QueryReceipt.lines this@@27)))) (=> (Test.QueryReceiptLine.QueryReceiptLine_q ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))) (and (=> (= (ControlFlow 0 39147) (- 0 57065)) (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (=> (Test.BetreeNode.BetreeNode_q (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))) (=> (Test.ChildMap.ChildMap_q (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|))))) (=> (and (Test.QueryReceipt.QueryReceipt_q this@@27) (= (ControlFlow 0 39147) (- 0 57103))) (U_2_bool (MapType0Select (|IMap#Domain| (Test.ChildMap.mapp (Test.BetreeNode.children (Test.QueryReceiptLine.node ($Unbox DatatypeTypeType (|Seq#Index| (Test.QueryReceipt.lines this@@27) |i#0@@9|)))))) ($Box (Test.QueryReceipt.key this@@27)))))))))))))))))))))))))
(check-sat)

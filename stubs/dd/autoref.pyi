from typing import Iterator, List, Mapping, Set

class Function:
    def __or__(self, other: "Function") -> "Function": ...
    def __and__(self, other: "Function") -> "Function": ...

class BDD:
    true: Function
    false: Function

    def declare(self, *variables: str) -> None: ...
    def add_expr(self, expr: str) -> Function: ...
    def to_expr(self, expr: Function) -> str: ...
    def ite(
        self, condition: Function, then: Function, otherwise: Function
    ) -> Function: ...
    def let(self, mapping: Mapping[str, str], expr: Function) -> Function: ...
    def pick_iter(
        self, expr: Function, care_vars: List[str] = []
    ) -> Iterator[Mapping[str, bool]]: ...
    def forall(self, qvars: Set[str], expr: Function) -> Function: ...
    def exist(self, qvars: Set[str], expr: Function) -> Function: ...
